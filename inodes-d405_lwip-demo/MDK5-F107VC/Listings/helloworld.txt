; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\helloworld.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\helloworld.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\CMSIS\Device -I..\Drivers\CMSIS\Include -I..\Middlewares\Third_Party\LwIP\src\include -I..\Middlewares\Third_Party\LwIP\system -I..\Middlewares\Third_Party\LwIP\src\include\netif\ppp -I..\Middlewares\Third_Party\LwIP\src\include\lwip -I..\Middlewares\Third_Party\LwIP\src\include\lwip\apps -I..\Middlewares\Third_Party\LwIP\src\include\lwip\priv -I..\Middlewares\Third_Party\LwIP\src\include\lwip\prot -I..\Middlewares\Third_Party\LwIP\src\include\netif -I..\Middlewares\Third_Party\LwIP\src\include\posix -I..\Middlewares\Third_Party\LwIP\src\include\posix\sys -I..\Middlewares\Third_Party\LwIP\system\arch -I..\App -I..\Middlewares\Third_Party\LwIP\system -I.\RTE\_f107vc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_CL -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F107xC --omf_browse=.\objects\helloworld.crf ..\App\helloworld.c]
                          THUMB

                          AREA ||i.HelloWorld_accept||, CODE, READONLY, ALIGN=2

                  HelloWorld_accept PROC
;;;142      */
;;;143    static err_t HelloWorld_accept(void *arg, struct tcp_pcb *pcb, err_t err)
000000  b510              PUSH     {r4,lr}
;;;144    {     
000002  460c              MOV      r4,r1
;;;145      
;;;146      /* Tell LwIP to associate this structure with this connection. */
;;;147      tcp_arg(pcb, mem_calloc(sizeof(struct name), 1));	
000004  2101              MOVS     r1,#1
000006  2024              MOVS     r0,#0x24
000008  f7fffffe          BL       mem_calloc
00000c  4601              MOV      r1,r0
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       tcp_arg
;;;148      
;;;149      /* Configure LwIP to use our call back functions. */
;;;150      tcp_err(pcb, HelloWorld_conn_err);
000014  4907              LDR      r1,|L1.52|
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       tcp_err
;;;151      tcp_recv(pcb, HelloWorld_recv);
00001c  4906              LDR      r1,|L1.56|
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       tcp_recv
;;;152      
;;;153      /* Send out the first message */  
;;;154      tcp_write(pcb, GREETING, strlen(GREETING), 1); 
000024  2301              MOVS     r3,#1
000026  221b              MOVS     r2,#0x1b
000028  a104              ADR      r1,|L1.60|
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       tcp_write
;;;155    
;;;156      return ERR_OK;
000030  2000              MOVS     r0,#0
;;;157    }
000032  bd10              POP      {r4,pc}
;;;158    
                          ENDP

                  |L1.52|
                          DCD      HelloWorld_conn_err
                  |L1.56|
                          DCD      HelloWorld_recv
                  |L1.60|
00003c  48656c6c          DCB      "Hello. What is your name?\r\n",0
000040  6f2e2057
000044  68617420
000048  69732079
00004c  6f757220
000050  6e616d65
000054  3f0d0a00

                          AREA ||i.HelloWorld_conn_err||, CODE, READONLY, ALIGN=1

                  HelloWorld_conn_err PROC
;;;164      */
;;;165    static void HelloWorld_conn_err(void *arg, err_t err)
000000  f7ffbffe          B.W      mem_free
;;;166    {
;;;167      struct name *name;
;;;168      name = (struct name *)arg;
;;;169    
;;;170      mem_free(name);
;;;171    }
;;;172    
                          ENDP


                          AREA ||i.HelloWorld_init||, CODE, READONLY, ALIGN=2

                  HelloWorld_init PROC
;;;31       */
;;;32     void HelloWorld_init(void)
000000  b510              PUSH     {r4,lr}
;;;33     {
;;;34       struct tcp_pcb *pcb;	            		
;;;35       
;;;36       /* Create a new TCP control block  */
;;;37       pcb = tcp_new();	                		 	
000002  f7fffffe          BL       tcp_new
000006  4604              MOV      r4,r0
;;;38     
;;;39       /* Assign to the new pcb a local IP address and a port number */
;;;40       /* Using IP_ADDR_ANY allow the pcb to be used by any local interface */
;;;41       tcp_bind(pcb, IP_ADDR_ANY, 23);       
000008  2217              MOVS     r2,#0x17
00000a  4906              LDR      r1,|L3.36|
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       tcp_bind
;;;42     
;;;43     
;;;44       /* Set the connection to the LISTEN state */
;;;45       pcb = tcp_listen(pcb);				
000012  21ff              MOVS     r1,#0xff
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       tcp_listen_with_backlog
;;;46     
;;;47       /* Specify the function to be called when a connection is established */	
;;;48       tcp_accept(pcb, HelloWorld_accept);   
00001a  e8bd4010          POP      {r4,lr}
00001e  4902              LDR      r1,|L3.40|
000020  f7ffbffe          B.W      tcp_accept
;;;49     										
;;;50     }
;;;51     
                          ENDP

                  |L3.36|
                          DCD      ip_addr_any
                  |L3.40|
                          DCD      HelloWorld_accept

                          AREA ||i.HelloWorld_recv||, CODE, READONLY, ALIGN=2

                  HelloWorld_recv PROC
;;;59       */
;;;60     static err_t HelloWorld_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;61     {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4617              MOV      r7,r2
;;;62       struct pbuf *q;
;;;63       struct name *name = (struct name *)arg;
;;;64       int done;
;;;65       char *c;
;;;66       int i;
;;;67      
;;;68     
;;;69       /* We perform here any necessary processing on the pbuf */
;;;70       if (p != NULL) 
00000a  2f00              CMP      r7,#0
00000c  d063              BEQ      |L4.214|
;;;71       {        
;;;72     	/* We call this function to tell the LwIp that we have processed the data */
;;;73     	/* This lets the stack advertise a larger window, so more data can be received*/
;;;74     	tcp_recved(pcb, p->tot_len);
00000e  8939              LDRH     r1,[r7,#8]
000010  4640              MOV      r0,r8
000012  f7fffffe          BL       tcp_recved
;;;75     
;;;76         /* Check the name if NULL, no data passed, return withh illegal argument error */
;;;77     	if(!name) 
000016  b114              CBZ      r4,|L4.30|
;;;78         {
;;;79           pbuf_free(p);
;;;80           return ERR_ARG;
;;;81         }
;;;82     
;;;83         done = 0;
000018  2600              MOVS     r6,#0
;;;84         for(q=p; q != NULL; q = q->next) 
00001a  463d              MOV      r5,r7
00001c  e01f              B        |L4.94|
                  |L4.30|
00001e  4638              MOV      r0,r7                 ;79
000020  f7fffffe          BL       pbuf_free
000024  f06f000f          MVN      r0,#0xf               ;80
                  |L4.40|
;;;85         {
;;;86           c = q->payload;
;;;87           for(i=0; i<q->len && !done; i++) 
;;;88     	  {
;;;89             done = ((c[i] == '\r') || (c[i] == '\n'));
;;;90             if(name->length < MAX_NAME_SIZE) 
;;;91     	    {
;;;92               name->bytes[name->length++] = c[i];
;;;93             }
;;;94           }
;;;95         }
;;;96         if(done) 
;;;97         {
;;;98           if(name->bytes[name->length-2] != '\r' || name->bytes[name->length-1] != '\n') 
;;;99     	  {
;;;100            if((name->bytes[name->length-1] == '\r' || name->bytes[name->length-1] == '\n') && (name->length+1 <= MAX_NAME_SIZE)) 
;;;101    	    {
;;;102    	      name->length += 1;
;;;103            } 
;;;104    	    else if(name->length+2 <= MAX_NAME_SIZE) 
;;;105    	    {
;;;106              name->length += 2;
;;;107            } 
;;;108    	    else 
;;;109    	    {
;;;110              name->length = MAX_NAME_SIZE;
;;;111            }
;;;112    
;;;113            name->bytes[name->length-2] = '\r';
;;;114            name->bytes[name->length-1] = '\n';
;;;115          }
;;;116          tcp_write(pcb, HELLO, strlen(HELLO), 1);
;;;117    
;;;118          tcp_write(pcb, name->bytes, name->length, TCP_WRITE_FLAG_COPY);
;;;119          name->length = 0;
;;;120        }
;;;121    	
;;;122    	/* End of processing, we free the pbuf */
;;;123        pbuf_free(p);
;;;124      }  
;;;125      else if (err == ERR_OK) 
;;;126      {
;;;127        /* When the pbuf is NULL and the err is ERR_OK, the remote end is closing the connection. */
;;;128        /* We free the allocated memory and we close the connection */
;;;129        mem_free(name);
;;;130        return tcp_close(pcb);
;;;131      }
;;;132      return ERR_OK;
;;;133    
;;;134    }
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L4.44|
00002c  686a              LDR      r2,[r5,#4]            ;86
00002e  2000              MOVS     r0,#0                 ;87
000030  e00f              B        |L4.82|
                  |L4.50|
000032  5c13              LDRB     r3,[r2,r0]            ;89
000034  2b0d              CMP      r3,#0xd               ;89
000036  d01c              BEQ      |L4.114|
000038  2b0a              CMP      r3,#0xa               ;89
00003a  d01a              BEQ      |L4.114|
00003c  2600              MOVS     r6,#0                 ;89
                  |L4.62|
00003e  6821              LDR      r1,[r4,#0]            ;90
000040  2920              CMP      r1,#0x20              ;90
000042  da05              BGE      |L4.80|
000044  f1010c01          ADD      r12,r1,#1             ;92
000048  4421              ADD      r1,r1,r4              ;92
00004a  f8c4c000          STR      r12,[r4,#0]           ;92
00004e  710b              STRB     r3,[r1,#4]            ;92
                  |L4.80|
000050  1c40              ADDS     r0,r0,#1              ;87
                  |L4.82|
000052  8969              LDRH     r1,[r5,#0xa]          ;87
000054  4281              CMP      r1,r0                 ;87
000056  dd01              BLE      |L4.92|
000058  2e00              CMP      r6,#0                 ;87
00005a  d0ea              BEQ      |L4.50|
                  |L4.92|
00005c  682d              LDR      r5,[r5,#0]            ;84
                  |L4.94|
00005e  2d00              CMP      r5,#0                 ;84
000060  d1e4              BNE      |L4.44|
000062  b3a6              CBZ      r6,|L4.206|
000064  6820              LDR      r0,[r4,#0]            ;98
000066  1ca1              ADDS     r1,r4,#2              ;98
000068  460a              MOV      r2,r1                 ;98
00006a  5c41              LDRB     r1,[r0,r1]            ;98
00006c  290d              CMP      r1,#0xd               ;98
00006e  d106              BNE      |L4.126|
000070  e001              B        |L4.118|
                  |L4.114|
000072  2601              MOVS     r6,#1                 ;89
000074  e7e3              B        |L4.62|
                  |L4.118|
000076  1ce1              ADDS     r1,r4,#3              ;98
000078  5c41              LDRB     r1,[r0,r1]            ;98
00007a  290a              CMP      r1,#0xa               ;98
00007c  d018              BEQ      |L4.176|
                  |L4.126|
00007e  1ce1              ADDS     r1,r4,#3              ;100
000080  460b              MOV      r3,r1                 ;100
000082  5c41              LDRB     r1,[r0,r1]            ;100
000084  290d              CMP      r1,#0xd               ;100
000086  d001              BEQ      |L4.140|
000088  290a              CMP      r1,#0xa               ;100
00008a  d104              BNE      |L4.150|
                  |L4.140|
00008c  1c41              ADDS     r1,r0,#1              ;100
00008e  2920              CMP      r1,#0x20              ;100
000090  dc01              BGT      |L4.150|
000092  6021              STR      r1,[r4,#0]            ;102
000094  e006              B        |L4.164|
                  |L4.150|
000096  1c80              ADDS     r0,r0,#2              ;104
000098  2820              CMP      r0,#0x20              ;104
00009a  dc01              BGT      |L4.160|
00009c  6020              STR      r0,[r4,#0]            ;106
00009e  e001              B        |L4.164|
                  |L4.160|
0000a0  2020              MOVS     r0,#0x20              ;110
0000a2  6020              STR      r0,[r4,#0]            ;110
                  |L4.164|
0000a4  6821              LDR      r1,[r4,#0]            ;113
0000a6  200d              MOVS     r0,#0xd               ;113
0000a8  5488              STRB     r0,[r1,r2]            ;113
0000aa  6821              LDR      r1,[r4,#0]            ;114
0000ac  200a              MOVS     r0,#0xa               ;114
0000ae  54c8              STRB     r0,[r1,r3]            ;114
                  |L4.176|
0000b0  2301              MOVS     r3,#1                 ;116
0000b2  2206              MOVS     r2,#6                 ;116
0000b4  a10d              ADR      r1,|L4.236|
0000b6  4640              MOV      r0,r8                 ;116
0000b8  f7fffffe          BL       tcp_write
0000bc  8820              LDRH     r0,[r4,#0]            ;118
0000be  2301              MOVS     r3,#1                 ;118
0000c0  b282              UXTH     r2,r0                 ;118
0000c2  1d21              ADDS     r1,r4,#4              ;118
0000c4  4640              MOV      r0,r8                 ;118
0000c6  f7fffffe          BL       tcp_write
0000ca  2000              MOVS     r0,#0                 ;119
0000cc  6020              STR      r0,[r4,#0]            ;119
                  |L4.206|
0000ce  4638              MOV      r0,r7                 ;123
0000d0  f7fffffe          BL       pbuf_free
0000d4  e000              B        |L4.216|
                  |L4.214|
0000d6  b10b              CBZ      r3,|L4.220|
                  |L4.216|
0000d8  2000              MOVS     r0,#0                 ;132
0000da  e7a5              B        |L4.40|
                  |L4.220|
0000dc  4620              MOV      r0,r4                 ;129
0000de  f7fffffe          BL       mem_free
0000e2  4640              MOV      r0,r8                 ;130
0000e4  e8bd41f0          POP      {r4-r8,lr}            ;130
0000e8  f7ffbffe          B.W      tcp_close
;;;135    
                          ENDP

                  |L4.236|
0000ec  48656c6c          DCB      "Hello ",0
0000f0  6f2000  
0000f3  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\App\\helloworld.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_helloworld_c_1485388d____REV16|
#line 463 "..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_helloworld_c_1485388d____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_helloworld_c_1485388d____REVSH|
#line 478
|__asm___12_helloworld_c_1485388d____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_helloworld_c_1485388d____RRX|
#line 665
|__asm___12_helloworld_c_1485388d____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
