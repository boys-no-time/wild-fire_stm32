; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\slipif.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\slipif.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\CMSIS\Device -I..\Drivers\CMSIS\Include -I..\Middlewares\Third_Party\LwIP\src\include -I..\Middlewares\Third_Party\LwIP\system -I..\Middlewares\Third_Party\LwIP\src\include\netif\ppp -I..\Middlewares\Third_Party\LwIP\src\include\lwip -I..\Middlewares\Third_Party\LwIP\src\include\lwip\apps -I..\Middlewares\Third_Party\LwIP\src\include\lwip\priv -I..\Middlewares\Third_Party\LwIP\src\include\lwip\prot -I..\Middlewares\Third_Party\LwIP\src\include\netif -I..\Middlewares\Third_Party\LwIP\src\include\posix -I..\Middlewares\Third_Party\LwIP\src\include\posix\sys -I..\Middlewares\Third_Party\LwIP\system\arch -I..\App -I..\Middlewares\Third_Party\LwIP\system -I.\RTE\_f107vc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_CL -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F107xC --omf_browse=.\objects\slipif.crf ..\Middlewares\Third_Party\LwIP\src\netif\slipif.c]
                          THUMB

                          AREA ||i.slipif_init||, CODE, READONLY, ALIGN=2

                  slipif_init PROC
;;;360    err_t
;;;361    slipif_init(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;362    {
000002  4605              MOV      r5,r0
;;;363      struct slipif_priv *priv;
;;;364      u8_t sio_num;
;;;365    
;;;366      LWIP_DEBUGF(SLIP_DEBUG, ("slipif_init: netif->num=%"U16_F"\n", (u16_t)netif->num));
;;;367    
;;;368      /* Allocate private data */
;;;369      priv = (struct slipif_priv *)mem_malloc(sizeof(struct slipif_priv));
000004  2014              MOVS     r0,#0x14
000006  f7fffffe          BL       mem_malloc
00000a  4604              MOV      r4,r0
;;;370      if (!priv) {
00000c  0020              MOVS     r0,r4
00000e  d00e              BEQ      |L1.46|
;;;371        return ERR_MEM;
;;;372      }
;;;373    
;;;374      netif->name[0] = 's';
000010  2073              MOVS     r0,#0x73
000012  f8850038          STRB     r0,[r5,#0x38]
;;;375      netif->name[1] = 'l';
000016  206c              MOVS     r0,#0x6c
000018  f8850039          STRB     r0,[r5,#0x39]
;;;376    #if LWIP_IPV4
;;;377      netif->output = slipif_output_v4;
00001c  480f              LDR      r0,|L1.92|
00001e  6168              STR      r0,[r5,#0x14]
;;;378    #endif /* LWIP_IPV4 */
;;;379    #if LWIP_IPV6
;;;380      netif->output_ip6 = slipif_output_v6;
;;;381    #endif /* LWIP_IPV6 */
;;;382      netif->mtu = SLIP_MAX_SIZE;
000020  f24050dc          MOV      r0,#0x5dc
000024  85e8              STRH     r0,[r5,#0x2e]
;;;383    
;;;384      /* netif->state or netif->num contain the port number */
;;;385      if (netif->state != NULL) {
000026  6a68              LDR      r0,[r5,#0x24]
000028  b120              CBZ      r0,|L1.52|
;;;386        sio_num = *(u8_t*)netif->state;
00002a  7800              LDRB     r0,[r0,#0]
00002c  e004              B        |L1.56|
                  |L1.46|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;371
;;;387      } else {
;;;388        sio_num = netif->num;
;;;389      }
;;;390      /* Try to open the serial port. */
;;;391      priv->sd = sio_open(sio_num);
;;;392      if (!priv->sd) {
;;;393        /* Opening the serial port failed. */
;;;394        mem_free(priv);
;;;395        return ERR_IF;
;;;396      }
;;;397    
;;;398      /* Initialize private data */
;;;399      priv->p = NULL;
;;;400      priv->q = NULL;
;;;401      priv->state = SLIP_RECV_NORMAL;
;;;402      priv->i = 0;
;;;403      priv->recved = 0;
;;;404    #if SLIP_RX_FROM_ISR
;;;405      priv->rxpackets = NULL;
;;;406    #endif
;;;407    
;;;408      netif->state = priv;
;;;409    
;;;410      /* initialize the snmp variables and counters inside the struct netif */
;;;411      MIB2_INIT_NETIF(netif, snmp_ifType_slip, SLIP_SIO_SPEED(priv->sd));
;;;412    
;;;413    #if SLIP_USE_RX_THREAD
;;;414      /* Create a thread to poll the serial line. */
;;;415      sys_thread_new(SLIPIF_THREAD_NAME, slipif_loop_thread, netif,
;;;416        SLIPIF_THREAD_STACKSIZE, SLIPIF_THREAD_PRIO);
;;;417    #endif /* SLIP_USE_RX_THREAD */
;;;418      return ERR_OK;
;;;419    }
000032  bd70              POP      {r4-r6,pc}
                  |L1.52|
000034  f895003a          LDRB     r0,[r5,#0x3a]         ;388
                  |L1.56|
000038  f7fffffe          BL       sio_open
00003c  6020              STR      r0,[r4,#0]            ;391
00003e  b138              CBZ      r0,|L1.80|
000040  2000              MOVS     r0,#0                 ;399
000042  6060              STR      r0,[r4,#4]            ;399
000044  60a0              STR      r0,[r4,#8]            ;400
000046  7320              STRB     r0,[r4,#0xc]          ;401
000048  81e0              STRH     r0,[r4,#0xe]          ;402
00004a  8220              STRH     r0,[r4,#0x10]         ;403
00004c  626c              STR      r4,[r5,#0x24]         ;408
00004e  bd70              POP      {r4-r6,pc}
                  |L1.80|
000050  4620              MOV      r0,r4                 ;394
000052  f7fffffe          BL       mem_free
000056  f06f000b          MVN      r0,#0xb               ;395
00005a  bd70              POP      {r4-r6,pc}
;;;420    
                          ENDP

                  |L1.92|
                          DCD      slipif_output_v4

                          AREA ||i.slipif_output||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  slipif_output PROC
;;;115    static err_t
;;;116    slipif_output(struct netif *netif, struct pbuf *p)
000000  b570              PUSH     {r4-r6,lr}
;;;117    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;118      struct slipif_priv *priv;
;;;119      struct pbuf *q;
;;;120      u16_t i;
;;;121      u8_t c;
;;;122    
;;;123      LWIP_ASSERT("netif != NULL", (netif != NULL));
000006  2c00              CMP      r4,#0
000008  d105              BNE      |L2.22|
00000a  a323              ADR      r3,|L2.152|
00000c  227b              MOVS     r2,#0x7b
00000e  a12f              ADR      r1,|L2.204|
000010  a032              ADR      r0,|L2.220|
000012  f7fffffe          BL       __2printf
                  |L2.22|
;;;124      LWIP_ASSERT("netif->state != NULL", (netif->state != NULL));
000016  6a60              LDR      r0,[r4,#0x24]
000018  b928              CBNZ     r0,|L2.38|
00001a  a31f              ADR      r3,|L2.152|
00001c  227c              MOVS     r2,#0x7c
00001e  a139              ADR      r1,|L2.260|
000020  a02e              ADR      r0,|L2.220|
000022  f7fffffe          BL       __2printf
                  |L2.38|
;;;125      LWIP_ASSERT("p != NULL", (p != NULL));
000026  b92e              CBNZ     r6,|L2.52|
000028  a31b              ADR      r3,|L2.152|
00002a  227d              MOVS     r2,#0x7d
00002c  a13b              ADR      r1,|L2.284|
00002e  a02b              ADR      r0,|L2.220|
000030  f7fffffe          BL       __2printf
                  |L2.52|
;;;126    
;;;127      LWIP_DEBUGF(SLIP_DEBUG, ("slipif_output(%"U16_F"): sending %"U16_F" bytes\n", (u16_t)netif->num, p->tot_len));
;;;128      priv = (struct slipif_priv *)netif->state;
000034  6a64              LDR      r4,[r4,#0x24]
;;;129    
;;;130      /* Send pbuf out on the serial I/O device. */
;;;131      /* Start with packet delimiter. */
;;;132      sio_send(SLIP_END, priv->sd);
000036  20c0              MOVS     r0,#0xc0
000038  6821              LDR      r1,[r4,#0]
00003a  f7fffffe          BL       sio_send
;;;133    
;;;134      for (q = p; q != NULL; q = q->next) {
00003e  e010              B        |L2.98|
                  |L2.64|
;;;135        for (i = 0; i < q->len; i++) {
000040  2500              MOVS     r5,#0
000042  e00a              B        |L2.90|
                  |L2.68|
;;;136          c = ((u8_t *)q->payload)[i];
000044  6870              LDR      r0,[r6,#4]
000046  5d40              LDRB     r0,[r0,r5]
;;;137          switch (c) {
000048  28c0              CMP      r0,#0xc0
00004a  d012              BEQ      |L2.114|
00004c  28db              CMP      r0,#0xdb
00004e  d019              BEQ      |L2.132|
;;;138          case SLIP_END:
;;;139            /* need to escape this byte (0xC0 -> 0xDB, 0xDC) */
;;;140            sio_send(SLIP_ESC, priv->sd);
;;;141            sio_send(SLIP_ESC_END, priv->sd);
;;;142            break;
;;;143          case SLIP_ESC:
;;;144            /* need to escape this byte (0xDB -> 0xDB, 0xDD) */
;;;145            sio_send(SLIP_ESC, priv->sd);
;;;146            sio_send(SLIP_ESC_ESC, priv->sd);
;;;147            break;
;;;148          default:
;;;149            /* normal byte - no need for escaping */
;;;150            sio_send(c, priv->sd);
000050  6821              LDR      r1,[r4,#0]
000052  f7fffffe          BL       sio_send
                  |L2.86|
000056  1c6d              ADDS     r5,r5,#1              ;135
000058  b2ad              UXTH     r5,r5                 ;135
                  |L2.90|
00005a  8970              LDRH     r0,[r6,#0xa]          ;135
00005c  42a8              CMP      r0,r5                 ;135
00005e  d8f1              BHI      |L2.68|
000060  6836              LDR      r6,[r6,#0]            ;134
                  |L2.98|
000062  2e00              CMP      r6,#0                 ;134
000064  d1ec              BNE      |L2.64|
;;;151            break;
;;;152          }
;;;153        }
;;;154      }
;;;155      /* End with packet delimiter. */
;;;156      sio_send(SLIP_END, priv->sd);
000066  20c0              MOVS     r0,#0xc0
000068  6821              LDR      r1,[r4,#0]
00006a  f7fffffe          BL       sio_send
;;;157      return ERR_OK;
00006e  2000              MOVS     r0,#0
;;;158    }
000070  bd70              POP      {r4-r6,pc}
                  |L2.114|
000072  20db              MOVS     r0,#0xdb              ;140
000074  6821              LDR      r1,[r4,#0]            ;140
000076  f7fffffe          BL       sio_send
00007a  20dc              MOVS     r0,#0xdc              ;141
00007c  6821              LDR      r1,[r4,#0]            ;141
00007e  f7fffffe          BL       sio_send
000082  e7e8              B        |L2.86|
                  |L2.132|
000084  20db              MOVS     r0,#0xdb              ;145
000086  6821              LDR      r1,[r4,#0]            ;145
000088  f7fffffe          BL       sio_send
00008c  20dd              MOVS     r0,#0xdd              ;146
00008e  6821              LDR      r1,[r4,#0]            ;146
000090  f7fffffe          BL       sio_send
000094  e7df              B        |L2.86|
;;;159    
                          ENDP

000096  0000              DCW      0x0000
                  |L2.152|
000098  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\netif\\slipif."
00009c  6964646c
0000a0  65776172
0000a4  65735c54
0000a8  68697264
0000ac  5f506172
0000b0  74795c4c
0000b4  7749505c
0000b8  7372635c
0000bc  6e657469
0000c0  665c736c
0000c4  69706966
0000c8  2e      
0000c9  6300              DCB      "c",0
0000cb  00                DCB      0
                  |L2.204|
0000cc  6e657469          DCB      "netif != NULL",0
0000d0  6620213d
0000d4  204e554c
0000d8  4c00    
0000da  00                DCB      0
0000db  00                DCB      0
                  |L2.220|
0000dc  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000e0  7274696f
0000e4  6e202225
0000e8  73222066
0000ec  61696c65
0000f0  64206174
0000f4  206c696e
0000f8  65202564
0000fc  20696e20
000100  25730a00
                  |L2.260|
000104  6e657469          DCB      "netif->state != NULL",0
000108  662d3e73
00010c  74617465
000110  20213d20
000114  4e554c4c
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L2.284|
00011c  7020213d          DCB      "p != NULL",0
000120  204e554c
000124  4c00    
000126  00                DCB      0
000127  00                DCB      0

                          AREA ||i.slipif_output_v4||, CODE, READONLY, ALIGN=1

                  slipif_output_v4 PROC
;;;171    static err_t
;;;172    slipif_output_v4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
000000  f7ffbffe          B.W      slipif_output
;;;173    {
;;;174      LWIP_UNUSED_ARG(ipaddr);
;;;175      return slipif_output(netif, p);
;;;176    }
;;;177    #endif /* LWIP_IPV4 */
                          ENDP


                          AREA ||i.slipif_poll||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  slipif_poll PROC
;;;426    void
;;;427    slipif_poll(struct netif *netif)
000000  b538              PUSH     {r3-r5,lr}
;;;428    {
000002  4605              MOV      r5,r0
;;;429      u8_t c;
;;;430      struct slipif_priv *priv;
;;;431    
;;;432      LWIP_ASSERT("netif != NULL", (netif != NULL));
000004  2d00              CMP      r5,#0
000006  d106              BNE      |L4.22|
000008  a30f              ADR      r3,|L4.72|
00000a  f44f72d8          MOV      r2,#0x1b0
00000e  a11b              ADR      r1,|L4.124|
000010  a01e              ADR      r0,|L4.140|
000012  f7fffffe          BL       __2printf
                  |L4.22|
;;;433      LWIP_ASSERT("netif->state != NULL", (netif->state != NULL));
000016  6a68              LDR      r0,[r5,#0x24]
000018  b930              CBNZ     r0,|L4.40|
00001a  a30b              ADR      r3,|L4.72|
00001c  f24012b1          MOV      r2,#0x1b1
000020  a124              ADR      r1,|L4.180|
000022  a01a              ADR      r0,|L4.140|
000024  f7fffffe          BL       __2printf
                  |L4.40|
;;;434    
;;;435      priv = (struct slipif_priv *)netif->state;
000028  6a6c              LDR      r4,[r5,#0x24]
;;;436    
;;;437      while (sio_tryread(priv->sd, &c, 1) > 0) {
00002a  e004              B        |L4.54|
                  |L4.44|
;;;438        slipif_rxbyte_input(netif, c);
00002c  f89d1000          LDRB     r1,[sp,#0]
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       slipif_rxbyte_input
                  |L4.54|
000036  2201              MOVS     r2,#1                 ;437
000038  4669              MOV      r1,sp                 ;437
00003a  6820              LDR      r0,[r4,#0]            ;437
00003c  f7fffffe          BL       sio_tryread
000040  2800              CMP      r0,#0                 ;437
000042  d1f3              BNE      |L4.44|
;;;439      }
;;;440    }
000044  bd38              POP      {r3-r5,pc}
;;;441    
                          ENDP

000046  0000              DCW      0x0000
                  |L4.72|
000048  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\netif\\slipif."
00004c  6964646c
000050  65776172
000054  65735c54
000058  68697264
00005c  5f506172
000060  74795c4c
000064  7749505c
000068  7372635c
00006c  6e657469
000070  665c736c
000074  69706966
000078  2e      
000079  6300              DCB      "c",0
00007b  00                DCB      0
                  |L4.124|
00007c  6e657469          DCB      "netif != NULL",0
000080  6620213d
000084  204e554c
000088  4c00    
00008a  00                DCB      0
00008b  00                DCB      0
                  |L4.140|
00008c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000090  7274696f
000094  6e202225
000098  73222066
00009c  61696c65
0000a0  64206174
0000a4  206c696e
0000a8  65202564
0000ac  20696e20
0000b0  25730a00
                  |L4.180|
0000b4  6e657469          DCB      "netif->state != NULL",0
0000b8  662d3e73
0000bc  74617465
0000c0  20213d20
0000c4  4e554c4c
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0

                          AREA ||i.slipif_rxbyte||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  slipif_rxbyte PROC
;;;206    static struct pbuf*
;;;207    slipif_rxbyte(struct netif *netif, u8_t c)
000000  b570              PUSH     {r4-r6,lr}
;;;208    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;209      struct slipif_priv *priv;
;;;210      struct pbuf *t;
;;;211    
;;;212      LWIP_ASSERT("netif != NULL", (netif != NULL));
000006  2c00              CMP      r4,#0
000008  d105              BNE      |L5.22|
00000a  a333              ADR      r3,|L5.216|
00000c  22d4              MOVS     r2,#0xd4
00000e  a13f              ADR      r1,|L5.268|
000010  a042              ADR      r0,|L5.284|
000012  f7fffffe          BL       __2printf
                  |L5.22|
;;;213      LWIP_ASSERT("netif->state != NULL", (netif->state != NULL));
000016  6a60              LDR      r0,[r4,#0x24]
000018  b928              CBNZ     r0,|L5.38|
00001a  a32f              ADR      r3,|L5.216|
00001c  22d5              MOVS     r2,#0xd5
00001e  a149              ADR      r1,|L5.324|
000020  a03e              ADR      r0,|L5.284|
000022  f7fffffe          BL       __2printf
                  |L5.38|
;;;214    
;;;215      priv = (struct slipif_priv *)netif->state;
000026  6a64              LDR      r4,[r4,#0x24]
;;;216    
;;;217      switch (priv->state) {
000028  2600              MOVS     r6,#0
00002a  7b20              LDRB     r0,[r4,#0xc]
00002c  b110              CBZ      r0,|L5.52|
00002e  2801              CMP      r0,#1
000030  d11f              BNE      |L5.114|
000032  e015              B        |L5.96|
                  |L5.52|
;;;218      case SLIP_RECV_NORMAL:
;;;219        switch (c) {
000034  2dc0              CMP      r5,#0xc0
000036  d002              BEQ      |L5.62|
000038  2ddb              CMP      r5,#0xdb
00003a  d11a              BNE      |L5.114|
00003c  e00c              B        |L5.88|
                  |L5.62|
;;;220        case SLIP_END:
;;;221          if (priv->recved > 0) {
00003e  8a21              LDRH     r1,[r4,#0x10]
000040  b141              CBZ      r1,|L5.84|
;;;222            /* Received whole packet. */
;;;223            /* Trim the pbuf to the size of the received packet. */
;;;224            pbuf_realloc(priv->q, priv->recved);
000042  68a0              LDR      r0,[r4,#8]
000044  f7fffffe          BL       pbuf_realloc
;;;225    
;;;226            LINK_STATS_INC(link.recv);
;;;227    
;;;228            LWIP_DEBUGF(SLIP_DEBUG, ("slipif: Got packet (%"U16_F" bytes)\n", priv->recved));
;;;229            t = priv->q;
000048  68a0              LDR      r0,[r4,#8]
;;;230            priv->p = priv->q = NULL;
00004a  60a6              STR      r6,[r4,#8]
00004c  6066              STR      r6,[r4,#4]
;;;231            priv->i = priv->recved = 0;
00004e  8226              STRH     r6,[r4,#0x10]
000050  81e6              STRH     r6,[r4,#0xe]
;;;232            return t;
;;;233          }
;;;234          return NULL;
;;;235        case SLIP_ESC:
;;;236          priv->state = SLIP_RECV_ESCAPE;
;;;237          return NULL;
;;;238        default:
;;;239          break;
;;;240        } /* end switch (c) */
;;;241        break;
;;;242      case SLIP_RECV_ESCAPE:
;;;243        /* un-escape END or ESC bytes, leave other bytes
;;;244           (although that would be a protocol error) */
;;;245        switch (c) {
;;;246        case SLIP_ESC_END:
;;;247          c = SLIP_END;
;;;248          break;
;;;249        case SLIP_ESC_ESC:
;;;250          c = SLIP_ESC;
;;;251          break;
;;;252        default:
;;;253          break;
;;;254        }
;;;255        priv->state = SLIP_RECV_NORMAL;
;;;256        break;
;;;257      default:
;;;258        break;
;;;259      } /* end switch (priv->state) */
;;;260    
;;;261      /* byte received, packet not yet completely received */
;;;262      if (priv->p == NULL) {
;;;263        /* allocate a new pbuf */
;;;264        LWIP_DEBUGF(SLIP_DEBUG, ("slipif_input: alloc\n"));
;;;265        priv->p = pbuf_alloc(PBUF_LINK, (PBUF_POOL_BUFSIZE - PBUF_LINK_HLEN - PBUF_LINK_ENCAPSULATION_HLEN), PBUF_POOL);
;;;266    
;;;267        if (priv->p == NULL) {
;;;268          LINK_STATS_INC(link.drop);
;;;269          LWIP_DEBUGF(SLIP_DEBUG, ("slipif_input: no new pbuf! (DROP)\n"));
;;;270          /* don't process any further since we got no pbuf to receive to */
;;;271          return NULL;
;;;272        }
;;;273    
;;;274        if (priv->q != NULL) {
;;;275          /* 'chain' the pbuf to the existing chain */
;;;276          pbuf_cat(priv->q, priv->p);
;;;277        } else {
;;;278          /* p is the first pbuf in the chain */
;;;279          priv->q = priv->p;
;;;280        }
;;;281      }
;;;282    
;;;283      /* this automatically drops bytes if > SLIP_MAX_SIZE */
;;;284      if ((priv->p != NULL) && (priv->recved <= SLIP_MAX_SIZE)) {
;;;285        ((u8_t *)priv->p->payload)[priv->i] = c;
;;;286        priv->recved++;
;;;287        priv->i++;
;;;288        if (priv->i >= priv->p->len) {
;;;289          /* on to the next pbuf */
;;;290          priv->i = 0;
;;;291          if (priv->p->next != NULL && priv->p->next->len > 0) {
;;;292            /* p is a chain, on to the next in the chain */
;;;293              priv->p = priv->p->next;
;;;294          } else {
;;;295            /* p is a single pbuf, set it to NULL so next time a new
;;;296             * pbuf is allocated */
;;;297              priv->p = NULL;
;;;298          }
;;;299        }
;;;300      }
;;;301      return NULL;
;;;302    }
000052  bd70              POP      {r4-r6,pc}
                  |L5.84|
000054  2000              MOVS     r0,#0                 ;234
000056  bd70              POP      {r4-r6,pc}
                  |L5.88|
000058  2001              MOVS     r0,#1                 ;236
00005a  7320              STRB     r0,[r4,#0xc]          ;236
00005c  2000              MOVS     r0,#0                 ;237
00005e  bd70              POP      {r4-r6,pc}
                  |L5.96|
000060  2ddc              CMP      r5,#0xdc              ;245
000062  d002              BEQ      |L5.106|
000064  2ddd              CMP      r5,#0xdd              ;245
000066  d103              BNE      |L5.112|
000068  e001              B        |L5.110|
                  |L5.106|
00006a  25c0              MOVS     r5,#0xc0              ;247
00006c  e000              B        |L5.112|
                  |L5.110|
00006e  25db              MOVS     r5,#0xdb              ;250
                  |L5.112|
000070  7326              STRB     r6,[r4,#0xc]          ;255
                  |L5.114|
000072  6860              LDR      r0,[r4,#4]            ;262
000074  b988              CBNZ     r0,|L5.154|
000076  2203              MOVS     r2,#3                 ;265
000078  f2402142          MOV      r1,#0x242             ;265
00007c  2002              MOVS     r0,#2                 ;265
00007e  f7fffffe          BL       pbuf_alloc
000082  6060              STR      r0,[r4,#4]            ;265
000084  b130              CBZ      r0,|L5.148|
000086  68a2              LDR      r2,[r4,#8]            ;274
000088  b132              CBZ      r2,|L5.152|
00008a  4601              MOV      r1,r0                 ;276
00008c  4610              MOV      r0,r2                 ;276
00008e  f7fffffe          BL       pbuf_cat
000092  e002              B        |L5.154|
                  |L5.148|
000094  2000              MOVS     r0,#0                 ;271
000096  bd70              POP      {r4-r6,pc}
                  |L5.152|
000098  60a0              STR      r0,[r4,#8]            ;279
                  |L5.154|
00009a  6860              LDR      r0,[r4,#4]            ;284
00009c  b1d0              CBZ      r0,|L5.212|
00009e  8a21              LDRH     r1,[r4,#0x10]         ;284
0000a0  f24052dc          MOV      r2,#0x5dc             ;284
0000a4  4291              CMP      r1,r2                 ;284
0000a6  d815              BHI      |L5.212|
0000a8  6840              LDR      r0,[r0,#4]            ;285
0000aa  89e1              LDRH     r1,[r4,#0xe]          ;285
0000ac  5445              STRB     r5,[r0,r1]            ;285
0000ae  8a20              LDRH     r0,[r4,#0x10]         ;286
0000b0  1c40              ADDS     r0,r0,#1              ;286
0000b2  8220              STRH     r0,[r4,#0x10]         ;286
0000b4  89e0              LDRH     r0,[r4,#0xe]          ;287
0000b6  1c40              ADDS     r0,r0,#1              ;287
0000b8  b280              UXTH     r0,r0                 ;287
0000ba  81e0              STRH     r0,[r4,#0xe]          ;287
0000bc  6861              LDR      r1,[r4,#4]            ;288
0000be  894a              LDRH     r2,[r1,#0xa]          ;288
0000c0  4290              CMP      r0,r2                 ;288
0000c2  d307              BCC      |L5.212|
0000c4  81e6              STRH     r6,[r4,#0xe]          ;290
0000c6  6808              LDR      r0,[r1,#0]            ;291
0000c8  b118              CBZ      r0,|L5.210|
0000ca  8941              LDRH     r1,[r0,#0xa]          ;291
0000cc  b109              CBZ      r1,|L5.210|
0000ce  6060              STR      r0,[r4,#4]            ;293
0000d0  e000              B        |L5.212|
                  |L5.210|
0000d2  6066              STR      r6,[r4,#4]            ;297
                  |L5.212|
0000d4  2000              MOVS     r0,#0                 ;301
0000d6  bd70              POP      {r4-r6,pc}
;;;303    
                          ENDP

                  |L5.216|
0000d8  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\netif\\slipif."
0000dc  6964646c
0000e0  65776172
0000e4  65735c54
0000e8  68697264
0000ec  5f506172
0000f0  74795c4c
0000f4  7749505c
0000f8  7372635c
0000fc  6e657469
000100  665c736c
000104  69706966
000108  2e      
000109  6300              DCB      "c",0
00010b  00                DCB      0
                  |L5.268|
00010c  6e657469          DCB      "netif != NULL",0
000110  6620213d
000114  204e554c
000118  4c00    
00011a  00                DCB      0
00011b  00                DCB      0
                  |L5.284|
00011c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000120  7274696f
000124  6e202225
000128  73222066
00012c  61696c65
000130  64206174
000134  206c696e
000138  65202564
00013c  20696e20
000140  25730a00
                  |L5.324|
000144  6e657469          DCB      "netif->state != NULL",0
000148  662d3e73
00014c  74617465
000150  20213d20
000154  4e554c4c
000158  00      
000159  00                DCB      0
00015a  00                DCB      0
00015b  00                DCB      0

                          AREA ||i.slipif_rxbyte_input||, CODE, READONLY, ALIGN=1

                  slipif_rxbyte_input PROC
;;;309    static void
;;;310    slipif_rxbyte_input(struct netif *netif, u8_t c)
000000  b570              PUSH     {r4-r6,lr}
;;;311    {
000002  4605              MOV      r5,r0
;;;312      struct pbuf *p;
;;;313      p = slipif_rxbyte(netif, c);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       slipif_rxbyte
00000a  4604              MOV      r4,r0
;;;314      if (p != NULL) {
00000c  2c00              CMP      r4,#0
00000e  d00a              BEQ      |L6.38|
;;;315        if (netif->input(p, netif) != ERR_OK) {
000010  692a              LDR      r2,[r5,#0x10]
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  4790              BLX      r2
000018  2800              CMP      r0,#0
00001a  d004              BEQ      |L6.38|
;;;316          pbuf_free(p);
00001c  4620              MOV      r0,r4
00001e  e8bd4070          POP      {r4-r6,lr}
000022  f7ffbffe          B.W      pbuf_free
                  |L6.38|
;;;317        }
;;;318      }
;;;319    }
000026  bd70              POP      {r4-r6,pc}
;;;320    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Middlewares\\Third_Party\\LwIP\\src\\netif\\slipif.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_slipif_c_06fc418c____REV16|
#line 463 "..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_slipif_c_06fc418c____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_slipif_c_06fc418c____REVSH|
#line 478
|__asm___8_slipif_c_06fc418c____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_slipif_c_06fc418c____RRX|
#line 665
|__asm___8_slipif_c_06fc418c____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
