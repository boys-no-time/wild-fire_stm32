; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\system_stm32f1xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system_stm32f1xx.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\CMSIS\Device -I..\Drivers\CMSIS\Include -I..\Middlewares\Third_Party\LwIP\src\include -I..\Middlewares\Third_Party\LwIP\system -I..\Middlewares\Third_Party\LwIP\src\include\netif\ppp -I..\Middlewares\Third_Party\LwIP\src\include\lwip -I..\Middlewares\Third_Party\LwIP\src\include\lwip\apps -I..\Middlewares\Third_Party\LwIP\src\include\lwip\priv -I..\Middlewares\Third_Party\LwIP\src\include\lwip\prot -I..\Middlewares\Third_Party\LwIP\src\include\netif -I..\Middlewares\Third_Party\LwIP\src\include\posix -I..\Middlewares\Third_Party\LwIP\src\include\posix\sys -I..\Middlewares\Third_Party\LwIP\system\arch -I..\App -I..\Middlewares\Third_Party\LwIP\system -I.\RTE\_f107vc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_CL -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F107xC --omf_browse=.\objects\system_stm32f1xx.crf ..\Src\system_stm32f1xx.c]
                          THUMB

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;246      */
;;;247    void SystemCoreClockUpdate (void)
000000  b570              PUSH     {r4-r6,lr}
;;;248    {
;;;249      uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
;;;250    
;;;251    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;252      uint32_t prediv1source = 0U, prediv1factor = 0U, prediv2factor = 0U, pll2mull = 0U;
;;;253    #endif /* STM32F105xC */
;;;254    
;;;255    #if defined(STM32F100xB) || defined(STM32F100xE)
;;;256      uint32_t prediv1factor = 0U;
;;;257    #endif /* STM32F100xB or STM32F100xE */
;;;258        
;;;259      /* Get SYSCLK source -------------------------------------------------------*/
;;;260      tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4b24              LDR      r3,|L1.148|
000004  6858              LDR      r0,[r3,#4]
000006  f000000c          AND      r0,r0,#0xc
;;;261      
;;;262      switch (tmp)
;;;263      {
;;;264        case 0x00U:  /* HSI used as system clock */
;;;265          SystemCoreClock = HSI_VALUE;
00000a  4a23              LDR      r2,|L1.152|
00000c  4923              LDR      r1,|L1.156|
00000e  2800              CMP      r0,#0                 ;262
000010  d00e              BEQ      |L1.48|
;;;266          break;
;;;267        case 0x04U:  /* HSE used as system clock */
;;;268          SystemCoreClock = HSE_VALUE;
000012  4c23              LDR      r4,|L1.160|
000014  2804              CMP      r0,#4                 ;262
000016  d00d              BEQ      |L1.52|
000018  2808              CMP      r0,#8                 ;262
00001a  d00d              BEQ      |L1.56|
;;;269          break;
;;;270        case 0x08U:  /* PLL used as system clock */
;;;271    
;;;272          /* Get PLL clock source and multiplication factor ----------------------*/
;;;273          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
;;;274          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
;;;275          
;;;276    #if !defined(STM32F105xC) && !defined(STM32F107xC)      
;;;277          pllmull = ( pllmull >> 18U) + 2U;
;;;278          
;;;279          if (pllsource == 0x00U)
;;;280          {
;;;281            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;282            SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
;;;283          }
;;;284          else
;;;285          {
;;;286     #if defined(STM32F100xB) || defined(STM32F100xE)
;;;287           prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
;;;288           /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;289           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
;;;290     #else
;;;291            /* HSE selected as PLL clock entry */
;;;292            if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
;;;293            {/* HSE oscillator clock divided by 2 */
;;;294              SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
;;;295            }
;;;296            else
;;;297            {
;;;298              SystemCoreClock = HSE_VALUE * pllmull;
;;;299            }
;;;300     #endif
;;;301          }
;;;302    #else
;;;303          pllmull = pllmull >> 18U;
;;;304          
;;;305          if (pllmull != 0x0DU)
;;;306          {
;;;307             pllmull += 2U;
;;;308          }
;;;309          else
;;;310          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;311            pllmull = 13U / 2U; 
;;;312          }
;;;313                
;;;314          if (pllsource == 0x00U)
;;;315          {
;;;316            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;317            SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
;;;318          }
;;;319          else
;;;320          {/* PREDIV1 selected as PLL clock entry */
;;;321            
;;;322            /* Get PREDIV1 clock source and division factor */
;;;323            prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
;;;324            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
;;;325            
;;;326            if (prediv1source == 0U)
;;;327            { 
;;;328              /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;329              SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
;;;330            }
;;;331            else
;;;332            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;333              
;;;334              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;335              prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4U) + 1U;
;;;336              pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
;;;337              SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;338            }
;;;339          }
;;;340    #endif /* STM32F105xC */ 
;;;341          break;
;;;342    
;;;343        default:
;;;344          SystemCoreClock = HSI_VALUE;
00001c  600a              STR      r2,[r1,#0]  ; SystemCoreClock
                  |L1.30|
;;;345          break;
;;;346      }
;;;347      
;;;348      /* Compute HCLK clock frequency ----------------*/
;;;349      /* Get HCLK prescaler */
;;;350      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
00001e  6858              LDR      r0,[r3,#4]
000020  4a20              LDR      r2,|L1.164|
000022  f3c01003          UBFX     r0,r0,#4,#4
000026  5c10              LDRB     r0,[r2,r0]
;;;351      /* HCLK clock frequency */
;;;352      SystemCoreClock >>= tmp;  
000028  680a              LDR      r2,[r1,#0]  ; SystemCoreClock
00002a  40c2              LSRS     r2,r2,r0
00002c  600a              STR      r2,[r1,#0]  ; SystemCoreClock
00002e  bd70              POP      {r4-r6,pc}            ;266
                  |L1.48|
000030  600a              STR      r2,[r1,#0]            ;265  ; SystemCoreClock
000032  e7f4              B        |L1.30|
                  |L1.52|
000034  600c              STR      r4,[r1,#0]            ;268  ; SystemCoreClock
000036  e7f2              B        |L1.30|
                  |L1.56|
000038  6858              LDR      r0,[r3,#4]            ;273
00003a  f4001070          AND      r0,r0,#0x3c0000       ;273
00003e  685a              LDR      r2,[r3,#4]            ;274
000040  f4023280          AND      r2,r2,#0x10000        ;274
000044  0c80              LSRS     r0,r0,#18             ;303
000046  280d              CMP      r0,#0xd               ;305
000048  d001              BEQ      |L1.78|
00004a  1c80              ADDS     r0,r0,#2              ;307
00004c  e000              B        |L1.80|
                  |L1.78|
00004e  2006              MOVS     r0,#6                 ;311
                  |L1.80|
000050  b1ba              CBZ      r2,|L1.130|
000052  6ada              LDR      r2,[r3,#0x2c]         ;323
000054  f4023580          AND      r5,r2,#0x10000        ;323
000058  6ada              LDR      r2,[r3,#0x2c]         ;324
00005a  f002020f          AND      r2,r2,#0xf            ;324
00005e  1c52              ADDS     r2,r2,#1              ;324
000060  b19d              CBZ      r5,|L1.138|
000062  6add              LDR      r5,[r3,#0x2c]         ;335
000064  f3c51603          UBFX     r6,r5,#4,#4           ;335
000068  1c76              ADDS     r6,r6,#1              ;335
00006a  6add              LDR      r5,[r3,#0x2c]         ;336
00006c  f3c52503          UBFX     r5,r5,#8,#4           ;336
000070  1cad              ADDS     r5,r5,#2              ;336
000072  fbb4f4f6          UDIV     r4,r4,r6              ;337
000076  436c              MULS     r4,r5,r4              ;337
000078  fbb4f2f2          UDIV     r2,r4,r2              ;337
00007c  4342              MULS     r2,r0,r2              ;337
00007e  600a              STR      r2,[r1,#0]            ;337  ; SystemCoreClock
000080  e7cd              B        |L1.30|
                  |L1.130|
000082  4a09              LDR      r2,|L1.168|
000084  4350              MULS     r0,r2,r0              ;317
000086  6008              STR      r0,[r1,#0]            ;317  ; SystemCoreClock
000088  e7c9              B        |L1.30|
                  |L1.138|
00008a  fbb4f2f2          UDIV     r2,r4,r2              ;329
00008e  4342              MULS     r2,r0,r2              ;329
000090  600a              STR      r2,[r1,#0]            ;329  ; SystemCoreClock
000092  e7c4              B        |L1.30|
;;;353    }
;;;354    
                          ENDP

                  |L1.148|
                          DCD      0x40021000
                  |L1.152|
                          DCD      0x007a1200
                  |L1.156|
                          DCD      ||.data||
                  |L1.160|
                          DCD      0x017d7840
                  |L1.164|
                          DCD      ||.constdata||
                  |L1.168|
                          DCD      0x003d0900

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;156      */
;;;157    void SystemInit (void)
000000  4810              LDR      r0,|L2.68|
;;;158    {
;;;159      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;160      /* Set HSION bit */
;;;161      RCC->CR |= 0x00000001U;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;162    
;;;163      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;164    #if !defined(STM32F105xC) && !defined(STM32F107xC)
;;;165      RCC->CFGR &= 0xF8FF0000U;
;;;166    #else
;;;167      RCC->CFGR &= 0xF0FF0000U;
00000a  6841              LDR      r1,[r0,#4]
00000c  4a0e              LDR      r2,|L2.72|
00000e  4011              ANDS     r1,r1,r2
000010  6041              STR      r1,[r0,#4]
;;;168    #endif /* STM32F105xC */   
;;;169      
;;;170      /* Reset HSEON, CSSON and PLLON bits */
;;;171      RCC->CR &= 0xFEF6FFFFU;
000012  6801              LDR      r1,[r0,#0]
000014  4a0d              LDR      r2,|L2.76|
000016  4011              ANDS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;172    
;;;173      /* Reset HSEBYP bit */
;;;174      RCC->CR &= 0xFFFBFFFFU;
00001a  6801              LDR      r1,[r0,#0]
00001c  f4212180          BIC      r1,r1,#0x40000
000020  6001              STR      r1,[r0,#0]
;;;175    
;;;176      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;177      RCC->CFGR &= 0xFF80FFFFU;
000022  6841              LDR      r1,[r0,#4]
000024  f42101fe          BIC      r1,r1,#0x7f0000
000028  6041              STR      r1,[r0,#4]
;;;178    
;;;179    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;180      /* Reset PLL2ON and PLL3ON bits */
;;;181      RCC->CR &= 0xEBFFFFFFU;
00002a  6801              LDR      r1,[r0,#0]
00002c  f02151a0          BIC      r1,r1,#0x14000000
000030  6001              STR      r1,[r0,#0]
;;;182    
;;;183      /* Disable all interrupts and clear pending bits  */
;;;184      RCC->CIR = 0x00FF0000U;
000032  f44f017f          MOV      r1,#0xff0000
000036  6081              STR      r1,[r0,#8]
;;;185    
;;;186      /* Reset CFGR2 register */
;;;187      RCC->CFGR2 = 0x00000000U;
000038  2100              MOVS     r1,#0
00003a  62c1              STR      r1,[r0,#0x2c]
;;;188    #elif defined(STM32F100xB) || defined(STM32F100xE)
;;;189      /* Disable all interrupts and clear pending bits  */
;;;190      RCC->CIR = 0x009F0000U;
;;;191    
;;;192      /* Reset CFGR2 register */
;;;193      RCC->CFGR2 = 0x00000000U;      
;;;194    #else
;;;195      /* Disable all interrupts and clear pending bits  */
;;;196      RCC->CIR = 0x009F0000U;
;;;197    #endif /* STM32F105xC */
;;;198        
;;;199    #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) || defined(STM32F103xG)
;;;200      #ifdef DATA_IN_ExtSRAM
;;;201        SystemInit_ExtMemCtl(); 
;;;202      #endif /* DATA_IN_ExtSRAM */
;;;203    #endif 
;;;204    
;;;205    #ifdef VECT_TAB_SRAM
;;;206      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;207    #else
;;;208      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
00003c  4904              LDR      r1,|L2.80|
00003e  03c0              LSLS     r0,r0,#15
000040  6008              STR      r0,[r1,#0]
;;;209    #endif 
;;;210    }
000042  4770              BX       lr
;;;211    
                          ENDP

                  |L2.68|
                          DCD      0x40021000
                  |L2.72|
                          DCD      0xf0ff0000
                  |L2.76|
                          DCD      0xfef6ffff
                  |L2.80|
                          DCD      0xe000ed08

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  AHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.constdata||
                  APBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x00f42400

;*** Start embedded assembler ***

#line 1 "..\\Src\\system_stm32f1xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f1xx_c_5d646a67____REV16|
#line 463 "..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___18_system_stm32f1xx_c_5d646a67____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f1xx_c_5d646a67____REVSH|
#line 478
|__asm___18_system_stm32f1xx_c_5d646a67____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f1xx_c_5d646a67____RRX|
#line 665
|__asm___18_system_stm32f1xx_c_5d646a67____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
