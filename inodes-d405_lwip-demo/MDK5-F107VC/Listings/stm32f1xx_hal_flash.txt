; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\stm32f1xx_hal_flash.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_flash.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\CMSIS\Device -I..\Drivers\CMSIS\Include -I..\Middlewares\Third_Party\LwIP\src\include -I..\Middlewares\Third_Party\LwIP\system -I..\Middlewares\Third_Party\LwIP\src\include\netif\ppp -I..\Middlewares\Third_Party\LwIP\src\include\lwip -I..\Middlewares\Third_Party\LwIP\src\include\lwip\apps -I..\Middlewares\Third_Party\LwIP\src\include\lwip\priv -I..\Middlewares\Third_Party\LwIP\src\include\lwip\prot -I..\Middlewares\Third_Party\LwIP\src\include\netif -I..\Middlewares\Third_Party\LwIP\src\include\posix -I..\Middlewares\Third_Party\LwIP\src\include\posix\sys -I..\Middlewares\Third_Party\LwIP\system\arch -I..\App -I..\Middlewares\Third_Party\LwIP\system -I.\RTE\_f107vc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_CL -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F107xC --omf_browse=.\objects\stm32f1xx_hal_flash.crf ..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_Program_HalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_HalfWord PROC
;;;796      */
;;;797    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
000000  4b04              LDR      r3,|L1.20|
;;;798    {
;;;799      /* Clean the error context */
;;;800      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  2200              MOVS     r2,#0
000004  61da              STR      r2,[r3,#0x1c]  ; pFlash
;;;801      
;;;802    #if defined(FLASH_BANK2_END)
;;;803      if(Address <= FLASH_BANK1_END)
;;;804      {
;;;805    #endif /* FLASH_BANK2_END */
;;;806        /* Proceed to program the new data */
;;;807        SET_BIT(FLASH->CR, FLASH_CR_PG);
000006  4a04              LDR      r2,|L1.24|
000008  6913              LDR      r3,[r2,#0x10]
00000a  f0430301          ORR      r3,r3,#1
00000e  6113              STR      r3,[r2,#0x10]
;;;808    #if defined(FLASH_BANK2_END)
;;;809      }
;;;810      else
;;;811      {
;;;812        /* Proceed to program the new data */
;;;813        SET_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;814      }
;;;815    #endif /* FLASH_BANK2_END */
;;;816    
;;;817      /* Write data in the address */
;;;818      *(__IO uint16_t*)Address = Data;
000010  8001              STRH     r1,[r0,#0]
;;;819    }
000012  4770              BX       lr
;;;820    
                          ENDP

                  |L1.20|
                          DCD      ||.bss||
                  |L1.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_SetErrorCode||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;913      */
;;;914    static void FLASH_SetErrorCode(void)
000000  2000              MOVS     r0,#0
;;;915    {
;;;916      uint32_t flags = 0U;
;;;917      
;;;918    #if defined(FLASH_BANK2_END)
;;;919      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
;;;920    #else
;;;921      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
000002  4914              LDR      r1,|L2.84|
000004  68ca              LDR      r2,[r1,#0xc]
000006  06d3              LSLS     r3,r2,#27
;;;922    #endif /* FLASH_BANK2_END */
;;;923      {
;;;924        pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
000008  4a13              LDR      r2,|L2.88|
00000a  d504              BPL      |L2.22|
00000c  69d0              LDR      r0,[r2,#0x1c]  ; pFlash
00000e  f0400002          ORR      r0,r0,#2
000012  61d0              STR      r0,[r2,#0x1c]  ; pFlash
;;;925    #if defined(FLASH_BANK2_END)
;;;926        flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
;;;927    #else
;;;928        flags |= FLASH_FLAG_WRPERR;
000014  2010              MOVS     r0,#0x10
                  |L2.22|
;;;929    #endif /* FLASH_BANK2_END */
;;;930      }
;;;931    #if defined(FLASH_BANK2_END)
;;;932      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
;;;933    #else
;;;934      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
000016  68cb              LDR      r3,[r1,#0xc]
000018  075b              LSLS     r3,r3,#29
00001a  d505              BPL      |L2.40|
;;;935    #endif /* FLASH_BANK2_END */
;;;936      {
;;;937        pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
00001c  69d3              LDR      r3,[r2,#0x1c]  ; pFlash
00001e  f0430301          ORR      r3,r3,#1
000022  61d3              STR      r3,[r2,#0x1c]  ; pFlash
;;;938    #if defined(FLASH_BANK2_END)
;;;939        flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
;;;940    #else
;;;941        flags |= FLASH_FLAG_PGERR;
000024  f0400004          ORR      r0,r0,#4
                  |L2.40|
;;;942    #endif /* FLASH_BANK2_END */
;;;943      }
;;;944      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
000028  69cb              LDR      r3,[r1,#0x1c]
00002a  07db              LSLS     r3,r3,#31
00002c  d007              BEQ      |L2.62|
;;;945      {
;;;946        pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
00002e  69d3              LDR      r3,[r2,#0x1c]  ; pFlash
000030  f0430304          ORR      r3,r3,#4
000034  61d3              STR      r3,[r2,#0x1c]  ; pFlash
;;;947      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
000036  69ca              LDR      r2,[r1,#0x1c]
000038  f0220201          BIC      r2,r2,#1
00003c  61ca              STR      r2,[r1,#0x1c]
                  |L2.62|
;;;948      }
;;;949    
;;;950      /* Clear FLASH error pending bits */
;;;951      __HAL_FLASH_CLEAR_FLAG(flags);
00003e  f5a07280          SUB      r2,r0,#0x100
000042  3a01              SUBS     r2,#1
000044  d001              BEQ      |L2.74|
000046  60c8              STR      r0,[r1,#0xc]
;;;952    }  
000048  4770              BX       lr
                  |L2.74|
00004a  69c8              LDR      r0,[r1,#0x1c]         ;951
00004c  f0200001          BIC      r0,r0,#1              ;951
000050  61c8              STR      r0,[r1,#0x1c]         ;951
000052  4770              BX       lr
;;;953    /**
                          ENDP

                  |L2.84|
                          DCD      0x40022000
                  |L2.88|
                          DCD      ||.bss||

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;825      */
;;;826    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;827    {
000002  4604              MOV      r4,r0
;;;828      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;829         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;830         flag will be set */
;;;831         
;;;832      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4605              MOV      r5,r0
;;;833         
;;;834      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
00000a  4e11              LDR      r6,|L3.80|
00000c  e009              B        |L3.34|
                  |L3.14|
;;;835      { 
;;;836        if (Timeout != HAL_MAX_DELAY)
00000e  1c60              ADDS     r0,r4,#1
000010  d007              BEQ      |L3.34|
;;;837        {
;;;838          if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
000012  b124              CBZ      r4,|L3.30|
000014  f7fffffe          BL       HAL_GetTick
000018  1b40              SUBS     r0,r0,r5
00001a  42a0              CMP      r0,r4
00001c  d901              BLS      |L3.34|
                  |L3.30|
;;;839          {
;;;840            return HAL_TIMEOUT;
00001e  2003              MOVS     r0,#3
;;;841          }
;;;842        }
;;;843      }
;;;844      
;;;845      /* Check FLASH End of Operation flag  */
;;;846      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
;;;847      {
;;;848        /* Clear FLASH End of Operation pending bit */
;;;849        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;850      }
;;;851      
;;;852      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
;;;853         __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
;;;854         __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
;;;855      {
;;;856        /*Save the error code*/
;;;857        FLASH_SetErrorCode();
;;;858        return HAL_ERROR;
;;;859      }
;;;860    
;;;861      /* There is no error flag set */
;;;862      return HAL_OK;
;;;863    }
000020  bd70              POP      {r4-r6,pc}
                  |L3.34|
000022  68f0              LDR      r0,[r6,#0xc]          ;834
000024  07c0              LSLS     r0,r0,#31             ;834
000026  d1f2              BNE      |L3.14|
000028  68f0              LDR      r0,[r6,#0xc]          ;846
00002a  0680              LSLS     r0,r0,#26             ;846
00002c  d501              BPL      |L3.50|
00002e  2020              MOVS     r0,#0x20              ;849
000030  60f0              STR      r0,[r6,#0xc]          ;849
                  |L3.50|
000032  68f0              LDR      r0,[r6,#0xc]          ;852
000034  06c0              LSLS     r0,r0,#27             ;852
000036  d405              BMI      |L3.68|
000038  69f0              LDR      r0,[r6,#0x1c]         ;853
00003a  07c0              LSLS     r0,r0,#31             ;853
00003c  d102              BNE      |L3.68|
00003e  68f0              LDR      r0,[r6,#0xc]          ;854
000040  0740              LSLS     r0,r0,#29             ;854
000042  d503              BPL      |L3.76|
                  |L3.68|
000044  f7fffffe          BL       FLASH_SetErrorCode
000048  2001              MOVS     r0,#1                 ;858
00004a  bd70              POP      {r4-r6,pc}
                  |L3.76|
00004c  2000              MOVS     r0,#0                 ;862
00004e  bd70              POP      {r4-r6,pc}
;;;864    
                          ENDP

                  |L3.80|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;605      */
;;;606    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;607    {
;;;608      /* Prevent unused argument(s) compilation warning */
;;;609      UNUSED(ReturnValue);
;;;610    
;;;611      /* NOTE : This function Should not be modified, when the callback is needed,
;;;612                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;613       */ 
;;;614    }
;;;615    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;773      */
;;;774    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L5.8|
;;;775    {
;;;776       return pFlash.ErrorCode;
000002  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;777    }
000004  4770              BX       lr
;;;778    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.bss||

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;331      */
;;;332    void HAL_FLASH_IRQHandler(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;333    {
;;;334      uint32_t addresstmp = 0U;
;;;335      
;;;336      /* Check FLASH operation error flags */
;;;337    #if defined(FLASH_BANK2_END)
;;;338      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
;;;339        (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
;;;340    #else
;;;341      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
000004  4e41              LDR      r6,|L6.268|
000006  68f0              LDR      r0,[r6,#0xc]
;;;342    #endif /* FLASH_BANK2_END */
;;;343      {
;;;344        /* Return the faulty address */
;;;345        addresstmp = pFlash.Address;
000008  4c41              LDR      r4,|L6.272|
00000a  06c0              LSLS     r0,r0,#27             ;341
;;;346        /* Reset address */
;;;347        pFlash.Address = 0xFFFFFFFFU;
00000c  f04f37ff          MOV      r7,#0xffffffff
000010  f04f0500          MOV      r5,#0
000014  d402              BMI      |L6.28|
000016  68f0              LDR      r0,[r6,#0xc]          ;341
000018  0740              LSLS     r0,r0,#29             ;341
00001a  d508              BPL      |L6.46|
                  |L6.28|
00001c  f8d48008          LDR      r8,[r4,#8]            ;345  ; pFlash
000020  60a7              STR      r7,[r4,#8]  ; pFlash
;;;348      
;;;349        /* Save the Error code */
;;;350        FLASH_SetErrorCode();
000022  f7fffffe          BL       FLASH_SetErrorCode
;;;351        
;;;352        /* FLASH error interrupt user callback */
;;;353        HAL_FLASH_OperationErrorCallback(addresstmp);
000026  4640              MOV      r0,r8
000028  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;354    
;;;355        /* Stop the procedure ongoing */
;;;356        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00002c  7025              STRB     r5,[r4,#0]
                  |L6.46|
;;;357      }
;;;358    
;;;359      /* Check FLASH End of Operation flag  */
;;;360    #if defined(FLASH_BANK2_END)
;;;361      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
;;;362      {
;;;363        /* Clear FLASH End of Operation pending bit */
;;;364        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
;;;365    #else
;;;366      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
00002e  68f0              LDR      r0,[r6,#0xc]
000030  0680              LSLS     r0,r0,#26
000032  d553              BPL      |L6.220|
;;;367      {
;;;368        /* Clear FLASH End of Operation pending bit */
;;;369        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000034  2020              MOVS     r0,#0x20
000036  60f0              STR      r0,[r6,#0xc]
;;;370    #endif /* FLASH_BANK2_END */
;;;371        
;;;372        /* Process can continue only if no error detected */
;;;373        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
000038  7820              LDRB     r0,[r4,#0]  ; pFlash
00003a  b1f8              CBZ      r0,|L6.124|
;;;374        {
;;;375          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
00003c  7820              LDRB     r0,[r4,#0]  ; pFlash
00003e  2801              CMP      r0,#1
000040  d01d              BEQ      |L6.126|
;;;376          {
;;;377            /* Nb of pages to erased can be decreased */
;;;378            pFlash.DataRemaining--;
;;;379    
;;;380            /* Check if there are still pages to erase */
;;;381            if(pFlash.DataRemaining != 0U)
;;;382            {
;;;383              addresstmp = pFlash.Address;
;;;384              /*Indicate user which sector has been erased */
;;;385              HAL_FLASH_EndOfOperationCallback(addresstmp);
;;;386    
;;;387              /*Increment sector number*/
;;;388              addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
;;;389              pFlash.Address = addresstmp;
;;;390    
;;;391              /* If the erase operation is completed, disable the PER Bit */
;;;392              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
;;;393    
;;;394              FLASH_PageErase(addresstmp);
;;;395            }
;;;396            else
;;;397            {
;;;398              /* No more pages to Erase, user callback can be called. */
;;;399              /* Reset Sector and stop Erase pages procedure */
;;;400              pFlash.Address = addresstmp = 0xFFFFFFFFU;
;;;401              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;402              /* FLASH EOP interrupt user callback */
;;;403              HAL_FLASH_EndOfOperationCallback(addresstmp);
;;;404            }
;;;405          }
;;;406          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
000042  7820              LDRB     r0,[r4,#0]  ; pFlash
000044  2802              CMP      r0,#2
000046  d033              BEQ      |L6.176|
;;;407          {
;;;408            /* Operation is completed, disable the MER Bit */
;;;409            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;410    
;;;411    #if defined(FLASH_BANK2_END)
;;;412            /* Stop Mass Erase procedure if no pending mass erase on other bank */
;;;413            if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
;;;414            {
;;;415    #endif /* FLASH_BANK2_END */
;;;416              /* MassErase ended. Return the selected bank */
;;;417              /* FLASH EOP interrupt user callback */
;;;418              HAL_FLASH_EndOfOperationCallback(0U);
;;;419    
;;;420              /* Stop Mass Erase procedure*/
;;;421              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;422            }
;;;423    #if defined(FLASH_BANK2_END)
;;;424          }
;;;425    #endif /* FLASH_BANK2_END */
;;;426          else
;;;427          {
;;;428            /* Nb of 16-bit data to program can be decreased */
;;;429            pFlash.DataRemaining--;
000048  6860              LDR      r0,[r4,#4]  ; pFlash
00004a  1e40              SUBS     r0,r0,#1
00004c  6060              STR      r0,[r4,#4]  ; pFlash
;;;430            
;;;431            /* Check if there are still 16-bit data to program */
;;;432            if(pFlash.DataRemaining != 0U)
00004e  6860              LDR      r0,[r4,#4]  ; pFlash
000050  b3b8              CBZ      r0,|L6.194|
;;;433            {
;;;434              /* Increment address to 16-bit */
;;;435              pFlash.Address += 2U;
000052  68a0              LDR      r0,[r4,#8]  ; pFlash
000054  1c80              ADDS     r0,r0,#2
000056  60a0              STR      r0,[r4,#8]  ; pFlash
;;;436              addresstmp = pFlash.Address;
000058  68a0              LDR      r0,[r4,#8]  ; pFlash
;;;437              
;;;438              /* Shift to have next 16-bit data */
;;;439              pFlash.Data = (pFlash.Data >> 16U);
00005a  6922              LDR      r2,[r4,#0x10]  ; pFlash
00005c  6961              LDR      r1,[r4,#0x14]  ; pFlash
00005e  0c12              LSRS     r2,r2,#16
000060  ea424201          ORR      r2,r2,r1,LSL #16
000064  0c09              LSRS     r1,r1,#16
000066  6122              STR      r2,[r4,#0x10]  ; pFlash
000068  6161              STR      r1,[r4,#0x14]  ; pFlash
;;;440              
;;;441              /* Operation is completed, disable the PG Bit */
;;;442              CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
00006a  6931              LDR      r1,[r6,#0x10]
00006c  f0210101          BIC      r1,r1,#1
000070  6131              STR      r1,[r6,#0x10]
;;;443    
;;;444              /*Program halfword (16-bit) at a specified address.*/
;;;445              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
000072  6921              LDR      r1,[r4,#0x10]  ; pFlash
000074  6962              LDR      r2,[r4,#0x14]  ; pFlash
000076  b289              UXTH     r1,r1
000078  f7fffffe          BL       FLASH_Program_HalfWord
                  |L6.124|
00007c  e02e              B        |L6.220|
                  |L6.126|
00007e  6860              LDR      r0,[r4,#4]            ;378  ; pFlash
000080  1e40              SUBS     r0,r0,#1              ;378
000082  6060              STR      r0,[r4,#4]            ;378  ; pFlash
000084  6860              LDR      r0,[r4,#4]            ;381  ; pFlash
000086  b168              CBZ      r0,|L6.164|
000088  68a0              LDR      r0,[r4,#8]            ;383  ; pFlash
00008a  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
00008e  68a0              LDR      r0,[r4,#8]            ;388  ; pFlash
000090  f5006000          ADD      r0,r0,#0x800          ;388
000094  60a0              STR      r0,[r4,#8]            ;389  ; pFlash
000096  6931              LDR      r1,[r6,#0x10]         ;392
000098  f0210102          BIC      r1,r1,#2              ;392
00009c  6131              STR      r1,[r6,#0x10]         ;392
00009e  f7fffffe          BL       FLASH_PageErase
0000a2  e01b              B        |L6.220|
                  |L6.164|
0000a4  4638              MOV      r0,r7                 ;400
0000a6  60a7              STR      r7,[r4,#8]            ;400  ; pFlash
0000a8  7025              STRB     r5,[r4,#0]            ;401
0000aa  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000ae  e015              B        |L6.220|
                  |L6.176|
0000b0  6930              LDR      r0,[r6,#0x10]         ;409
0000b2  f0200004          BIC      r0,r0,#4              ;409
0000b6  6130              STR      r0,[r6,#0x10]         ;409
0000b8  2000              MOVS     r0,#0                 ;418
0000ba  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000be  7025              STRB     r5,[r4,#0]            ;421
0000c0  e00c              B        |L6.220|
                  |L6.194|
0000c2  e7ff              B        |L6.196|
                  |L6.196|
;;;446            }
;;;447            else
;;;448            {
;;;449              /* Program ended. Return the selected address */
;;;450              /* FLASH EOP interrupt user callback */
;;;451              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
0000c4  7820              LDRB     r0,[r4,#0]  ; pFlash
0000c6  2803              CMP      r0,#3
0000c8  d016              BEQ      |L6.248|
;;;452              {
;;;453                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;454              }
;;;455              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
0000ca  7820              LDRB     r0,[r4,#0]  ; pFlash
0000cc  2804              CMP      r0,#4
0000ce  d017              BEQ      |L6.256|
;;;456              {
;;;457                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
;;;458              }
;;;459              else 
;;;460              {
;;;461                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
0000d0  68a0              LDR      r0,[r4,#8]  ; pFlash
0000d2  1f80              SUBS     r0,r0,#6
0000d4  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
                  |L6.216|
;;;462              }
;;;463            
;;;464              /* Reset Address and stop Program procedure */
;;;465              pFlash.Address = 0xFFFFFFFFU;
0000d8  60a7              STR      r7,[r4,#8]  ; pFlash
;;;466              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0000da  7025              STRB     r5,[r4,#0]
                  |L6.220|
;;;467            }
;;;468          }
;;;469        }
;;;470      }
;;;471      
;;;472    #if defined(FLASH_BANK2_END)
;;;473      /* Check FLASH End of Operation flag  */
;;;474      if(__HAL_FLASH_GET_FLAG( FLASH_FLAG_EOP_BANK2))
;;;475      {
;;;476        /* Clear FLASH End of Operation pending bit */
;;;477        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK2);
;;;478        
;;;479        /* Process can continue only if no error detected */
;;;480        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;481        {
;;;482          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
;;;483          {
;;;484            /* Nb of pages to erased can be decreased */
;;;485            pFlash.DataRemaining--;
;;;486            
;;;487            /* Check if there are still pages to erase*/
;;;488            if(pFlash.DataRemaining != 0U)
;;;489            {
;;;490              /* Indicate user which page address has been erased*/
;;;491              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;492            
;;;493              /* Increment page address to next page */
;;;494              pFlash.Address += FLASH_PAGE_SIZE;
;;;495              addresstmp = pFlash.Address;
;;;496    
;;;497              /* Operation is completed, disable the PER Bit */
;;;498              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;499    
;;;500              FLASH_PageErase(addresstmp);
;;;501            }
;;;502            else
;;;503            {
;;;504              /*No more pages to Erase*/
;;;505              
;;;506              /*Reset Address and stop Erase pages procedure*/
;;;507              pFlash.Address = 0xFFFFFFFFU;
;;;508              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;509    
;;;510              /* FLASH EOP interrupt user callback */
;;;511              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;512            }
;;;513          }
;;;514          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
;;;515          {
;;;516            /* Operation is completed, disable the MER Bit */
;;;517            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;518    
;;;519            if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_MER))
;;;520            {
;;;521              /* MassErase ended. Return the selected bank*/
;;;522              /* FLASH EOP interrupt user callback */
;;;523              HAL_FLASH_EndOfOperationCallback(0U);
;;;524            
;;;525              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;526            }
;;;527          }
;;;528          else
;;;529          {
;;;530            /* Nb of 16-bit data to program can be decreased */
;;;531            pFlash.DataRemaining--;
;;;532            
;;;533            /* Check if there are still 16-bit data to program */
;;;534            if(pFlash.DataRemaining != 0U)
;;;535            {
;;;536              /* Increment address to 16-bit */
;;;537              pFlash.Address += 2U;
;;;538              addresstmp = pFlash.Address;
;;;539              
;;;540              /* Shift to have next 16-bit data */
;;;541              pFlash.Data = (pFlash.Data >> 16U);
;;;542              
;;;543              /* Operation is completed, disable the PG Bit */
;;;544              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;545    
;;;546              /*Program halfword (16-bit) at a specified address.*/
;;;547              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
;;;548            }
;;;549            else
;;;550            {
;;;551              /*Program ended. Return the selected address*/
;;;552              /* FLASH EOP interrupt user callback */
;;;553              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
;;;554              {
;;;555                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;556              }
;;;557              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
;;;558              {
;;;559                HAL_FLASH_EndOfOperationCallback(pFlash.Address-2U);
;;;560              }
;;;561              else 
;;;562              {
;;;563                HAL_FLASH_EndOfOperationCallback(pFlash.Address-6U);
;;;564              }
;;;565              
;;;566              /* Reset Address and stop Program procedure*/
;;;567              pFlash.Address = 0xFFFFFFFFU;
;;;568              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;569            }
;;;570          }
;;;571        }
;;;572      }
;;;573    #endif 
;;;574    
;;;575      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
0000dc  7820              LDRB     r0,[r4,#0]  ; pFlash
0000de  2800              CMP      r0,#0
0000e0  d108              BNE      |L6.244|
;;;576      {
;;;577    #if defined(FLASH_BANK2_END)
;;;578        /* Operation is completed, disable the PG, PER and MER Bits for both bank */
;;;579        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
;;;580        CLEAR_BIT(FLASH->CR2, (FLASH_CR2_PG | FLASH_CR2_PER | FLASH_CR2_MER));  
;;;581      
;;;582        /* Disable End of FLASH Operation and Error source interrupts for both banks */
;;;583        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;584    #else
;;;585        /* Operation is completed, disable the PG, PER and MER Bits */
;;;586        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
0000e2  6930              LDR      r0,[r6,#0x10]
0000e4  f0200007          BIC      r0,r0,#7
0000e8  6130              STR      r0,[r6,#0x10]
;;;587    
;;;588        /* Disable End of FLASH Operation and Error source interrupts */
;;;589        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
0000ea  6930              LDR      r0,[r6,#0x10]
0000ec  f42050a0          BIC      r0,r0,#0x1400
0000f0  6130              STR      r0,[r6,#0x10]
;;;590    #endif /* FLASH_BANK2_END */
;;;591    
;;;592        /* Process Unlocked */
;;;593        __HAL_UNLOCK(&pFlash);
0000f2  7625              STRB     r5,[r4,#0x18]
                  |L6.244|
;;;594      }
;;;595    }
0000f4  e8bd81f0          POP      {r4-r8,pc}
                  |L6.248|
0000f8  68a0              LDR      r0,[r4,#8]            ;453  ; pFlash
0000fa  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000fe  e7eb              B        |L6.216|
                  |L6.256|
000100  68a0              LDR      r0,[r4,#8]            ;457  ; pFlash
000102  1e80              SUBS     r0,r0,#2              ;457
000104  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
000108  e7e6              B        |L6.216|
;;;596    
                          ENDP

00010a  0000              DCW      0x0000
                  |L6.268|
                          DCD      0x40022000
                  |L6.272|
                          DCD      ||.bss||

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;694      */
;;;695    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L7.16|
;;;696    {
;;;697      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;698      SET_BIT(FLASH->CR, FLASH_CR_LOCK);
000002  6901              LDR      r1,[r0,#0x10]
000004  f0410180          ORR      r1,r1,#0x80
000008  6101              STR      r1,[r0,#0x10]
;;;699      
;;;700    #if defined(FLASH_BANK2_END)
;;;701      /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
;;;702      SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
;;;703    
;;;704    #endif /* FLASH_BANK2_END */
;;;705      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;706    }
00000c  4770              BX       lr
;;;707    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OB_Launch PROC
;;;744      */
;;;745    void HAL_FLASH_OB_Launch(void)
000000  f7ffbffe          B.W      HAL_NVIC_SystemReset
;;;746    {
;;;747      /* Initiates a system reset request to launch the option byte loading */
;;;748      HAL_NVIC_SystemReset();
;;;749    }
;;;750    
                          ENDP


                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;731      */
;;;732    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L9.16|
;;;733    {
;;;734      /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
;;;735      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
000002  6901              LDR      r1,[r0,#0x10]
000004  f4217100          BIC      r1,r1,#0x200
000008  6101              STR      r1,[r0,#0x10]
;;;736      
;;;737      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;738    }
00000c  4770              BX       lr
;;;739      
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;711      */
;;;712    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4805              LDR      r0,|L10.24|
;;;713    {
;;;714      if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
000002  6901              LDR      r1,[r0,#0x10]
000004  0589              LSLS     r1,r1,#22
000006  d405              BMI      |L10.20|
;;;715      {
;;;716        /* Authorizes the Option Byte register programming */
;;;717        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
000008  4904              LDR      r1,|L10.28|
00000a  6081              STR      r1,[r0,#8]
;;;718        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
00000c  4904              LDR      r1,|L10.32|
00000e  6081              STR      r1,[r0,#8]
;;;719      }
;;;720      else
;;;721      {
;;;722        return HAL_ERROR;
;;;723      }  
;;;724      
;;;725      return HAL_OK;  
000010  2000              MOVS     r0,#0
;;;726    }
000012  4770              BX       lr
                  |L10.20|
000014  2001              MOVS     r0,#1                 ;722
000016  4770              BX       lr
;;;727    
                          ENDP

                  |L10.24|
                          DCD      0x40022000
                  |L10.28|
                          DCD      0x45670123
                  |L10.32|
                          DCD      0xcdef89ab

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;623      */
;;;624    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;625    {
;;;626      /* Prevent unused argument(s) compilation warning */
;;;627      UNUSED(ReturnValue);
;;;628    
;;;629      /* NOTE : This function Should not be modified, when the callback is needed,
;;;630                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;631       */ 
;;;632    }
;;;633    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;167      */
;;;168    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;169    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;170      HAL_StatusTypeDef status = HAL_ERROR;
;;;171      uint8_t index = 0;
00000c  2400              MOVS     r4,#0
;;;172      uint8_t nbiterations = 0;
;;;173      
;;;174      /* Process Locked */
;;;175      __HAL_LOCK(&pFlash);
00000e  f8df9074          LDR      r9,|L12.132|
000012  f8990018          LDRB     r0,[r9,#0x18]  ; pFlash
000016  2801              CMP      r0,#1
000018  d009              BEQ      |L12.46|
00001a  2001              MOVS     r0,#1
00001c  f8890018          STRB     r0,[r9,#0x18]
;;;176    
;;;177      /* Check the parameters */
;;;178      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;179      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;180    
;;;181    #if defined(FLASH_BANK2_END)
;;;182      if(Address <= FLASH_BANK1_END)
;;;183      {
;;;184    #endif /* FLASH_BANK2_END */
;;;185        /* Wait for last operation to be completed */
;;;186        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
000020  f24c3b50          MOV      r11,#0xc350
000024  4658              MOV      r0,r11
000026  f7fffffe          BL       FLASH_WaitForLastOperation
00002a  b118              CBZ      r0,|L12.52|
00002c  e026              B        |L12.124|
                  |L12.46|
00002e  2002              MOVS     r0,#2                 ;175
                  |L12.48|
;;;187    #if defined(FLASH_BANK2_END)
;;;188      }
;;;189      else
;;;190      {
;;;191        /* Wait for last operation to be completed */
;;;192        status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
;;;193      }
;;;194    #endif /* FLASH_BANK2_END */
;;;195      
;;;196      if(status == HAL_OK)
;;;197      {
;;;198        if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;199        {
;;;200          /* Program halfword (16-bit) at a specified address. */
;;;201          nbiterations = 1U;
;;;202        }
;;;203        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;204        {
;;;205          /* Program word (32-bit = 2*16-bit) at a specified address. */
;;;206          nbiterations = 2U;
;;;207        }
;;;208        else
;;;209        {
;;;210          /* Program double word (64-bit = 4*16-bit) at a specified address. */
;;;211          nbiterations = 4U;
;;;212        }
;;;213    
;;;214        for (index = 0U; index < nbiterations; index++)
;;;215        {
;;;216          FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
;;;217    
;;;218    #if defined(FLASH_BANK2_END)
;;;219          if(Address <= FLASH_BANK1_END)
;;;220          {
;;;221    #endif /* FLASH_BANK2_END */
;;;222            /* Wait for last operation to be completed */
;;;223            status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
;;;224        
;;;225            /* If the program operation is completed, disable the PG Bit */
;;;226            CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
;;;227    #if defined(FLASH_BANK2_END)
;;;228          }
;;;229          else
;;;230          {
;;;231            /* Wait for last operation to be completed */
;;;232            status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
;;;233            
;;;234            /* If the program operation is completed, disable the PG Bit */
;;;235            CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;236          }
;;;237    #endif /* FLASH_BANK2_END */
;;;238          /* In case of error, stop programation procedure */
;;;239          if (status != HAL_OK)
;;;240          {
;;;241            break;
;;;242          }
;;;243        }
;;;244      }
;;;245    
;;;246      /* Process Unlocked */
;;;247      __HAL_UNLOCK(&pFlash);
;;;248    
;;;249      return status;
;;;250    }
000030  e8bd9ff0          POP      {r4-r12,pc}
                  |L12.52|
000034  2f01              CMP      r7,#1                 ;198
000036  d005              BEQ      |L12.68|
000038  2f02              CMP      r7,#2                 ;203
00003a  d005              BEQ      |L12.72|
00003c  2704              MOVS     r7,#4                 ;211
                  |L12.62|
00003e  f8dfa048          LDR      r10,|L12.136|
000042  e019              B        |L12.120|
                  |L12.68|
000044  2701              MOVS     r7,#1                 ;201
000046  e7fa              B        |L12.62|
                  |L12.72|
000048  2702              MOVS     r7,#2                 ;206
00004a  e7f8              B        |L12.62|
                  |L12.76|
00004c  0122              LSLS     r2,r4,#4              ;216
00004e  4628              MOV      r0,r5                 ;216
000050  4631              MOV      r1,r6                 ;216
000052  f7fffffe          BL       __aeabi_llsr
000056  b281              UXTH     r1,r0                 ;216
000058  eb080044          ADD      r0,r8,r4,LSL #1       ;216
00005c  f7fffffe          BL       FLASH_Program_HalfWord
000060  4658              MOV      r0,r11                ;223
000062  f7fffffe          BL       FLASH_WaitForLastOperation
000066  f8da1010          LDR      r1,[r10,#0x10]        ;226
00006a  f0210101          BIC      r1,r1,#1              ;226
00006e  f8ca1010          STR      r1,[r10,#0x10]        ;226
000072  b918              CBNZ     r0,|L12.124|
000074  1c64              ADDS     r4,r4,#1              ;214
000076  b2e4              UXTB     r4,r4                 ;214
                  |L12.120|
000078  42bc              CMP      r4,r7                 ;214
00007a  d3e7              BCC      |L12.76|
                  |L12.124|
00007c  2100              MOVS     r1,#0                 ;247
00007e  f8891018          STRB     r1,[r9,#0x18]         ;247
000082  e7d5              B        |L12.48|
;;;251    
                          ENDP

                  |L12.132|
                          DCD      ||.bss||
                  |L12.136|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;266      */
;;;267    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;268    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;269      HAL_StatusTypeDef status = HAL_OK;
000008  2600              MOVS     r6,#0
;;;270      
;;;271      /* Process Locked */
;;;272      __HAL_LOCK(&pFlash);
00000a  4814              LDR      r0,|L13.92|
00000c  7e01              LDRB     r1,[r0,#0x18]  ; pFlash
00000e  2901              CMP      r1,#1
000010  d01a              BEQ      |L13.72|
000012  2101              MOVS     r1,#1
000014  7601              STRB     r1,[r0,#0x18]
;;;273    
;;;274      /* Check the parameters */
;;;275      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;276      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;277    
;;;278    #if defined(FLASH_BANK2_END)
;;;279      /* If procedure already ongoing, reject the next one */
;;;280      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;281      {
;;;282        return HAL_ERROR;
;;;283      }
;;;284      
;;;285      if(Address <= FLASH_BANK1_END)
;;;286      {
;;;287        /* Enable End of FLASH Operation and Error source interrupts */
;;;288        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1);
;;;289    
;;;290      }else
;;;291      {
;;;292        /* Enable End of FLASH Operation and Error source interrupts */
;;;293        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;294      }
;;;295    #else
;;;296      /* Enable End of FLASH Operation and Error source interrupts */
;;;297      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
000016  4f12              LDR      r7,|L13.96|
000018  f8d7c010          LDR      r12,[r7,#0x10]
00001c  f44c5ca0          ORR      r12,r12,#0x1400
000020  f8c7c010          STR      r12,[r7,#0x10]
;;;298    #endif /* FLASH_BANK2_END */
;;;299      
;;;300      pFlash.Address = Address;
000024  6085              STR      r5,[r0,#8]  ; pFlash
;;;301      pFlash.Data = Data;
000026  6102              STR      r2,[r0,#0x10]  ; pFlash
000028  6143              STR      r3,[r0,#0x14]  ; pFlash
;;;302    
;;;303      if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
00002a  2c01              CMP      r4,#1
00002c  d00e              BEQ      |L13.76|
;;;304      {
;;;305        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
;;;306        /* Program halfword (16-bit) at a specified address. */
;;;307        pFlash.DataRemaining = 1U;
;;;308      }
;;;309      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;310      {
;;;311        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
00002e  2104              MOVS     r1,#4
000030  2c02              CMP      r4,#2                 ;309
000032  d00f              BEQ      |L13.84|
;;;312        /* Program word (32-bit : 2*16-bit) at a specified address. */
;;;313        pFlash.DataRemaining = 2U;
;;;314      }
;;;315      else
;;;316      {
;;;317        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
000034  2305              MOVS     r3,#5
000036  7003              STRB     r3,[r0,#0]
;;;318        /* Program double word (64-bit : 4*16-bit) at a specified address. */
;;;319        pFlash.DataRemaining = 4U;
000038  6041              STR      r1,[r0,#4]  ; pFlash
                  |L13.58|
;;;320      }
;;;321    
;;;322      /* Program halfword (16-bit) at a specified address. */
;;;323      FLASH_Program_HalfWord(Address, (uint16_t)Data);
00003a  b291              UXTH     r1,r2
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       FLASH_Program_HalfWord
;;;324    
;;;325      return status;
000042  4630              MOV      r0,r6
                  |L13.68|
;;;326    }
000044  e8bd81f0          POP      {r4-r8,pc}
                  |L13.72|
000048  2002              MOVS     r0,#2                 ;272
00004a  e7fb              B        |L13.68|
                  |L13.76|
00004c  2303              MOVS     r3,#3                 ;305
00004e  7003              STRB     r3,[r0,#0]            ;305
000050  6041              STR      r1,[r0,#4]            ;307  ; pFlash
000052  e7f2              B        |L13.58|
                  |L13.84|
000054  7001              STRB     r1,[r0,#0]            ;311
000056  2102              MOVS     r1,#2                 ;313
000058  6041              STR      r1,[r0,#4]            ;313  ; pFlash
00005a  e7ee              B        |L13.58|
;;;327    
                          ENDP

                  |L13.92|
                          DCD      ||.bss||
                  |L13.96|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;656      */
;;;657    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  2000              MOVS     r0,#0
;;;658    {
;;;659      HAL_StatusTypeDef status = HAL_OK;
;;;660    
;;;661      if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000002  4906              LDR      r1,|L14.28|
000004  690a              LDR      r2,[r1,#0x10]
000006  0612              LSLS     r2,r2,#24
000008  d507              BPL      |L14.26|
;;;662      {
;;;663        /* Authorize the FLASH Registers access */
;;;664        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
00000a  4a05              LDR      r2,|L14.32|
00000c  604a              STR      r2,[r1,#4]
;;;665        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
00000e  4a05              LDR      r2,|L14.36|
000010  604a              STR      r2,[r1,#4]
;;;666    
;;;667        /* Verify Flash is unlocked */
;;;668        if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000012  6909              LDR      r1,[r1,#0x10]
000014  0609              LSLS     r1,r1,#24
000016  d500              BPL      |L14.26|
;;;669        {
;;;670          status = HAL_ERROR;
000018  2001              MOVS     r0,#1
                  |L14.26|
;;;671        }
;;;672      }
;;;673    #if defined(FLASH_BANK2_END)
;;;674      if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
;;;675      {
;;;676        /* Authorize the FLASH BANK2 Registers access */
;;;677        WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
;;;678        WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
;;;679        
;;;680        /* Verify Flash BANK2 is unlocked */
;;;681        if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
;;;682        {
;;;683          status = HAL_ERROR;
;;;684        }
;;;685      }
;;;686    #endif /* FLASH_BANK2_END */
;;;687    
;;;688      return status;
;;;689    }
00001a  4770              BX       lr
;;;690    
                          ENDP

                  |L14.28|
                          DCD      0x40022000
                  |L14.32|
                          DCD      0x45670123
                  |L14.36|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16|
#line 463 "..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH|
#line 478
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX|
#line 665
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
