; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\lwip.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\lwip.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device -I..\Drivers\CMSIS\Include -I..\Middlewares\Third_Party\LwIP\src\include\lwip\apps -I..\Middlewares\Third_Party\LwIP\src\include\lwip\priv -I..\Middlewares\Third_Party\LwIP\src\include\lwip\prot -I..\Middlewares\Third_Party\LwIP\src\include\netif\ppp -I..\Middlewares\Third_Party\LwIP\src\include\netif -I..\Middlewares\Third_Party\LwIP\src\include\posix\sys -I..\Middlewares\Third_Party\LwIP\src\include\posix -I..\Middlewares\Third_Party\LwIP\system\arch -I..\Middlewares\Third_Party\LwIP\src\include\lwip -I..\Inc -I..\Middlewares\Third_Party\LwIP\src\include -I.\RTE\_f107vc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_CL -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F107xC --omf_browse=.\objects\lwip.crf ..\Src\lwip.c]
                          THUMB

                          AREA ||i.MX_LWIP_Init||, CODE, READONLY, ALIGN=2

                  MX_LWIP_Init PROC
;;;55       */
;;;56     void MX_LWIP_Init(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;57     {
;;;58       /* Initilialize the LwIP stack without RTOS */
;;;59       lwip_init();
000002  f7fffffe          BL       lwip_init
;;;60     
;;;61       /* IP addresses initialization with DHCP (IPv4) */
;;;62       ipaddr.addr = 0;
000006  4915              LDR      r1,|L1.92|
000008  2000              MOVS     r0,#0
00000a  6008              STR      r0,[r1,#0]  ; ipaddr
;;;63       netmask.addr = 0;
00000c  1d09              ADDS     r1,r1,#4
00000e  6008              STR      r0,[r1,#0]  ; netmask
;;;64       gw.addr = 0;
000010  1d09              ADDS     r1,r1,#4
000012  6008              STR      r0,[r1,#0]  ; gw
;;;65     
;;;66       /* add the network interface (IPv4/IPv6) without RTOS */
;;;67       netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
000014  4912              LDR      r1,|L1.96|
000016  4a13              LDR      r2,|L1.100|
000018  e9cd2101          STRD     r2,r1,[sp,#4]
00001c  4b0f              LDR      r3,|L1.92|
00001e  9000              STR      r0,[sp,#0]
000020  3308              ADDS     r3,r3,#8
000022  1f1a              SUBS     r2,r3,#4
000024  1f11              SUBS     r1,r2,#4
000026  4810              LDR      r0,|L1.104|
000028  f7fffffe          BL       netif_add
;;;68     
;;;69       /* Registers the default network interface */
;;;70       netif_set_default(&gnetif);
00002c  480e              LDR      r0,|L1.104|
00002e  f7fffffe          BL       netif_set_default
;;;71     
;;;72       if (netif_is_link_up(&gnetif))
000032  480d              LDR      r0,|L1.104|
000034  f8900037          LDRB     r0,[r0,#0x37]  ; gnetif
000038  0740              LSLS     r0,r0,#29
00003a  d503              BPL      |L1.68|
;;;73       {
;;;74         /* When the netif is fully configured this function must be called */
;;;75         netif_set_up(&gnetif);
00003c  480a              LDR      r0,|L1.104|
00003e  f7fffffe          BL       netif_set_up
000042  e002              B        |L1.74|
                  |L1.68|
;;;76       }
;;;77       else
;;;78       {
;;;79         /* When the netif link is down this function must be called */
;;;80         netif_set_down(&gnetif);
000044  4808              LDR      r0,|L1.104|
000046  f7fffffe          BL       netif_set_down
                  |L1.74|
;;;81       }
;;;82     
;;;83       /* Set the link callback function, this function is called on change of link status*/
;;;84       netif_set_link_callback(&gnetif, ethernetif_update_config);
00004a  4908              LDR      r1,|L1.108|
00004c  4806              LDR      r0,|L1.104|
00004e  f7fffffe          BL       netif_set_link_callback
;;;85     
;;;86       /* Create the Ethernet link handler thread */
;;;87     
;;;88       /* Start DHCP negotiation for a network interface (IPv4) */
;;;89       dhcp_start(&gnetif);
000052  e8bd400e          POP      {r1-r3,lr}
000056  4804              LDR      r0,|L1.104|
000058  f7ffbffe          B.W      dhcp_start
;;;90     
;;;91     /* USER CODE BEGIN 3 */
;;;92     
;;;93     /* USER CODE END 3 */
;;;94     }
;;;95     
                          ENDP

                  |L1.92|
                          DCD      ||area_number.12||
                  |L1.96|
                          DCD      ethernet_input
                  |L1.100|
                          DCD      ethernetif_init
                  |L1.104|
                          DCD      ||.bss||
                  |L1.108|
                          DCD      ethernetif_update_config

                          AREA ||i.MX_LWIP_Process||, CODE, READONLY, ALIGN=2

                  MX_LWIP_Process PROC
;;;113     */
;;;114    void MX_LWIP_Process(void)
000000  b510              PUSH     {r4,lr}
;;;115    {
;;;116    /* USER CODE BEGIN 4_1 */
;;;117    /* USER CODE END 4_1 */
;;;118      ethernetif_input(&gnetif);
000002  4803              LDR      r0,|L2.16|
000004  f7fffffe          BL       ethernetif_input
;;;119    
;;;120    /* USER CODE BEGIN 4_2 */
;;;121    /* USER CODE END 4_2 */
;;;122      /* Handle timeouts */
;;;123      sys_check_timeouts();
000008  e8bd4010          POP      {r4,lr}
00000c  f7ffbffe          B.W      sys_check_timeouts
;;;124    
;;;125    /* USER CODE BEGIN 4_3 */
;;;126    /* USER CODE END 4_3 */
;;;127    }
;;;128    
                          ENDP

                  |L2.16|
                          DCD      ||.bss||

                          AREA ||i.sio_open||, CODE, READONLY, ALIGN=1

                  sio_open PROC
;;;135     */
;;;136    sio_fd_t sio_open(u8_t devnum)
000000  2000              MOVS     r0,#0
;;;137    {
;;;138      sio_fd_t sd;
;;;139    
;;;140    /* USER CODE BEGIN 7 */
;;;141      sd = 0; // dummy code
;;;142    /* USER CODE END 7 */
;;;143    
;;;144      return sd;
;;;145    }
000002  4770              BX       lr
;;;146    
                          ENDP


                          AREA ||i.sio_read||, CODE, READONLY, ALIGN=1

                  sio_read PROC
;;;171     */
;;;172    u32_t sio_read(sio_fd_t fd, u8_t *data, u32_t len)
000000  2000              MOVS     r0,#0
;;;173    {
;;;174      u32_t recved_bytes;
;;;175    
;;;176    /* USER CODE BEGIN 9 */
;;;177      recved_bytes = 0; // dummy code
;;;178    /* USER CODE END 9 */
;;;179      return recved_bytes;
;;;180    }
000002  4770              BX       lr
;;;181    
                          ENDP


                          AREA ||i.sio_send||, CODE, READONLY, ALIGN=1

                  sio_send PROC
;;;154     */
;;;155    void sio_send(u8_t c, sio_fd_t fd)
000000  4770              BX       lr
;;;156    {
;;;157    /* USER CODE BEGIN 8 */
;;;158    /* USER CODE END 8 */
;;;159    }
;;;160    
                          ENDP


                          AREA ||i.sio_tryread||, CODE, READONLY, ALIGN=1

                  sio_tryread PROC
;;;190     */
;;;191    u32_t sio_tryread(sio_fd_t fd, u8_t *data, u32_t len)
000000  2000              MOVS     r0,#0
;;;192    {
;;;193      u32_t recved_bytes;
;;;194    
;;;195    /* USER CODE BEGIN 10 */
;;;196      recved_bytes = 0; // dummy code
;;;197    /* USER CODE END 10 */
;;;198      return recved_bytes;
;;;199    }
000002  4770              BX       lr
;;;200    #endif /* MDK ARM Compiler */
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  gnetif
                          %        60

                          AREA ||.data||, DATA, ALIGN=2

                  DHCPfineTimer
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  DHCPcoarseTimer
                          DCD      0x00000000

                          AREA ||area_number.12||, DATA, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.data||
                  ipaddr
                          DCD      0x00000000
                  netmask
                          DCD      0x00000000
                  ||gw||
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Src\\lwip.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_lwip_c_bccf69fb____REV16|
#line 463 "..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_lwip_c_bccf69fb____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_lwip_c_bccf69fb____REVSH|
#line 478
|__asm___6_lwip_c_bccf69fb____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_lwip_c_bccf69fb____RRX|
#line 665
|__asm___6_lwip_c_bccf69fb____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
