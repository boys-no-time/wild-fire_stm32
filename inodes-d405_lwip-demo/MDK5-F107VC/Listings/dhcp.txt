; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\dhcp.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\dhcp.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device -I..\Drivers\CMSIS\Include -I..\Middlewares\Third_Party\LwIP\src\include\lwip\apps -I..\Middlewares\Third_Party\LwIP\src\include\lwip\priv -I..\Middlewares\Third_Party\LwIP\src\include\lwip\prot -I..\Middlewares\Third_Party\LwIP\src\include\netif\ppp -I..\Middlewares\Third_Party\LwIP\src\include\netif -I..\Middlewares\Third_Party\LwIP\src\include\posix\sys -I..\Middlewares\Third_Party\LwIP\src\include\posix -I..\Middlewares\Third_Party\LwIP\system\arch -I..\Middlewares\Third_Party\LwIP\src\include\lwip -I..\Inc -I..\Middlewares\Third_Party\LwIP\src\include -I.\RTE\_f107vc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_CL -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F107xC --omf_browse=.\objects\dhcp.crf ..\Middlewares\Third_Party\LwIP\src\core\ipv4\dhcp.c]
                          THUMB

                          AREA ||i.dhcp_arp_reply||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_arp_reply PROC
;;;886    void
;;;887    dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
000000  2800              CMP      r0,#0
;;;888    {
000002  d00b              BEQ      |L1.28|
;;;889      struct dhcp *dhcp;
;;;890    
;;;891      LWIP_ERROR("netif != NULL", (netif != NULL), return;);
;;;892      dhcp = netif_dhcp_data(netif);
000004  6a82              LDR      r2,[r0,#0x28]
;;;893      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
;;;894      /* is a DHCP client doing an ARP check? */
;;;895      if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
000006  2a00              CMP      r2,#0
000008  d00f              BEQ      |L1.42|
00000a  7a53              LDRB     r3,[r2,#9]
00000c  2b08              CMP      r3,#8
00000e  d10c              BNE      |L1.42|
;;;896        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
;;;897          ip4_addr_get_u32(addr)));
;;;898        /* did a host respond with the address we
;;;899           were offered by the DHCP server? */
;;;900        if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
000010  6809              LDR      r1,[r1,#0]
000012  6a92              LDR      r2,[r2,#0x28]
000014  4291              CMP      r1,r2
000016  d108              BNE      |L1.42|
;;;901          /* we will not accept the offered address */
;;;902          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
;;;903            ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
;;;904          dhcp_decline(netif);
000018  f7ffbffe          B.W      dhcp_decline
                  |L1.28|
00001c  a303              ADR      r3,|L1.44|
00001e  f240327b          MOV      r2,#0x37b             ;891
000022  a110              ADR      r1,|L1.100|
000024  a013              ADR      r0,|L1.116|
000026  f7ffbffe          B.W      __2printf
                  |L1.42|
;;;905        }
;;;906      }
;;;907    }
00002a  4770              BX       lr
;;;908    
                          ENDP

                  |L1.44|
00002c  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
000030  6964646c
000034  65776172
000038  65735c54
00003c  68697264
000040  5f506172
000044  74795c4c
000048  7749505c
00004c  7372635c
000050  636f7265
000054  5c697076
000058  345c6468
00005c  63702e63          DCB      "cp.c",0
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
                  |L1.100|
000064  6e657469          DCB      "netif != NULL",0
000068  6620213d
00006c  204e554c
000070  4c00    
000072  00                DCB      0
000073  00                DCB      0
                  |L1.116|
000074  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000078  7274696f
00007c  6e202225
000080  73222066
000084  61696c65
000088  64206174
00008c  206c696e
000090  65202564
000094  20696e20
000098  25730a00

                          AREA ||i.dhcp_bind||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_bind PROC
;;;1016   static void
;;;1017   dhcp_bind(struct netif *netif)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;1018   {
000004  4605              MOV      r5,r0
;;;1019     u32_t timeout;
;;;1020     struct dhcp *dhcp;
;;;1021     ip4_addr_t sn_mask, gw_addr;
;;;1022     LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
000006  2d00              CMP      r5,#0
000008  d01a              BEQ      |L2.64|
;;;1023     dhcp = netif_dhcp_data(netif);
00000a  6aac              LDR      r4,[r5,#0x28]
;;;1024     LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
00000c  2c00              CMP      r4,#0
00000e  d020              BEQ      |L2.82|
;;;1025     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;1026   
;;;1027     /* reset time used of lease */
;;;1028     dhcp->lease_used = 0;
000010  2700              MOVS     r7,#0
000012  8427              STRH     r7,[r4,#0x20]
;;;1029   
;;;1030     if (dhcp->offered_t0_lease != 0xffffffffUL) {
000014  6b63              LDR      r3,[r4,#0x34]
;;;1031        /* set renewal period timer */
;;;1032        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
;;;1033        timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
000016  f04f023c          MOV      r2,#0x3c
00001a  1c58              ADDS     r0,r3,#1              ;1030
;;;1034        if (timeout > 0xffff) {
00001c  f44f3880          MOV      r8,#0x10000
;;;1035          timeout = 0xffff;
;;;1036        }
;;;1037        dhcp->t0_timeout = (u16_t)timeout;
;;;1038        if (dhcp->t0_timeout == 0) {
;;;1039          dhcp->t0_timeout = 1;
000020  f04f0c01          MOV      r12,#1
000024  f64f76ff          MOV      r6,#0xffff            ;1035
000028  d01d              BEQ      |L2.102|
00002a  331e              ADDS     r3,r3,#0x1e           ;1033
00002c  fbb3f0f2          UDIV     r0,r3,r2              ;1033
000030  4540              CMP      r0,r8                 ;1034
000032  d300              BCC      |L2.54|
000034  4630              MOV      r0,r6                 ;1035
                  |L2.54|
000036  b283              UXTH     r3,r0                 ;1037
000038  8463              STRH     r3,[r4,#0x22]         ;1037
00003a  2b00              CMP      r3,#0                 ;1038
00003c  d011              BEQ      |L2.98|
00003e  e012              B        |L2.102|
                  |L2.64|
000040  a330              ADR      r3,|L2.260|
000042  f24032fe          MOV      r2,#0x3fe             ;1022
000046  a13d              ADR      r1,|L2.316|
000048  a043              ADR      r0,|L2.344|
00004a  f7fffffe          BL       __2printf
                  |L2.78|
;;;1040        }
;;;1041        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
;;;1042     }
;;;1043   
;;;1044     /* temporary DHCP lease? */
;;;1045     if (dhcp->offered_t1_renew != 0xffffffffUL) {
;;;1046       /* set renewal period timer */
;;;1047       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
;;;1048       timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
;;;1049       if (timeout > 0xffff) {
;;;1050         timeout = 0xffff;
;;;1051       }
;;;1052       dhcp->t1_timeout = (u16_t)timeout;
;;;1053       if (dhcp->t1_timeout == 0) {
;;;1054         dhcp->t1_timeout = 1;
;;;1055       }
;;;1056       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
;;;1057       dhcp->t1_renew_time = dhcp->t1_timeout;
;;;1058     }
;;;1059     /* set renewal period timer */
;;;1060     if (dhcp->offered_t2_rebind != 0xffffffffUL) {
;;;1061       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
;;;1062       timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
;;;1063       if (timeout > 0xffff) {
;;;1064         timeout = 0xffff;
;;;1065       }
;;;1066       dhcp->t2_timeout = (u16_t)timeout;
;;;1067       if (dhcp->t2_timeout == 0) {
;;;1068         dhcp->t2_timeout = 1;
;;;1069       }
;;;1070       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
;;;1071       dhcp->t2_rebind_time = dhcp->t2_timeout;
;;;1072     }
;;;1073   
;;;1074     /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
;;;1075     if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
;;;1076       dhcp->t1_timeout = 0;
;;;1077     }
;;;1078   
;;;1079     if (dhcp->subnet_mask_given) {
;;;1080       /* copy offered network mask */
;;;1081       ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
;;;1082     } else {
;;;1083       /* subnet mask not given, choose a safe subnet mask given the network class */
;;;1084       u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
;;;1085       if (first_octet <= 127) {
;;;1086         ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
;;;1087       } else if (first_octet >= 192) {
;;;1088         ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
;;;1089       } else {
;;;1090         ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
;;;1091       }
;;;1092     }
;;;1093   
;;;1094     ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
;;;1095     /* gateway address not given? */
;;;1096     if (ip4_addr_isany_val(gw_addr)) {
;;;1097       /* copy network address */
;;;1098       ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
;;;1099       /* use first host address on network as gateway */
;;;1100       ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
;;;1101     }
;;;1102   
;;;1103   #if LWIP_DHCP_AUTOIP_COOP
;;;1104     if (dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;1105       autoip_stop(netif);
;;;1106       dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;1107     }
;;;1108   #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1109   
;;;1110     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
;;;1111       ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
;;;1112     /* netif is now bound to DHCP leased address - set this before assigning the address
;;;1113        to ensure the callback can use dhcp_supplied_address() */
;;;1114     dhcp_set_state(dhcp, DHCP_STATE_BOUND);
;;;1115   
;;;1116     netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
;;;1117     /* interface is used by routing now that an address is set */
;;;1118   }
00004e  e8bd81fc          POP      {r2-r8,pc}
                  |L2.82|
000052  a32c              ADR      r3,|L2.260|
000054  f44f6280          MOV      r2,#0x400             ;1024
000058  a149              ADR      r1,|L2.384|
00005a  a03f              ADR      r0,|L2.344|
00005c  f7fffffe          BL       __2printf
000060  e7f5              B        |L2.78|
                  |L2.98|
000062  f8a4c022          STRH     r12,[r4,#0x22]        ;1039
                  |L2.102|
000066  6ba3              LDR      r3,[r4,#0x38]         ;1045
000068  1c58              ADDS     r0,r3,#1              ;1045
00006a  d00c              BEQ      |L2.134|
00006c  331e              ADDS     r3,r3,#0x1e           ;1048
00006e  fbb3f1f2          UDIV     r1,r3,r2              ;1048
000072  4541              CMP      r1,r8                 ;1049
000074  d300              BCC      |L2.120|
000076  4631              MOV      r1,r6                 ;1050
                  |L2.120|
000078  b28b              UXTH     r3,r1                 ;1052
00007a  8323              STRH     r3,[r4,#0x18]         ;1052
00007c  b90b              CBNZ     r3,|L2.130|
00007e  f8a4c018          STRH     r12,[r4,#0x18]        ;1054
                  |L2.130|
000082  8b20              LDRH     r0,[r4,#0x18]         ;1057
000084  83a0              STRH     r0,[r4,#0x1c]         ;1057
                  |L2.134|
000086  6be3              LDR      r3,[r4,#0x3c]         ;1060
000088  1c58              ADDS     r0,r3,#1              ;1060
00008a  d00c              BEQ      |L2.166|
00008c  331e              ADDS     r3,r3,#0x1e           ;1062
00008e  fbb3f2f2          UDIV     r2,r3,r2              ;1062
000092  4542              CMP      r2,r8                 ;1063
000094  d300              BCC      |L2.152|
000096  4632              MOV      r2,r6                 ;1064
                  |L2.152|
000098  b293              UXTH     r3,r2                 ;1066
00009a  8363              STRH     r3,[r4,#0x1a]         ;1066
00009c  b90b              CBNZ     r3,|L2.162|
00009e  f8a4c01a          STRH     r12,[r4,#0x1a]        ;1068
                  |L2.162|
0000a2  8b60              LDRH     r0,[r4,#0x1a]         ;1071
0000a4  83e0              STRH     r0,[r4,#0x1e]         ;1071
                  |L2.166|
0000a6  8b20              LDRH     r0,[r4,#0x18]         ;1075
0000a8  8b63              LDRH     r3,[r4,#0x1a]         ;1075
0000aa  4298              CMP      r0,r3                 ;1075
0000ac  d301              BCC      |L2.178|
0000ae  b103              CBZ      r3,|L2.178|
0000b0  8327              STRH     r7,[r4,#0x18]         ;1076
                  |L2.178|
0000b2  7ae0              LDRB     r0,[r4,#0xb]          ;1079
0000b4  b110              CBZ      r0,|L2.188|
0000b6  6ae0              LDR      r0,[r4,#0x2c]         ;1081
0000b8  9001              STR      r0,[sp,#4]            ;1081
0000ba  e00d              B        |L2.216|
                  |L2.188|
0000bc  f8943028          LDRB     r3,[r4,#0x28]         ;1084
0000c0  2b7f              CMP      r3,#0x7f              ;1085
0000c2  d802              BHI      |L2.202|
0000c4  20ff              MOVS     r0,#0xff              ;1086
0000c6  9001              STR      r0,[sp,#4]            ;1086
0000c8  e006              B        |L2.216|
                  |L2.202|
0000ca  2bc0              CMP      r3,#0xc0              ;1087
0000cc  d303              BCC      |L2.214|
0000ce  f06f407f          MVN      r0,#0xff000000        ;1088
0000d2  9001              STR      r0,[sp,#4]            ;1088
0000d4  e000              B        |L2.216|
                  |L2.214|
0000d6  9601              STR      r6,[sp,#4]            ;1090
                  |L2.216|
0000d8  6b20              LDR      r0,[r4,#0x30]         ;1094
0000da  9000              STR      r0,[sp,#0]            ;1094
0000dc  b928              CBNZ     r0,|L2.234|
0000de  6aa0              LDR      r0,[r4,#0x28]         ;1098
0000e0  9901              LDR      r1,[sp,#4]            ;1098
0000e2  4008              ANDS     r0,r0,r1              ;1098
0000e4  f0407080          ORR      r0,r0,#0x1000000      ;1100
0000e8  9000              STR      r0,[sp,#0]            ;1100
                  |L2.234|
0000ea  210a              MOVS     r1,#0xa               ;1114
0000ec  4620              MOV      r0,r4                 ;1114
0000ee  f7fffffe          BL       dhcp_set_state
0000f2  466b              MOV      r3,sp                 ;1116
0000f4  aa01              ADD      r2,sp,#4              ;1116
0000f6  f1040128          ADD      r1,r4,#0x28           ;1116
0000fa  4628              MOV      r0,r5                 ;1116
0000fc  f7fffffe          BL       netif_set_addr
000100  e7a5              B        |L2.78|
;;;1119   
                          ENDP

000102  0000              DCW      0x0000
                  |L2.260|
000104  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
000108  6964646c
00010c  65776172
000110  65735c54
000114  68697264
000118  5f506172
00011c  74795c4c
000120  7749505c
000124  7372635c
000128  636f7265
00012c  5c697076
000130  345c6468
000134  63702e63          DCB      "cp.c",0
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0
                  |L2.316|
00013c  64686370          DCB      "dhcp_bind: netif != NULL",0
000140  5f62696e
000144  643a206e
000148  65746966
00014c  20213d20
000150  4e554c4c
000154  00      
000155  00                DCB      0
000156  00                DCB      0
000157  00                DCB      0
                  |L2.344|
000158  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
00015c  7274696f
000160  6e202225
000164  73222066
000168  61696c65
00016c  64206174
000170  206c696e
000174  65202564
000178  20696e20
00017c  25730a00
                  |L2.384|
000180  64686370          DCB      "dhcp_bind: dhcp != NULL",0
000184  5f62696e
000188  643a2064
00018c  68637020
000190  213d204e
000194  554c4c00

                          AREA ||i.dhcp_check||, CODE, READONLY, ALIGN=1

                  dhcp_check PROC
;;;290    static void
;;;291    dhcp_check(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;292    {
000002  4605              MOV      r5,r0
;;;293      struct dhcp *dhcp = netif_dhcp_data(netif);
000004  6aac              LDR      r4,[r5,#0x28]
;;;294      err_t result;
;;;295      u16_t msecs;
;;;296      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
;;;297        (s16_t)netif->name[1]));
;;;298      dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
000006  2108              MOVS     r1,#8
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dhcp_set_state
;;;299      /* create an ARP query for the offered IP address, expecting that no host
;;;300         responds, as the IP address should not be in use. */
;;;301      result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
00000e  2200              MOVS     r2,#0
000010  f1040128          ADD      r1,r4,#0x28
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       etharp_query
;;;302      if (result != ERR_OK) {
;;;303        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
;;;304      }
;;;305      if (dhcp->tries < 255) {
00001a  7aa0              LDRB     r0,[r4,#0xa]
00001c  28ff              CMP      r0,#0xff
00001e  d201              BCS      |L3.36|
;;;306        dhcp->tries++;
000020  1c40              ADDS     r0,r0,#1
000022  72a0              STRB     r0,[r4,#0xa]
                  |L3.36|
;;;307      }
;;;308      msecs = 500;
000024  f44f70fa          MOV      r0,#0x1f4
;;;309      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000028  f24031e7          MOV      r1,#0x3e7
00002c  fbb1f0f0          UDIV     r0,r1,r0
000030  82e0              STRH     r0,[r4,#0x16]
;;;310      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
;;;311    }
000032  bd70              POP      {r4-r6,pc}
;;;312    #endif /* DHCP_DOES_ARP_CHECK */
                          ENDP


                          AREA ||i.dhcp_cleanup||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_cleanup PROC
;;;696     */
;;;697    void dhcp_cleanup(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;698    {
000002  4604              MOV      r4,r0
;;;699      LWIP_ASSERT("netif != NULL", netif != NULL);
000004  2c00              CMP      r4,#0
000006  d106              BNE      |L4.22|
000008  a307              ADR      r3,|L4.40|
00000a  f24022bb          MOV      r2,#0x2bb
00000e  a114              ADR      r1,|L4.96|
000010  a017              ADR      r0,|L4.112|
000012  f7fffffe          BL       __2printf
                  |L4.22|
;;;700    
;;;701      if (netif_dhcp_data(netif) != NULL) {
000016  6aa0              LDR      r0,[r4,#0x28]
000018  2800              CMP      r0,#0
00001a  d003              BEQ      |L4.36|
;;;702        mem_free(netif_dhcp_data(netif));
00001c  f7fffffe          BL       mem_free
;;;703        netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, NULL);
000020  2000              MOVS     r0,#0
000022  62a0              STR      r0,[r4,#0x28]
                  |L4.36|
;;;704      }
;;;705    }
000024  bd10              POP      {r4,pc}
;;;706    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
000028  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
00002c  6964646c
000030  65776172
000034  65735c54
000038  68697264
00003c  5f506172
000040  74795c4c
000044  7749505c
000048  7372635c
00004c  636f7265
000050  5c697076
000054  345c6468
000058  63702e63          DCB      "cp.c",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0
                  |L4.96|
000060  6e657469          DCB      "netif != NULL",0
000064  6620213d
000068  204e554c
00006c  4c00    
00006e  00                DCB      0
00006f  00                DCB      0
                  |L4.112|
000070  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000074  7274696f
000078  6e202225
00007c  73222066
000080  61696c65
000084  64206174
000088  206c696e
00008c  65202564
000090  20696e20
000094  25730a00

                          AREA ||i.dhcp_coarse_tmr||, CODE, READONLY, ALIGN=2

                  dhcp_coarse_tmr PROC
;;;408    void
;;;409    dhcp_coarse_tmr(void)
000000  b510              PUSH     {r4,lr}
;;;410    {
;;;411      struct netif *netif = netif_list;
000002  4817              LDR      r0,|L5.96|
000004  6804              LDR      r4,[r0,#0]  ; netif_list
000006  e028              B        |L5.90|
                  |L5.8|
;;;412      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
;;;413      /* iterate through all network interfaces */
;;;414      while (netif != NULL) {
;;;415        /* only act on DHCP configured interfaces */
;;;416        struct dhcp *dhcp = netif_dhcp_data(netif);
000008  6aa1              LDR      r1,[r4,#0x28]
;;;417        if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
00000a  b309              CBZ      r1,|L5.80|
00000c  7a48              LDRB     r0,[r1,#9]
00000e  b1f8              CBZ      r0,|L5.80|
;;;418          /* compare lease time to expire timeout */
;;;419          if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
000010  8c48              LDRH     r0,[r1,#0x22]
000012  b168              CBZ      r0,|L5.48|
000014  8c08              LDRH     r0,[r1,#0x20]
000016  1c40              ADDS     r0,r0,#1
000018  b280              UXTH     r0,r0
00001a  8408              STRH     r0,[r1,#0x20]
00001c  8c4a              LDRH     r2,[r1,#0x22]
00001e  4290              CMP      r0,r2
000020  d106              BNE      |L5.48|
;;;420            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
;;;421            /* this clients' lease time has expired */
;;;422            dhcp_release(netif);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       dhcp_release
;;;423            dhcp_discover(netif);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       dhcp_discover
00002e  e013              B        |L5.88|
                  |L5.48|
;;;424          /* timer is active (non zero), and triggers (zeroes) now? */
;;;425          } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
000030  8bc8              LDRH     r0,[r1,#0x1e]
000032  b118              CBZ      r0,|L5.60|
000034  1e42              SUBS     r2,r0,#1
000036  83ca              STRH     r2,[r1,#0x1e]
000038  2801              CMP      r0,#1
00003a  d006              BEQ      |L5.74|
                  |L5.60|
;;;426            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
;;;427            /* this clients' rebind timeout triggered */
;;;428            dhcp_t2_timeout(netif);
;;;429          /* timer is active (non zero), and triggers (zeroes) now */
;;;430          } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
00003c  8b88              LDRH     r0,[r1,#0x1c]
00003e  b138              CBZ      r0,|L5.80|
000040  1e42              SUBS     r2,r0,#1
000042  838a              STRH     r2,[r1,#0x1c]
000044  2801              CMP      r0,#1
000046  d004              BEQ      |L5.82|
000048  e006              B        |L5.88|
                  |L5.74|
00004a  4620              MOV      r0,r4                 ;428
00004c  f7fffffe          BL       dhcp_t2_timeout
                  |L5.80|
000050  e002              B        |L5.88|
                  |L5.82|
;;;431            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
;;;432            /* this clients' renewal timeout triggered */
;;;433            dhcp_t1_timeout(netif);
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dhcp_t1_timeout
                  |L5.88|
;;;434          }
;;;435        }
;;;436        /* proceed to next netif */
;;;437        netif = netif->next;
000058  6824              LDR      r4,[r4,#0]
                  |L5.90|
00005a  2c00              CMP      r4,#0                 ;414
00005c  d1d4              BNE      |L5.8|
;;;438      }
;;;439    }
00005e  bd10              POP      {r4,pc}
;;;440    
                          ENDP

                  |L5.96|
                          DCD      netif_list

                          AREA ||i.dhcp_create_msg||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_create_msg PROC
;;;1801   static err_t
;;;1802   dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1803   {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;1804     u16_t i;
;;;1805   #ifndef DHCP_GLOBAL_XID
;;;1806     /** default global transaction identifier starting value (easy to match
;;;1807      *  with a packet analyser). We simply increment for each new request.
;;;1808      *  Predefine DHCP_GLOBAL_XID to a better value or a function call to generate one
;;;1809      *  at runtime, any supporting function prototypes can be defined in DHCP_GLOBAL_XID_HEADER */
;;;1810   #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
;;;1811     static u32_t xid;
;;;1812   #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1813     static u32_t xid = 0xABCD0000;
;;;1814   #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1815   #else
;;;1816     if (!xid_initialised) {
;;;1817       xid = DHCP_GLOBAL_XID;
;;;1818       xid_initialised = !xid_initialised;
;;;1819     }
;;;1820   #endif
;;;1821     LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
00000a  2d00              CMP      r5,#0
00000c  d02c              BEQ      |L6.104|
;;;1822     LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
00000e  2c00              CMP      r4,#0
000010  d035              BEQ      |L6.126|
;;;1823     LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
000012  68e0              LDR      r0,[r4,#0xc]
000014  2800              CMP      r0,#0
000016  d006              BEQ      |L6.38|
000018  a35c              ADR      r3,|L6.396|
00001a  f240721f          MOV      r2,#0x71f
00001e  a169              ADR      r1,|L6.452|
000020  a072              ADR      r0,|L6.492|
000022  f7fffffe          BL       __2printf
                  |L6.38|
;;;1824     LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
000026  6920              LDR      r0,[r4,#0x10]
000028  2800              CMP      r0,#0
00002a  d006              BEQ      |L6.58|
00002c  a357              ADR      r3,|L6.396|
00002e  f44f62e4          MOV      r2,#0x720
000032  a178              ADR      r1,|L6.532|
000034  a06d              ADR      r0,|L6.492|
000036  f7fffffe          BL       __2printf
                  |L6.58|
;;;1825     dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
00003a  2200              MOVS     r2,#0
00003c  f44f779a          MOV      r7,#0x134
000040  4639              MOV      r1,r7
000042  4610              MOV      r0,r2
000044  f7fffffe          BL       pbuf_alloc
000048  60e0              STR      r0,[r4,#0xc]
;;;1826     if (dhcp->p_out == NULL) {
00004a  2800              CMP      r0,#0
00004c  d021              BEQ      |L6.146|
;;;1827       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;1828         ("dhcp_create_msg(): could not allocate pbuf\n"));
;;;1829       return ERR_MEM;
;;;1830     }
;;;1831     LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
00004e  8940              LDRH     r0,[r0,#0xa]
000050  42b8              CMP      r0,r7
000052  d206              BCS      |L6.98|
000054  a34d              ADR      r3,|L6.396|
000056  f2407227          MOV      r2,#0x727
00005a  a178              ADR      r1,|L6.572|
00005c  a063              ADR      r0,|L6.492|
00005e  f7fffffe          BL       __2printf
                  |L6.98|
;;;1832              (dhcp->p_out->len >= sizeof(struct dhcp_msg)));
;;;1833   
;;;1834     /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
;;;1835     if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
000062  2e03              CMP      r6,#3
000064  d11b              BNE      |L6.158|
000066  e017              B        |L6.152|
                  |L6.104|
000068  a348              ADR      r3,|L6.396|
00006a  f240721d          MOV      r2,#0x71d             ;1821
00006e  a183              ADR      r1,|L6.636|
000070  a05e              ADR      r0,|L6.492|
000072  f7fffffe          BL       __2printf
000076  f06f000f          MVN      r0,#0xf               ;1821
                  |L6.122|
;;;1836       /* reuse transaction identifier in retransmissions */
;;;1837       if (dhcp->tries == 0) {
;;;1838   #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
;;;1839         xid = LWIP_RAND();
;;;1840   #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1841         xid++;
;;;1842   #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1843       }
;;;1844       dhcp->xid = xid;
;;;1845     }
;;;1846     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
;;;1847                 ("transaction id xid(%"X32_F")\n", xid));
;;;1848   
;;;1849     dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
;;;1850   
;;;1851     dhcp->msg_out->op = DHCP_BOOTREQUEST;
;;;1852     /* @todo: make link layer independent */
;;;1853     dhcp->msg_out->htype = DHCP_HTYPE_ETH;
;;;1854     dhcp->msg_out->hlen = netif->hwaddr_len;
;;;1855     dhcp->msg_out->hops = 0;
;;;1856     dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
;;;1857     dhcp->msg_out->secs = 0;
;;;1858     /* we don't need the broadcast flag since we can receive unicast traffic
;;;1859        before being fully configured! */
;;;1860     dhcp->msg_out->flags = 0;
;;;1861     ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
;;;1862     /* set ciaddr to netif->ip_addr based on message_type and state */
;;;1863     if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
;;;1864         ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
;;;1865          ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
;;;1866       ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
;;;1867     }
;;;1868     ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
;;;1869     ip4_addr_set_zero(&dhcp->msg_out->siaddr);
;;;1870     ip4_addr_set_zero(&dhcp->msg_out->giaddr);
;;;1871     for (i = 0; i < DHCP_CHADDR_LEN; i++) {
;;;1872       /* copy netif hardware address, pad with zeroes */
;;;1873       dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
;;;1874     }
;;;1875     for (i = 0; i < DHCP_SNAME_LEN; i++) {
;;;1876       dhcp->msg_out->sname[i] = 0;
;;;1877     }
;;;1878     for (i = 0; i < DHCP_FILE_LEN; i++) {
;;;1879       dhcp->msg_out->file[i] = 0;
;;;1880     }
;;;1881     dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
;;;1882     dhcp->options_out_len = 0;
;;;1883     /* fill options field with an incrementing array (for debugging purposes) */
;;;1884     for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
;;;1885       dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
;;;1886     }
;;;1887     /* Add option MESSAGE_TYPE */
;;;1888     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
;;;1889     dhcp_option_byte(dhcp, message_type);
;;;1890     return ERR_OK;
;;;1891   }
00007a  e8bd81f0          POP      {r4-r8,pc}
                  |L6.126|
00007e  a343              ADR      r3,|L6.396|
000080  f240721e          MOV      r2,#0x71e             ;1822
000084  a185              ADR      r1,|L6.668|
000086  a059              ADR      r0,|L6.492|
000088  f7fffffe          BL       __2printf
00008c  f06f0005          MVN      r0,#5                 ;1822
000090  e7f3              B        |L6.122|
                  |L6.146|
000092  f04f30ff          MOV      r0,#0xffffffff        ;1829
000096  e7f0              B        |L6.122|
                  |L6.152|
000098  7a60              LDRB     r0,[r4,#9]            ;1835
00009a  2803              CMP      r0,#3                 ;1835
00009c  d107              BNE      |L6.174|
                  |L6.158|
00009e  7aa0              LDRB     r0,[r4,#0xa]          ;1837
0000a0  4f86              LDR      r7,|L6.700|
0000a2  b910              CBNZ     r0,|L6.170|
0000a4  f7fffffe          BL       rand
0000a8  6078              STR      r0,[r7,#4]            ;1839  ; xid
                  |L6.170|
0000aa  6878              LDR      r0,[r7,#4]            ;1844  ; xid
0000ac  6020              STR      r0,[r4,#0]            ;1844
                  |L6.174|
0000ae  68e0              LDR      r0,[r4,#0xc]          ;1849
0000b0  6840              LDR      r0,[r0,#4]            ;1849
0000b2  6120              STR      r0,[r4,#0x10]         ;1849
0000b4  2101              MOVS     r1,#1                 ;1851
0000b6  7001              STRB     r1,[r0,#0]            ;1851
0000b8  6920              LDR      r0,[r4,#0x10]         ;1853
0000ba  7041              STRB     r1,[r0,#1]            ;1853
0000bc  6921              LDR      r1,[r4,#0x10]         ;1854
0000be  f8950030          LDRB     r0,[r5,#0x30]         ;1854
0000c2  7088              STRB     r0,[r1,#2]            ;1854
0000c4  6920              LDR      r0,[r4,#0x10]         ;1855
0000c6  2700              MOVS     r7,#0                 ;1855
0000c8  70c7              STRB     r7,[r0,#3]            ;1855
0000ca  6820              LDR      r0,[r4,#0]            ;1856
0000cc  f7fffffe          BL       lwip_htonl
0000d0  6921              LDR      r1,[r4,#0x10]         ;1856
0000d2  6048              STR      r0,[r1,#4]            ;1856
0000d4  6920              LDR      r0,[r4,#0x10]         ;1857
0000d6  8107              STRH     r7,[r0,#8]            ;1857
0000d8  6920              LDR      r0,[r4,#0x10]         ;1860
0000da  8147              STRH     r7,[r0,#0xa]          ;1860
0000dc  6920              LDR      r0,[r4,#0x10]         ;1861
0000de  60c7              STR      r7,[r0,#0xc]          ;1861
0000e0  2e08              CMP      r6,#8                 ;1863
0000e2  d00a              BEQ      |L6.250|
0000e4  2e04              CMP      r6,#4                 ;1863
0000e6  d008              BEQ      |L6.250|
0000e8  2e07              CMP      r6,#7                 ;1863
0000ea  d006              BEQ      |L6.250|
0000ec  2e03              CMP      r6,#3                 ;1864
0000ee  d107              BNE      |L6.256|
0000f0  7a60              LDRB     r0,[r4,#9]            ;1865
0000f2  2805              CMP      r0,#5                 ;1865
0000f4  d001              BEQ      |L6.250|
0000f6  2804              CMP      r0,#4                 ;1865
0000f8  d102              BNE      |L6.256|
                  |L6.250|
0000fa  6921              LDR      r1,[r4,#0x10]         ;1866
0000fc  6868              LDR      r0,[r5,#4]            ;1866
0000fe  60c8              STR      r0,[r1,#0xc]          ;1866
                  |L6.256|
000100  6920              LDR      r0,[r4,#0x10]         ;1868
000102  6107              STR      r7,[r0,#0x10]         ;1868
000104  6920              LDR      r0,[r4,#0x10]         ;1869
000106  6147              STR      r7,[r0,#0x14]         ;1869
000108  6920              LDR      r0,[r4,#0x10]         ;1870
00010a  6187              STR      r7,[r0,#0x18]         ;1870
00010c  2000              MOVS     r0,#0                 ;1871
                  |L6.270|
00010e  f8951030          LDRB     r1,[r5,#0x30]         ;1873
000112  4281              CMP      r1,r0                 ;1873
000114  d905              BLS      |L6.290|
000116  2806              CMP      r0,#6                 ;1873
000118  d203              BCS      |L6.290|
00011a  1829              ADDS     r1,r5,r0              ;1873
00011c  f8911031          LDRB     r1,[r1,#0x31]         ;1873
000120  e000              B        |L6.292|
                  |L6.290|
000122  2100              MOVS     r1,#0                 ;1873
                  |L6.292|
000124  6923              LDR      r3,[r4,#0x10]         ;1873
000126  f100021c          ADD      r2,r0,#0x1c           ;1873
00012a  5499              STRB     r1,[r3,r2]            ;1873
00012c  1c40              ADDS     r0,r0,#1              ;1871
00012e  b280              UXTH     r0,r0                 ;1871
000130  2810              CMP      r0,#0x10              ;1871
000132  d3ec              BCC      |L6.270|
000134  2000              MOVS     r0,#0                 ;1875
                  |L6.310|
000136  6922              LDR      r2,[r4,#0x10]         ;1876
000138  f100012c          ADD      r1,r0,#0x2c           ;1876
00013c  5457              STRB     r7,[r2,r1]            ;1876
00013e  1c40              ADDS     r0,r0,#1              ;1875
000140  b280              UXTH     r0,r0                 ;1875
000142  2840              CMP      r0,#0x40              ;1875
000144  d3f7              BCC      |L6.310|
000146  2000              MOVS     r0,#0                 ;1878
                  |L6.328|
000148  6922              LDR      r2,[r4,#0x10]         ;1879
00014a  f100016c          ADD      r1,r0,#0x6c           ;1879
00014e  5457              STRB     r7,[r2,r1]            ;1879
000150  1c40              ADDS     r0,r0,#1              ;1878
000152  b280              UXTH     r0,r0                 ;1878
000154  2880              CMP      r0,#0x80              ;1878
000156  d3f7              BCC      |L6.328|
000158  6921              LDR      r1,[r4,#0x10]         ;1881
00015a  4859              LDR      r0,|L6.704|
00015c  f8c100ec          STR      r0,[r1,#0xec]         ;1881
000160  82a7              STRH     r7,[r4,#0x14]         ;1882
000162  2000              MOVS     r0,#0                 ;1884
                  |L6.356|
000164  6922              LDR      r2,[r4,#0x10]         ;1885
000166  f10001f0          ADD      r1,r0,#0xf0           ;1885
00016a  5450              STRB     r0,[r2,r1]            ;1885
00016c  1c40              ADDS     r0,r0,#1              ;1884
00016e  b280              UXTH     r0,r0                 ;1884
000170  2844              CMP      r0,#0x44              ;1884
000172  d3f7              BCC      |L6.356|
000174  2201              MOVS     r2,#1                 ;1888
000176  2135              MOVS     r1,#0x35              ;1888
000178  4620              MOV      r0,r4                 ;1888
00017a  f7fffffe          BL       dhcp_option
00017e  4631              MOV      r1,r6                 ;1889
000180  4620              MOV      r0,r4                 ;1889
000182  f7fffffe          BL       dhcp_option_byte
000186  2000              MOVS     r0,#0                 ;1890
000188  e777              B        |L6.122|
;;;1892   
                          ENDP

00018a  0000              DCW      0x0000
                  |L6.396|
00018c  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
000190  6964646c
000194  65776172
000198  65735c54
00019c  68697264
0001a0  5f506172
0001a4  74795c4c
0001a8  7749505c
0001ac  7372635c
0001b0  636f7265
0001b4  5c697076
0001b8  345c6468
0001bc  63702e63          DCB      "cp.c",0
0001c0  00      
0001c1  00                DCB      0
0001c2  00                DCB      0
0001c3  00                DCB      0
                  |L6.452|
0001c4  64686370          DCB      "dhcp_create_msg: dhcp->p_out == NULL",0
0001c8  5f637265
0001cc  6174655f
0001d0  6d73673a
0001d4  20646863
0001d8  702d3e70
0001dc  5f6f7574
0001e0  203d3d20
0001e4  4e554c4c
0001e8  00      
0001e9  00                DCB      0
0001ea  00                DCB      0
0001eb  00                DCB      0
                  |L6.492|
0001ec  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0001f0  7274696f
0001f4  6e202225
0001f8  73222066
0001fc  61696c65
000200  64206174
000204  206c696e
000208  65202564
00020c  20696e20
000210  25730a00
                  |L6.532|
000214  64686370          DCB      "dhcp_create_msg: dhcp->msg_out == NULL",0
000218  5f637265
00021c  6174655f
000220  6d73673a
000224  20646863
000228  702d3e6d
00022c  73675f6f
000230  7574203d
000234  3d204e55
000238  4c4c00  
00023b  00                DCB      0
                  |L6.572|
00023c  64686370          DCB      "dhcp_create_msg: check that first pbuf can hold struct "
000240  5f637265
000244  6174655f
000248  6d73673a
00024c  20636865
000250  636b2074
000254  68617420
000258  66697273
00025c  74207062
000260  75662063
000264  616e2068
000268  6f6c6420
00026c  73747275
000270  637420  
000273  64686370          DCB      "dhcp_msg",0
000277  5f6d7367
00027b  00      
                  |L6.636|
00027c  64686370          DCB      "dhcp_create_msg: netif != NULL",0
000280  5f637265
000284  6174655f
000288  6d73673a
00028c  206e6574
000290  69662021
000294  3d204e55
000298  4c4c00  
00029b  00                DCB      0
                  |L6.668|
00029c  64686370          DCB      "dhcp_create_msg: dhcp != NULL",0
0002a0  5f637265
0002a4  6174655f
0002a8  6d73673a
0002ac  20646863
0002b0  7020213d
0002b4  204e554c
0002b8  4c00    
0002ba  00                DCB      0
0002bb  00                DCB      0
                  |L6.700|
                          DCD      ||.data||
                  |L6.704|
                          DCD      0x63538263

                          AREA ||i.dhcp_dec_pcb_refcount||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_dec_pcb_refcount PROC
;;;240    static void
;;;241    dhcp_dec_pcb_refcount(void)
000000  b510              PUSH     {r4,lr}
;;;242    {
;;;243      LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
000002  4c0b              LDR      r4,|L7.48|
000004  7820              LDRB     r0,[r4,#0]  ; dhcp_pcb_refcount
000006  2800              CMP      r0,#0
000008  d105              BNE      |L7.22|
00000a  a30a              ADR      r3,|L7.52|
00000c  22f3              MOVS     r2,#0xf3
00000e  a117              ADR      r1,|L7.108|
000010  a01f              ADR      r0,|L7.144|
000012  f7fffffe          BL       __2printf
                  |L7.22|
;;;244      dhcp_pcb_refcount--;
000016  7820              LDRB     r0,[r4,#0]  ; dhcp_pcb_refcount
000018  1e40              SUBS     r0,r0,#1
00001a  b2c0              UXTB     r0,r0
00001c  7020              STRB     r0,[r4,#0]
;;;245    
;;;246      if (dhcp_pcb_refcount == 0) {
00001e  2800              CMP      r0,#0
000020  d104              BNE      |L7.44|
;;;247        udp_remove(dhcp_pcb);
000022  68a0              LDR      r0,[r4,#8]  ; dhcp_pcb
000024  f7fffffe          BL       udp_remove
;;;248        dhcp_pcb = NULL;
000028  2000              MOVS     r0,#0
00002a  60a0              STR      r0,[r4,#8]  ; dhcp_pcb
                  |L7.44|
;;;249      }
;;;250    }
00002c  bd10              POP      {r4,pc}
;;;251    
                          ENDP

00002e  0000              DCW      0x0000
                  |L7.48|
                          DCD      ||.data||
                  |L7.52|
000034  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
000038  6964646c
00003c  65776172
000040  65735c54
000044  68697264
000048  5f506172
00004c  74795c4c
000050  7749505c
000054  7372635c
000058  636f7265
00005c  5c697076
000060  345c6468
000064  63702e63          DCB      "cp.c",0
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0
                  |L7.108|
00006c  64686370          DCB      "dhcp_pcb_refcount(): refcount error",0
000070  5f706362
000074  5f726566
000078  636f756e
00007c  7428293a
000080  20726566
000084  636f756e
000088  74206572
00008c  726f7200
                  |L7.144|
000090  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000094  7274696f
000098  6e202225
00009c  73222066
0000a0  61696c65
0000a4  64206174
0000a8  206c696e
0000ac  65202564
0000b0  20696e20
0000b4  25730a00

                          AREA ||i.dhcp_decline||, CODE, READONLY, ALIGN=2

                  dhcp_decline PROC
;;;918    static err_t
;;;919    dhcp_decline(struct netif *netif)
000000  b57c              PUSH     {r2-r6,lr}
;;;920    {
000002  4606              MOV      r6,r0
;;;921      struct dhcp *dhcp = netif_dhcp_data(netif);
000004  6ab4              LDR      r4,[r6,#0x28]
;;;922      err_t result = ERR_OK;
;;;923      u16_t msecs;
;;;924      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
;;;925      dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
000006  210c              MOVS     r1,#0xc
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dhcp_set_state
;;;926      /* create and initialize the DHCP message header */
;;;927      result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
00000e  2204              MOVS     r2,#4
000010  4621              MOV      r1,r4
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       dhcp_create_msg
000018  4605              MOV      r5,r0
;;;928      if (result == ERR_OK) {
00001a  0028              MOVS     r0,r5
00001c  d121              BNE      |L8.98|
;;;929        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
00001e  2204              MOVS     r2,#4
000020  2132              MOVS     r1,#0x32
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       dhcp_option
;;;930        dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
000028  6aa0              LDR      r0,[r4,#0x28]
00002a  f7fffffe          BL       lwip_htonl
00002e  4601              MOV      r1,r0
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       dhcp_option_long
;;;931    
;;;932        dhcp_option_trailer(dhcp);
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       dhcp_option_trailer
;;;933        /* resize pbuf to reflect true size of options */
;;;934        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
00003c  8aa0              LDRH     r0,[r4,#0x14]
00003e  30f0              ADDS     r0,r0,#0xf0
000040  b281              UXTH     r1,r0
000042  68e0              LDR      r0,[r4,#0xc]
000044  f7fffffe          BL       pbuf_realloc
;;;935    
;;;936        /* per section 4.4.4, broadcast DECLINE messages */
;;;937        udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
000048  480d              LDR      r0,|L8.128|
00004a  2343              MOVS     r3,#0x43
00004c  e9cd6000          STRD     r6,r0,[sp,#0]
000050  480d              LDR      r0,|L8.136|
000052  4a0c              LDR      r2,|L8.132|
000054  68e1              LDR      r1,[r4,#0xc]
000056  6880              LDR      r0,[r0,#8]  ; dhcp_pcb
000058  f7fffffe          BL       udp_sendto_if_src
;;;938        dhcp_delete_msg(dhcp);
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       dhcp_delete_msg
                  |L8.98|
;;;939        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
;;;940      } else {
;;;941        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;942          ("dhcp_decline: could not allocate DHCP request\n"));
;;;943      }
;;;944      if (dhcp->tries < 255) {
000062  7aa0              LDRB     r0,[r4,#0xa]
000064  28ff              CMP      r0,#0xff
000066  d201              BCS      |L8.108|
;;;945        dhcp->tries++;
000068  1c40              ADDS     r0,r0,#1
00006a  72a0              STRB     r0,[r4,#0xa]
                  |L8.108|
;;;946      }
;;;947      msecs = 10*1000;
;;;948      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00006c  f6421003          MOV      r0,#0x2903
000070  f44f71fa          MOV      r1,#0x1f4
000074  fbb0f0f1          UDIV     r0,r0,r1
000078  82e0              STRH     r0,[r4,#0x16]
;;;949      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
;;;950      return result;
00007a  4628              MOV      r0,r5
;;;951    }
00007c  bd7c              POP      {r2-r6,pc}
;;;952    #endif /* DHCP_DOES_ARP_CHECK */
                          ENDP

00007e  0000              DCW      0x0000
                  |L8.128|
                          DCD      ip_addr_any
                  |L8.132|
                          DCD      ip_addr_broadcast
                  |L8.136|
                          DCD      ||.data||

                          AREA ||i.dhcp_delete_msg||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_delete_msg PROC
;;;1898   static void
;;;1899   dhcp_delete_msg(struct dhcp *dhcp)
000000  b510              PUSH     {r4,lr}
;;;1900   {
000002  4604              MOV      r4,r0
;;;1901     LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
000004  2c00              CMP      r4,#0
000006  d003              BEQ      |L9.16|
;;;1902     LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
000008  68e0              LDR      r0,[r4,#0xc]
00000a  2800              CMP      r0,#0
00000c  d009              BEQ      |L9.34|
00000e  e00f              B        |L9.48|
                  |L9.16|
000010  e8bd4010          POP      {r4,lr}               ;1901
000014  a30f              ADR      r3,|L9.84|
000016  f240726d          MOV      r2,#0x76d             ;1901
00001a  a11c              ADR      r1,|L9.140|
00001c  a023              ADR      r0,|L9.172|
00001e  f7ffbffe          B.W      __2printf
                  |L9.34|
000022  a30c              ADR      r3,|L9.84|
000024  f240726e          MOV      r2,#0x76e
000028  a12a              ADR      r1,|L9.212|
00002a  a020              ADR      r0,|L9.172|
00002c  f7fffffe          BL       __2printf
                  |L9.48|
;;;1903     LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
000030  6920              LDR      r0,[r4,#0x10]
000032  2800              CMP      r0,#0
000034  d106              BNE      |L9.68|
000036  a307              ADR      r3,|L9.84|
000038  f240726f          MOV      r2,#0x76f
00003c  a12f              ADR      r1,|L9.252|
00003e  a01b              ADR      r0,|L9.172|
000040  f7fffffe          BL       __2printf
                  |L9.68|
;;;1904     if (dhcp->p_out != NULL) {
000044  68e0              LDR      r0,[r4,#0xc]
000046  b108              CBZ      r0,|L9.76|
;;;1905       pbuf_free(dhcp->p_out);
000048  f7fffffe          BL       pbuf_free
                  |L9.76|
;;;1906     }
;;;1907     dhcp->p_out = NULL;
00004c  2000              MOVS     r0,#0
00004e  60e0              STR      r0,[r4,#0xc]
;;;1908     dhcp->msg_out = NULL;
000050  6120              STR      r0,[r4,#0x10]
;;;1909   }
000052  bd10              POP      {r4,pc}
;;;1910   
                          ENDP

                  |L9.84|
000054  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
000058  6964646c
00005c  65776172
000060  65735c54
000064  68697264
000068  5f506172
00006c  74795c4c
000070  7749505c
000074  7372635c
000078  636f7265
00007c  5c697076
000080  345c6468
000084  63702e63          DCB      "cp.c",0
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L9.140|
00008c  64686370          DCB      "dhcp_delete_msg: dhcp != NULL",0
000090  5f64656c
000094  6574655f
000098  6d73673a
00009c  20646863
0000a0  7020213d
0000a4  204e554c
0000a8  4c00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L9.172|
0000ac  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000b0  7274696f
0000b4  6e202225
0000b8  73222066
0000bc  61696c65
0000c0  64206174
0000c4  206c696e
0000c8  65202564
0000cc  20696e20
0000d0  25730a00
                  |L9.212|
0000d4  64686370          DCB      "dhcp_delete_msg: dhcp->p_out != NULL",0
0000d8  5f64656c
0000dc  6574655f
0000e0  6d73673a
0000e4  20646863
0000e8  702d3e70
0000ec  5f6f7574
0000f0  20213d20
0000f4  4e554c4c
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L9.252|
0000fc  64686370          DCB      "dhcp_delete_msg: dhcp->msg_out != NULL",0
000100  5f64656c
000104  6574655f
000108  6d73673a
00010c  20646863
000110  702d3e6d
000114  73675f6f
000118  75742021
00011c  3d204e55
000120  4c4c00  
000123  00                DCB      0

                          AREA ||i.dhcp_discover||, CODE, READONLY, ALIGN=2

                  dhcp_discover PROC
;;;960    static err_t
;;;961    dhcp_discover(struct netif *netif)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;962    {
000004  4680              MOV      r8,r0
;;;963      struct dhcp *dhcp = netif_dhcp_data(netif);
000006  f8d84028          LDR      r4,[r8,#0x28]
;;;964      err_t result = ERR_OK;
;;;965      u16_t msecs;
;;;966      u8_t i;
;;;967      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
;;;968      ip4_addr_set_any(&dhcp->offered_ip_addr);
00000a  2000              MOVS     r0,#0
00000c  62a0              STR      r0,[r4,#0x28]
;;;969      dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
00000e  2106              MOVS     r1,#6
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       dhcp_set_state
;;;970      /* create and initialize the DHCP message header */
;;;971      result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
000016  2201              MOVS     r2,#1
000018  4621              MOV      r1,r4
00001a  4640              MOV      r0,r8
00001c  f7fffffe          BL       dhcp_create_msg
000020  4607              MOV      r7,r0
;;;972      if (result == ERR_OK) {
000022  0038              MOVS     r0,r7
000024  d12f              BNE      |L10.134|
;;;973        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
;;;974    
;;;975        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000026  2202              MOVS     r2,#2
000028  2139              MOVS     r1,#0x39
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       dhcp_option
;;;976        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000030  f8b8102e          LDRH     r1,[r8,#0x2e]
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       dhcp_option_short
;;;977    
;;;978        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
00003a  2203              MOVS     r2,#3
00003c  2137              MOVS     r1,#0x37
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       dhcp_option
;;;979        for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
000044  2500              MOVS     r5,#0
;;;980          dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
000046  4e1f              LDR      r6,|L10.196|
                  |L10.72|
000048  4620              MOV      r0,r4
00004a  5d71              LDRB     r1,[r6,r5]
00004c  f7fffffe          BL       dhcp_option_byte
000050  1c6d              ADDS     r5,r5,#1              ;979
000052  b2ed              UXTB     r5,r5                 ;979
000054  2d03              CMP      r5,#3                 ;979
000056  d3f7              BCC      |L10.72|
;;;981        }
;;;982        dhcp_option_trailer(dhcp);
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       dhcp_option_trailer
;;;983    
;;;984        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
;;;985        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
00005e  8aa0              LDRH     r0,[r4,#0x14]
000060  30f0              ADDS     r0,r0,#0xf0
000062  b281              UXTH     r1,r0
000064  68e0              LDR      r0,[r4,#0xc]
000066  f7fffffe          BL       pbuf_realloc
;;;986    
;;;987        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
;;;988        udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
00006a  4817              LDR      r0,|L10.200|
00006c  2343              MOVS     r3,#0x43
00006e  e9cd8000          STRD     r8,r0,[sp,#0]
000072  4814              LDR      r0,|L10.196|
000074  4a15              LDR      r2,|L10.204|
000076  1e40              SUBS     r0,r0,#1
000078  68e1              LDR      r1,[r4,#0xc]
00007a  6880              LDR      r0,[r0,#8]  ; dhcp_pcb
00007c  f7fffffe          BL       udp_sendto_if_src
;;;989        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
;;;990        dhcp_delete_msg(dhcp);
000080  4620              MOV      r0,r4
000082  f7fffffe          BL       dhcp_delete_msg
                  |L10.134|
;;;991        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
;;;992      } else {
;;;993        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
;;;994      }
;;;995      if (dhcp->tries < 255) {
000086  7aa0              LDRB     r0,[r4,#0xa]
000088  28ff              CMP      r0,#0xff
00008a  d201              BCS      |L10.144|
;;;996        dhcp->tries++;
00008c  1c40              ADDS     r0,r0,#1
00008e  72a0              STRB     r0,[r4,#0xa]
                  |L10.144|
;;;997      }
;;;998    #if LWIP_DHCP_AUTOIP_COOP
;;;999      if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
;;;1000       dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
;;;1001       autoip_start(netif);
;;;1002     }
;;;1003   #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1004     msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
000090  7aa1              LDRB     r1,[r4,#0xa]
000092  2906              CMP      r1,#6
000094  d202              BCS      |L10.156|
000096  2001              MOVS     r0,#1
000098  4088              LSLS     r0,r0,r1
00009a  e000              B        |L10.158|
                  |L10.156|
00009c  203c              MOVS     r0,#0x3c
                  |L10.158|
00009e  eb000140          ADD      r1,r0,r0,LSL #1
0000a2  ebc110c0          RSB      r0,r1,r0,LSL #7
0000a6  f64f71ff          MOV      r1,#0xffff
0000aa  ea0100c0          AND      r0,r1,r0,LSL #3
;;;1005     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000ae  f20010f3          ADD      r0,r0,#0x1f3
0000b2  f44f71fa          MOV      r1,#0x1f4
0000b6  fbb0f0f1          UDIV     r0,r0,r1
0000ba  82e0              STRH     r0,[r4,#0x16]
;;;1006     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
;;;1007     return result;
0000bc  4638              MOV      r0,r7
;;;1008   }
0000be  e8bd81fc          POP      {r2-r8,pc}
;;;1009   
                          ENDP

0000c2  0000              DCW      0x0000
                  |L10.196|
                          DCD      ||.data||+0x1
                  |L10.200|
                          DCD      ip_addr_any
                  |L10.204|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_fine_tmr||, CODE, READONLY, ALIGN=2

                  dhcp_fine_tmr PROC
;;;448    void
;;;449    dhcp_fine_tmr(void)
000000  b570              PUSH     {r4-r6,lr}
;;;450    {
;;;451      struct netif *netif = netif_list;
000002  480b              LDR      r0,|L11.48|
000004  6804              LDR      r4,[r0,#0]  ; netif_list
;;;452      /* loop through netif's */
;;;453      while (netif != NULL) {
000006  2500              MOVS     r5,#0
000008  e00e              B        |L11.40|
                  |L11.10|
;;;454        struct dhcp *dhcp = netif_dhcp_data(netif);
00000a  6aa1              LDR      r1,[r4,#0x28]
;;;455        /* only act on DHCP configured interfaces */
;;;456        if (dhcp != NULL) {
00000c  b159              CBZ      r1,|L11.38|
;;;457          /* timer is active (non zero), and is about to trigger now */
;;;458          if (dhcp->request_timeout > 1) {
00000e  8ac8              LDRH     r0,[r1,#0x16]
000010  2801              CMP      r0,#1
000012  d903              BLS      |L11.28|
;;;459            dhcp->request_timeout--;
000014  f1a00001          SUB      r0,r0,#1
000018  82c8              STRH     r0,[r1,#0x16]
00001a  e004              B        |L11.38|
                  |L11.28|
;;;460          }
;;;461          else if (dhcp->request_timeout == 1) {
00001c  d103              BNE      |L11.38|
;;;462            dhcp->request_timeout--;
00001e  82cd              STRH     r5,[r1,#0x16]
;;;463            /* { netif->dhcp->request_timeout == 0 } */
;;;464            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
;;;465            /* this client's request timeout triggered */
;;;466            dhcp_timeout(netif);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       dhcp_timeout
                  |L11.38|
;;;467          }
;;;468        }
;;;469        /* proceed to next network interface */
;;;470        netif = netif->next;
000026  6824              LDR      r4,[r4,#0]
                  |L11.40|
000028  2c00              CMP      r4,#0                 ;453
00002a  d1ee              BNE      |L11.10|
;;;471      }
;;;472    }
00002c  bd70              POP      {r4-r6,pc}
;;;473    
                          ENDP

00002e  0000              DCW      0x0000
                  |L11.48|
                          DCD      netif_list

                          AREA ||i.dhcp_handle_ack||, CODE, READONLY, ALIGN=2

                  dhcp_handle_ack PROC
;;;584    static void
;;;585    dhcp_handle_ack(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;586    {
;;;587      struct dhcp *dhcp = netif_dhcp_data(netif);
000002  6a84              LDR      r4,[r0,#0x28]
;;;588    
;;;589    #if LWIP_DHCP_PROVIDE_DNS_SERVERS || LWIP_DHCP_GET_NTP_SRV
;;;590      u8_t n;
;;;591    #endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS || LWIP_DHCP_GET_NTP_SRV */
;;;592    #if LWIP_DHCP_GET_NTP_SRV
;;;593      ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
;;;594    #endif
;;;595    
;;;596      /* clear options we might not get from the ACK */
;;;597      ip4_addr_set_zero(&dhcp->offered_sn_mask);
000004  2100              MOVS     r1,#0
000006  62e1              STR      r1,[r4,#0x2c]
;;;598      ip4_addr_set_zero(&dhcp->offered_gw_addr);
000008  6321              STR      r1,[r4,#0x30]
;;;599    #if LWIP_DHCP_BOOTP_FILE
;;;600      ip4_addr_set_zero(&dhcp->offered_si_addr);
;;;601    #endif /* LWIP_DHCP_BOOTP_FILE */
;;;602    
;;;603      /* lease time given? */
;;;604      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
00000a  4e17              LDR      r6,|L12.104|
;;;605        /* remember offered lease time */
;;;606        dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
00000c  4d17              LDR      r5,|L12.108|
00000e  78f0              LDRB     r0,[r6,#3]            ;604  ; dhcp_rx_options_given
000010  2800              CMP      r0,#0                 ;604
000012  d001              BEQ      |L12.24|
000014  68e8              LDR      r0,[r5,#0xc]  ; dhcp_rx_options_val
000016  6360              STR      r0,[r4,#0x34]
                  |L12.24|
;;;607      }
;;;608      /* renewal period given? */
;;;609      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
000018  7930              LDRB     r0,[r6,#4]  ; dhcp_rx_options_given
00001a  b110              CBZ      r0,|L12.34|
;;;610        /* remember given renewal period */
;;;611        dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
00001c  6928              LDR      r0,[r5,#0x10]  ; dhcp_rx_options_val
00001e  63a0              STR      r0,[r4,#0x38]
000020  e002              B        |L12.40|
                  |L12.34|
;;;612      } else {
;;;613        /* calculate safe periods for renewal */
;;;614        dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
000022  6b60              LDR      r0,[r4,#0x34]
000024  0840              LSRS     r0,r0,#1
000026  63a0              STR      r0,[r4,#0x38]
                  |L12.40|
;;;615      }
;;;616    
;;;617      /* renewal period given? */
;;;618      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
000028  7970              LDRB     r0,[r6,#5]  ; dhcp_rx_options_given
00002a  b110              CBZ      r0,|L12.50|
;;;619        /* remember given rebind period */
;;;620        dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
00002c  6968              LDR      r0,[r5,#0x14]  ; dhcp_rx_options_val
00002e  63e0              STR      r0,[r4,#0x3c]
000030  e004              B        |L12.60|
                  |L12.50|
;;;621      } else {
;;;622        /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
;;;623        dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
000032  6b60              LDR      r0,[r4,#0x34]
000034  ebc000c0          RSB      r0,r0,r0,LSL #3
000038  08c0              LSRS     r0,r0,#3
00003a  63e0              STR      r0,[r4,#0x3c]
                  |L12.60|
;;;624      }
;;;625    
;;;626      /* (y)our internet address */
;;;627      ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
00003c  6860              LDR      r0,[r4,#4]
00003e  6900              LDR      r0,[r0,#0x10]
000040  62a0              STR      r0,[r4,#0x28]
;;;628    
;;;629    #if LWIP_DHCP_BOOTP_FILE
;;;630      /* copy boot server address,
;;;631         boot file name copied in dhcp_parse_reply if not overloaded */
;;;632      ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
;;;633    #endif /* LWIP_DHCP_BOOTP_FILE */
;;;634    
;;;635      /* subnet mask given? */
;;;636      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
000042  79b0              LDRB     r0,[r6,#6]  ; dhcp_rx_options_given
000044  b130              CBZ      r0,|L12.84|
;;;637        /* remember given subnet mask */
;;;638        ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
000046  69a8              LDR      r0,[r5,#0x18]  ; dhcp_rx_options_val
000048  f7fffffe          BL       lwip_htonl
00004c  62e0              STR      r0,[r4,#0x2c]
;;;639        dhcp->subnet_mask_given = 1;
00004e  2001              MOVS     r0,#1
000050  72e0              STRB     r0,[r4,#0xb]
000052  e000              B        |L12.86|
                  |L12.84|
;;;640      } else {
;;;641        dhcp->subnet_mask_given = 0;
000054  72e1              STRB     r1,[r4,#0xb]
                  |L12.86|
;;;642      }
;;;643    
;;;644      /* gateway router */
;;;645      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
000056  79f0              LDRB     r0,[r6,#7]  ; dhcp_rx_options_given
000058  2800              CMP      r0,#0
00005a  d003              BEQ      |L12.100|
;;;646        ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
00005c  69e8              LDR      r0,[r5,#0x1c]  ; dhcp_rx_options_val
00005e  f7fffffe          BL       lwip_htonl
000062  6320              STR      r0,[r4,#0x30]
                  |L12.100|
;;;647      }
;;;648    
;;;649    #if LWIP_DHCP_GET_NTP_SRV
;;;650      /* NTP servers */
;;;651      for (n = 0; (n < LWIP_DHCP_MAX_NTP_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_NTP_SERVER + n); n++) {
;;;652        ip4_addr_set_u32(&ntp_server_addrs[n], lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_NTP_SERVER + n)));
;;;653      }
;;;654      dhcp_set_ntp_servers(n, ntp_server_addrs);
;;;655    #endif /* LWIP_DHCP_GET_NTP_SRV */
;;;656    
;;;657    #if LWIP_DHCP_PROVIDE_DNS_SERVERS
;;;658      /* DNS servers */
;;;659      for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
;;;660        ip_addr_t dns_addr;
;;;661        ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
;;;662        dns_setserver(n, &dns_addr);
;;;663      }
;;;664    #endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
;;;665    }
000064  bd70              POP      {r4-r6,pc}
;;;666    
                          ENDP

000066  0000              DCW      0x0000
                  |L12.104|
                          DCD      ||.data||+0xc
                  |L12.108|
                          DCD      ||.bss||

                          AREA ||i.dhcp_handle_nak||, CODE, READONLY, ALIGN=2

                  dhcp_handle_nak PROC
;;;264    static void
;;;265    dhcp_handle_nak(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;266    {
000002  4604              MOV      r4,r0
;;;267      struct dhcp *dhcp = netif_dhcp_data(netif);
000004  6aa0              LDR      r0,[r4,#0x28]
;;;268    
;;;269      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
;;;270        (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;271      /* Change to a defined state - set this before assigning the address
;;;272         to ensure the callback can use dhcp_supplied_address() */
;;;273      dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
000006  210c              MOVS     r1,#0xc
000008  f7fffffe          BL       dhcp_set_state
;;;274      /* remove IP address from interface (must no longer be used, as per RFC2131) */
;;;275      netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
00000c  4b05              LDR      r3,|L13.36|
00000e  4620              MOV      r0,r4
000010  461a              MOV      r2,r3
000012  4611              MOV      r1,r2
000014  f7fffffe          BL       netif_set_addr
;;;276      /* We can immediately restart discovery */
;;;277      dhcp_discover(netif);
000018  4620              MOV      r0,r4
00001a  e8bd4010          POP      {r4,lr}
00001e  f7ffbffe          B.W      dhcp_discover
;;;278    }
;;;279    
                          ENDP

000022  0000              DCW      0x0000
                  |L13.36|
                          DCD      ip_addr_any

                          AREA ||i.dhcp_handle_offer||, CODE, READONLY, ALIGN=2

                  dhcp_handle_offer PROC
;;;319    static void
;;;320    dhcp_handle_offer(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;321    {
000002  4605              MOV      r5,r0
;;;322      struct dhcp *dhcp = netif_dhcp_data(netif);
000004  6aac              LDR      r4,[r5,#0x28]
;;;323    
;;;324      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
;;;325        (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;326      /* obtain the server address */
;;;327      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
000006  4809              LDR      r0,|L14.44|
000008  7880              LDRB     r0,[r0,#2]  ; dhcp_rx_options_given
00000a  2800              CMP      r0,#0
00000c  d00c              BEQ      |L14.40|
;;;328        ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
00000e  4808              LDR      r0,|L14.48|
000010  6880              LDR      r0,[r0,#8]  ; dhcp_rx_options_val
000012  f7fffffe          BL       lwip_htonl
000016  6260              STR      r0,[r4,#0x24]
;;;329        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
;;;330          ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
;;;331        /* remember offered address */
;;;332        ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
000018  6860              LDR      r0,[r4,#4]
00001a  6900              LDR      r0,[r0,#0x10]
00001c  62a0              STR      r0,[r4,#0x28]
;;;333        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
;;;334          ip4_addr_get_u32(&dhcp->offered_ip_addr)));
;;;335    
;;;336        dhcp_select(netif);
00001e  4628              MOV      r0,r5
000020  e8bd4070          POP      {r4-r6,lr}
000024  f7ffbffe          B.W      dhcp_select
                  |L14.40|
;;;337      } else {
;;;338        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;339          ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
;;;340      }
;;;341    }
000028  bd70              POP      {r4-r6,pc}
;;;342    
                          ENDP

00002a  0000              DCW      0x0000
                  |L14.44|
                          DCD      ||.data||+0xc
                  |L14.48|
                          DCD      ||.bss||

                          AREA ||i.dhcp_inc_pcb_refcount||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_inc_pcb_refcount PROC
;;;213    static err_t
;;;214    dhcp_inc_pcb_refcount(void)
000000  b510              PUSH     {r4,lr}
;;;215    {
;;;216      if (dhcp_pcb_refcount == 0) {
000002  4c15              LDR      r4,|L15.88|
000004  7820              LDRB     r0,[r4,#0]  ; dhcp_pcb_refcount
000006  2800              CMP      r0,#0
000008  d11e              BNE      |L15.72|
;;;217        LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
00000a  68a0              LDR      r0,[r4,#8]  ; dhcp_pcb
00000c  2800              CMP      r0,#0
00000e  d005              BEQ      |L15.28|
000010  a312              ADR      r3,|L15.92|
000012  22d9              MOVS     r2,#0xd9
000014  a11f              ADR      r1,|L15.148|
000016  a029              ADR      r0,|L15.188|
000018  f7fffffe          BL       __2printf
                  |L15.28|
;;;218    
;;;219        /* allocate UDP PCB */
;;;220        dhcp_pcb = udp_new();
00001c  f7fffffe          BL       udp_new
000020  60a0              STR      r0,[r4,#8]  ; dhcp_pcb
;;;221    
;;;222        if (dhcp_pcb == NULL) {
000022  b1b0              CBZ      r0,|L15.82|
;;;223          return ERR_MEM;
;;;224        }
;;;225    
;;;226        ip_set_option(dhcp_pcb, SOF_BROADCAST);
000024  7a01              LDRB     r1,[r0,#8]
000026  f0410120          ORR      r1,r1,#0x20
00002a  7201              STRB     r1,[r0,#8]
;;;227    
;;;228        /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
;;;229        udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
00002c  2244              MOVS     r2,#0x44
00002e  492d              LDR      r1,|L15.228|
000030  f7fffffe          BL       udp_bind
;;;230        udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
000034  2243              MOVS     r2,#0x43
000036  492b              LDR      r1,|L15.228|
000038  68a0              LDR      r0,[r4,#8]  ; dhcp_pcb
00003a  f7fffffe          BL       udp_connect
;;;231        udp_recv(dhcp_pcb, dhcp_recv, NULL);
00003e  2200              MOVS     r2,#0
000040  4929              LDR      r1,|L15.232|
000042  68a0              LDR      r0,[r4,#8]  ; dhcp_pcb
000044  f7fffffe          BL       udp_recv
                  |L15.72|
;;;232      }
;;;233    
;;;234      dhcp_pcb_refcount++;
000048  7820              LDRB     r0,[r4,#0]  ; dhcp_pcb_refcount
00004a  1c40              ADDS     r0,r0,#1
00004c  7020              STRB     r0,[r4,#0]
;;;235    
;;;236      return ERR_OK;
00004e  2000              MOVS     r0,#0
;;;237    }
000050  bd10              POP      {r4,pc}
                  |L15.82|
000052  f04f30ff          MOV      r0,#0xffffffff        ;223
000056  bd10              POP      {r4,pc}
;;;238    
                          ENDP

                  |L15.88|
                          DCD      ||.data||
                  |L15.92|
00005c  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
000060  6964646c
000064  65776172
000068  65735c54
00006c  68697264
000070  5f506172
000074  74795c4c
000078  7749505c
00007c  7372635c
000080  636f7265
000084  5c697076
000088  345c6468
00008c  63702e63          DCB      "cp.c",0
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
                  |L15.148|
000094  64686370          DCB      "dhcp_inc_pcb_refcount(): memory leak",0
000098  5f696e63
00009c  5f706362
0000a0  5f726566
0000a4  636f756e
0000a8  7428293a
0000ac  206d656d
0000b0  6f727920
0000b4  6c65616b
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L15.188|
0000bc  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000c0  7274696f
0000c4  6e202225
0000c8  73222066
0000cc  61696c65
0000d0  64206174
0000d4  206c696e
0000d8  65202564
0000dc  20696e20
0000e0  25730a00
                  |L15.228|
                          DCD      ip_addr_any
                  |L15.232|
                          DCD      dhcp_recv

                          AREA ||i.dhcp_inform||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_inform PROC
;;;801    void
;;;802    dhcp_inform(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;803    {
000002  b092              SUB      sp,sp,#0x48
000004  4604              MOV      r4,r0
;;;804      struct dhcp dhcp;
;;;805      err_t result = ERR_OK;
;;;806    
;;;807      LWIP_ERROR("netif != NULL", (netif != NULL), return;);
000006  2c00              CMP      r4,#0
000008  d012              BEQ      |L16.48|
;;;808    
;;;809      if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
00000a  f7fffffe          BL       dhcp_inc_pcb_refcount
00000e  2800              CMP      r0,#0
000010  d115              BNE      |L16.62|
;;;810        return;
;;;811      }
;;;812    
;;;813      memset(&dhcp, 0, sizeof(struct dhcp));
000012  2140              MOVS     r1,#0x40
000014  a802              ADD      r0,sp,#8
000016  f7fffffe          BL       __aeabi_memclr4
;;;814      dhcp_set_state(&dhcp, DHCP_STATE_INFORMING);
00001a  2107              MOVS     r1,#7
00001c  a802              ADD      r0,sp,#8
00001e  f7fffffe          BL       dhcp_set_state
;;;815    
;;;816      /* create and initialize the DHCP message header */
;;;817      result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
000022  2208              MOVS     r2,#8
000024  a902              ADD      r1,sp,#8
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       dhcp_create_msg
;;;818      if (result == ERR_OK) {
00002c  b148              CBZ      r0,|L16.66|
00002e  e026              B        |L16.126|
                  |L16.48|
000030  a314              ADR      r3,|L16.132|
000032  f2403227          MOV      r2,#0x327             ;807
000036  a121              ADR      r1,|L16.188|
000038  a024              ADR      r0,|L16.204|
00003a  f7fffffe          BL       __2printf
                  |L16.62|
;;;819        dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
;;;820        dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
;;;821    
;;;822        dhcp_option_trailer(&dhcp);
;;;823    
;;;824        pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
;;;825    
;;;826        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
;;;827    
;;;828        udp_sendto_if(dhcp_pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
;;;829    
;;;830        dhcp_delete_msg(&dhcp);
;;;831      } else {
;;;832        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
;;;833      }
;;;834    
;;;835      dhcp_dec_pcb_refcount(); /* delete DHCP PCB if not needed any more */
;;;836    }
00003e  b012              ADD      sp,sp,#0x48
000040  bd10              POP      {r4,pc}
                  |L16.66|
000042  2202              MOVS     r2,#2                 ;819
000044  2139              MOVS     r1,#0x39              ;819
000046  a802              ADD      r0,sp,#8              ;819
000048  f7fffffe          BL       dhcp_option
00004c  8de1              LDRH     r1,[r4,#0x2e]         ;820
00004e  a802              ADD      r0,sp,#8              ;820
000050  f7fffffe          BL       dhcp_option_short
000054  a802              ADD      r0,sp,#8              ;822
000056  f7fffffe          BL       dhcp_option_trailer
00005a  f8bd001c          LDRH     r0,[sp,#0x1c]         ;824
00005e  30f0              ADDS     r0,r0,#0xf0           ;824
000060  b281              UXTH     r1,r0                 ;824
000062  9805              LDR      r0,[sp,#0x14]         ;824
000064  f7fffffe          BL       pbuf_realloc
000068  4823              LDR      r0,|L16.248|
00006a  9400              STR      r4,[sp,#0]            ;828
00006c  2343              MOVS     r3,#0x43              ;828
00006e  4a21              LDR      r2,|L16.244|
000070  9905              LDR      r1,[sp,#0x14]         ;828
000072  6880              LDR      r0,[r0,#8]            ;828  ; dhcp_pcb
000074  f7fffffe          BL       udp_sendto_if
000078  a802              ADD      r0,sp,#8              ;830
00007a  f7fffffe          BL       dhcp_delete_msg
                  |L16.126|
00007e  f7fffffe          BL       dhcp_dec_pcb_refcount
000082  e7dc              B        |L16.62|
;;;837    
                          ENDP

                  |L16.132|
000084  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
000088  6964646c
00008c  65776172
000090  65735c54
000094  68697264
000098  5f506172
00009c  74795c4c
0000a0  7749505c
0000a4  7372635c
0000a8  636f7265
0000ac  5c697076
0000b0  345c6468
0000b4  63702e63          DCB      "cp.c",0
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L16.188|
0000bc  6e657469          DCB      "netif != NULL",0
0000c0  6620213d
0000c4  204e554c
0000c8  4c00    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L16.204|
0000cc  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000d0  7274696f
0000d4  6e202225
0000d8  73222066
0000dc  61696c65
0000e0  64206174
0000e4  206c696e
0000e8  65202564
0000ec  20696e20
0000f0  25730a00
                  |L16.244|
                          DCD      ip_addr_broadcast
                  |L16.248|
                          DCD      ||.data||

                          AREA ||i.dhcp_network_changed||, CODE, READONLY, ALIGN=1

                  dhcp_network_changed PROC
;;;843    void
;;;844    dhcp_network_changed(struct netif *netif)
000000  6a82              LDR      r2,[r0,#0x28]
;;;845    {
;;;846      struct dhcp *dhcp = netif_dhcp_data(netif);
;;;847    
;;;848      if (!dhcp)
000002  2a00              CMP      r2,#0
000004  d013              BEQ      |L17.46|
;;;849        return;
;;;850      switch (dhcp->state) {
000006  7a51              LDRB     r1,[r2,#9]
000008  2300              MOVS     r3,#0
00000a  2904              CMP      r1,#4
00000c  d00c              BEQ      |L17.40|
00000e  dc04              BGT      |L17.26|
000010  2900              CMP      r1,#0
000012  d00c              BEQ      |L17.46|
000014  2903              CMP      r1,#3
000016  d104              BNE      |L17.34|
000018  e006              B        |L17.40|
                  |L17.26|
00001a  2905              CMP      r1,#5
00001c  d004              BEQ      |L17.40|
00001e  290a              CMP      r1,#0xa
000020  d002              BEQ      |L17.40|
                  |L17.34|
;;;851      case DHCP_STATE_REBINDING:
;;;852      case DHCP_STATE_RENEWING:
;;;853      case DHCP_STATE_BOUND:
;;;854      case DHCP_STATE_REBOOTING:
;;;855        dhcp->tries = 0;
;;;856        dhcp_reboot(netif);
;;;857        break;
;;;858      case DHCP_STATE_OFF:
;;;859        /* stay off */
;;;860        break;
;;;861      default:
;;;862        /* INIT/REQUESTING/CHECKING/BACKING_OFF restart with new 'rid' because the
;;;863           state changes, SELECTING: continue with current 'rid' as we stay in the
;;;864           same state */
;;;865    #if LWIP_DHCP_AUTOIP_COOP
;;;866        if (dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;867          autoip_stop(netif);
;;;868          dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;869        }
;;;870    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;871        /* ensure we start with short timeouts, even if already discovering */
;;;872        dhcp->tries = 0;
000022  7293              STRB     r3,[r2,#0xa]
;;;873        dhcp_discover(netif);
000024  f7ffbffe          B.W      dhcp_discover
                  |L17.40|
000028  7293              STRB     r3,[r2,#0xa]          ;855
00002a  f7ffbffe          B.W      dhcp_reboot
                  |L17.46|
;;;874        break;
;;;875      }
;;;876    }
00002e  4770              BX       lr
;;;877    
                          ENDP


                          AREA ||i.dhcp_option||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_option PROC
;;;1389   static void
;;;1390   dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
000000  b570              PUSH     {r4-r6,lr}
;;;1391   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1392     LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
000008  8aa2              LDRH     r2,[r4,#0x14]
00000a  1ca8              ADDS     r0,r5,#2
00000c  4410              ADD      r0,r0,r2
00000e  2844              CMP      r0,#0x44
000010  d906              BLS      |L18.32|
000012  a30a              ADR      r3,|L18.60|
000014  f44f62ae          MOV      r2,#0x570
000018  4916              LDR      r1,|L18.116|
00001a  a017              ADR      r0,|L18.120|
00001c  f7fffffe          BL       __2printf
                  |L18.32|
;;;1393     dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
000020  8aa0              LDRH     r0,[r4,#0x14]
000022  1c41              ADDS     r1,r0,#1
000024  82a1              STRH     r1,[r4,#0x14]
000026  6921              LDR      r1,[r4,#0x10]
000028  30f0              ADDS     r0,r0,#0xf0
00002a  540e              STRB     r6,[r1,r0]
;;;1394     dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
00002c  8aa0              LDRH     r0,[r4,#0x14]
00002e  1c41              ADDS     r1,r0,#1
000030  82a1              STRH     r1,[r4,#0x14]
000032  6921              LDR      r1,[r4,#0x10]
000034  30f0              ADDS     r0,r0,#0xf0
000036  540d              STRB     r5,[r1,r0]
;;;1395   }
000038  bd70              POP      {r4-r6,pc}
;;;1396   /*
                          ENDP

00003a  0000              DCW      0x0000
                  |L18.60|
00003c  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
000040  6964646c
000044  65776172
000048  65735c54
00004c  68697264
000050  5f506172
000054  74795c4c
000058  7749505c
00005c  7372635c
000060  636f7265
000064  5c697076
000068  345c6468
00006c  63702e63          DCB      "cp.c",0
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L18.116|
                          DCD      ||.conststring||
                  |L18.120|
000078  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
00007c  7274696f
000080  6e202225
000084  73222066
000088  61696c65
00008c  64206174
000090  206c696e
000094  65202564
000098  20696e20
00009c  25730a00

                          AREA ||i.dhcp_option_byte||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_option_byte PROC
;;;1400   static void
;;;1401   dhcp_option_byte(struct dhcp *dhcp, u8_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;1402   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1403     LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
000006  8aa0              LDRH     r0,[r4,#0x14]
000008  2844              CMP      r0,#0x44
00000a  d306              BCC      |L19.26|
00000c  a306              ADR      r3,|L19.40|
00000e  f240527b          MOV      r2,#0x57b
000012  a113              ADR      r1,|L19.96|
000014  a021              ADR      r0,|L19.156|
000016  f7fffffe          BL       __2printf
                  |L19.26|
;;;1404     dhcp->msg_out->options[dhcp->options_out_len++] = value;
00001a  8aa0              LDRH     r0,[r4,#0x14]
00001c  1c41              ADDS     r1,r0,#1
00001e  82a1              STRH     r1,[r4,#0x14]
000020  6921              LDR      r1,[r4,#0x10]
000022  30f0              ADDS     r0,r0,#0xf0
000024  540d              STRB     r5,[r1,r0]
;;;1405   }
000026  bd70              POP      {r4-r6,pc}
;;;1406   
                          ENDP

                  |L19.40|
000028  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
00002c  6964646c
000030  65776172
000034  65735c54
000038  68697264
00003c  5f506172
000040  74795c4c
000044  7749505c
000048  7372635c
00004c  636f7265
000050  5c697076
000054  345c6468
000058  63702e63          DCB      "cp.c",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0
                  |L19.96|
000060  64686370          DCB      "dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_"
000064  5f6f7074
000068  696f6e5f
00006c  62797465
000070  3a206468
000074  63702d3e
000078  6f707469
00007c  6f6e735f
000080  6f75745f
000084  6c656e20
000088  3c204448
00008c  43505f4f
000090  5054494f
000094  4e535f  
000097  4c454e00          DCB      "LEN",0
00009b  00                DCB      0
                  |L19.156|
00009c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000a0  7274696f
0000a4  6e202225
0000a8  73222066
0000ac  61696c65
0000b0  64206174
0000b4  206c696e
0000b8  65202564
0000bc  20696e20
0000c0  25730a00

                          AREA ||i.dhcp_option_long||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_option_long PROC
;;;1415   static void
;;;1416   dhcp_option_long(struct dhcp *dhcp, u32_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;1417   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1418     LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
000006  8aa0              LDRH     r0,[r4,#0x14]
000008  1d00              ADDS     r0,r0,#4
00000a  2844              CMP      r0,#0x44
00000c  d906              BLS      |L20.28|
00000e  a311              ADR      r3,|L20.84|
000010  f240528a          MOV      r2,#0x58a
000014  a11d              ADR      r1,|L20.140|
000016  a02d              ADR      r0,|L20.204|
000018  f7fffffe          BL       __2printf
                  |L20.28|
;;;1419     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
00001c  8aa0              LDRH     r0,[r4,#0x14]
00001e  0e2a              LSRS     r2,r5,#24
000020  1c41              ADDS     r1,r0,#1
000022  82a1              STRH     r1,[r4,#0x14]
000024  6921              LDR      r1,[r4,#0x10]
000026  30f0              ADDS     r0,r0,#0xf0
000028  540a              STRB     r2,[r1,r0]
;;;1420     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
00002a  8aa0              LDRH     r0,[r4,#0x14]
00002c  0c2a              LSRS     r2,r5,#16
00002e  1c41              ADDS     r1,r0,#1
000030  82a1              STRH     r1,[r4,#0x14]
000032  6921              LDR      r1,[r4,#0x10]
000034  30f0              ADDS     r0,r0,#0xf0
000036  540a              STRB     r2,[r1,r0]
;;;1421     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
000038  8aa0              LDRH     r0,[r4,#0x14]
00003a  0a2a              LSRS     r2,r5,#8
00003c  1c41              ADDS     r1,r0,#1
00003e  82a1              STRH     r1,[r4,#0x14]
000040  6921              LDR      r1,[r4,#0x10]
000042  30f0              ADDS     r0,r0,#0xf0
000044  540a              STRB     r2,[r1,r0]
;;;1422     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
000046  8aa0              LDRH     r0,[r4,#0x14]
000048  1c41              ADDS     r1,r0,#1
00004a  82a1              STRH     r1,[r4,#0x14]
00004c  6921              LDR      r1,[r4,#0x10]
00004e  30f0              ADDS     r0,r0,#0xf0
000050  540d              STRB     r5,[r1,r0]
;;;1423   }
000052  bd70              POP      {r4-r6,pc}
;;;1424   
                          ENDP

                  |L20.84|
000054  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
000058  6964646c
00005c  65776172
000060  65735c54
000064  68697264
000068  5f506172
00006c  74795c4c
000070  7749505c
000074  7372635c
000078  636f7265
00007c  5c697076
000080  345c6468
000084  63702e63          DCB      "cp.c",0
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L20.140|
00008c  64686370          DCB      "dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPT"
000090  5f6f7074
000094  696f6e5f
000098  6c6f6e67
00009c  3a206468
0000a0  63702d3e
0000a4  6f707469
0000a8  6f6e735f
0000ac  6f75745f
0000b0  6c656e20
0000b4  2b203420
0000b8  3c3d2044
0000bc  4843505f
0000c0  4f5054  
0000c3  494f4e53          DCB      "IONS_LEN",0
0000c7  5f4c454e
0000cb  00      
                  |L20.204|
0000cc  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000d0  7274696f
0000d4  6e202225
0000d8  73222066
0000dc  61696c65
0000e0  64206174
0000e4  206c696e
0000e8  65202564
0000ec  20696e20
0000f0  25730a00

                          AREA ||i.dhcp_option_short||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_option_short PROC
;;;1407   static void
;;;1408   dhcp_option_short(struct dhcp *dhcp, u16_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;1409   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1410     LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
000006  8aa0              LDRH     r0,[r4,#0x14]
000008  1c80              ADDS     r0,r0,#2
00000a  2844              CMP      r0,#0x44
00000c  d906              BLS      |L21.28|
00000e  a30a              ADR      r3,|L21.56|
000010  f2405282          MOV      r2,#0x582
000014  4916              LDR      r1,|L21.112|
000016  a017              ADR      r0,|L21.116|
000018  f7fffffe          BL       __2printf
                  |L21.28|
;;;1411     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
00001c  8aa0              LDRH     r0,[r4,#0x14]
00001e  0a2a              LSRS     r2,r5,#8
000020  1c41              ADDS     r1,r0,#1
000022  82a1              STRH     r1,[r4,#0x14]
000024  6921              LDR      r1,[r4,#0x10]
000026  30f0              ADDS     r0,r0,#0xf0
000028  540a              STRB     r2,[r1,r0]
;;;1412     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
00002a  8aa0              LDRH     r0,[r4,#0x14]
00002c  1c41              ADDS     r1,r0,#1
00002e  82a1              STRH     r1,[r4,#0x14]
000030  6921              LDR      r1,[r4,#0x10]
000032  30f0              ADDS     r0,r0,#0xf0
000034  540d              STRB     r5,[r1,r0]
;;;1413   }
000036  bd70              POP      {r4-r6,pc}
;;;1414   
                          ENDP

                  |L21.56|
000038  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
00003c  6964646c
000040  65776172
000044  65735c54
000048  68697264
00004c  5f506172
000050  74795c4c
000054  7749505c
000058  7372635c
00005c  636f7265
000060  5c697076
000064  345c6468
000068  63702e63          DCB      "cp.c",0
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
                  |L21.112|
                          DCD      ||.conststring||+0x48
                  |L21.116|
000074  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000078  7274696f
00007c  6e202225
000080  73222066
000084  61696c65
000088  64206174
00008c  206c696e
000090  65202564
000094  20696e20
000098  25730a00

                          AREA ||i.dhcp_option_trailer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_option_trailer PROC
;;;1919   static void
;;;1920   dhcp_option_trailer(struct dhcp *dhcp)
000000  b510              PUSH     {r4,lr}
;;;1921   {
000002  4604              MOV      r4,r0
;;;1922     LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
000004  2c00              CMP      r4,#0
000006  d003              BEQ      |L22.16|
;;;1923     LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
000008  6920              LDR      r0,[r4,#0x10]
00000a  2800              CMP      r0,#0
00000c  d009              BEQ      |L22.34|
00000e  e00f              B        |L22.48|
                  |L22.16|
000010  e8bd4010          POP      {r4,lr}               ;1922
000014  a316              ADR      r3,|L22.112|
000016  f2407282          MOV      r2,#0x782             ;1922
00001a  a123              ADR      r1,|L22.168|
00001c  a02b              ADR      r0,|L22.204|
00001e  f7ffbffe          B.W      __2printf
                  |L22.34|
000022  a313              ADR      r3,|L22.112|
000024  f2407283          MOV      r2,#0x783
000028  a132              ADR      r1,|L22.244|
00002a  a028              ADR      r0,|L22.204|
00002c  f7fffffe          BL       __2printf
                  |L22.48|
;;;1924     LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
000030  8aa0              LDRH     r0,[r4,#0x14]
000032  2844              CMP      r0,#0x44
000034  d306              BCC      |L22.68|
000036  a30e              ADR      r3,|L22.112|
000038  f2407284          MOV      r2,#0x784
00003c  a138              ADR      r1,|L22.288|
00003e  a023              ADR      r0,|L22.204|
000040  f7fffffe          BL       __2printf
                  |L22.68|
;;;1925     dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
000044  8aa0              LDRH     r0,[r4,#0x14]
000046  22ff              MOVS     r2,#0xff
000048  1c41              ADDS     r1,r0,#1
00004a  82a1              STRH     r1,[r4,#0x14]
00004c  6921              LDR      r1,[r4,#0x10]
00004e  30f0              ADDS     r0,r0,#0xf0
000050  540a              STRB     r2,[r1,r0]
;;;1926     /* packet is too small, or not 4 byte aligned? */
;;;1927     while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
000052  2200              MOVS     r2,#0
000054  e004              B        |L22.96|
                  |L22.86|
;;;1928            (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
;;;1929       /* add a fill/padding byte */
;;;1930       dhcp->msg_out->options[dhcp->options_out_len++] = 0;
000056  1c41              ADDS     r1,r0,#1
000058  82a1              STRH     r1,[r4,#0x14]
00005a  6921              LDR      r1,[r4,#0x10]
00005c  30f0              ADDS     r0,r0,#0xf0
00005e  540a              STRB     r2,[r1,r0]
                  |L22.96|
000060  8aa0              LDRH     r0,[r4,#0x14]         ;1927
000062  2844              CMP      r0,#0x44              ;1927
000064  d301              BCC      |L22.106|
000066  0781              LSLS     r1,r0,#30             ;1927
000068  d001              BEQ      |L22.110|
                  |L22.106|
00006a  2844              CMP      r0,#0x44              ;1928
00006c  d3f3              BCC      |L22.86|
                  |L22.110|
;;;1931     }
;;;1932   }
00006e  bd10              POP      {r4,pc}
;;;1933   
                          ENDP

                  |L22.112|
000070  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
000074  6964646c
000078  65776172
00007c  65735c54
000080  68697264
000084  5f506172
000088  74795c4c
00008c  7749505c
000090  7372635c
000094  636f7265
000098  5c697076
00009c  345c6468
0000a0  63702e63          DCB      "cp.c",0
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L22.168|
0000a8  64686370          DCB      "dhcp_option_trailer: dhcp != NULL",0
0000ac  5f6f7074
0000b0  696f6e5f
0000b4  74726169
0000b8  6c65723a
0000bc  20646863
0000c0  7020213d
0000c4  204e554c
0000c8  4c00    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L22.204|
0000cc  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000d0  7274696f
0000d4  6e202225
0000d8  73222066
0000dc  61696c65
0000e0  64206174
0000e4  206c696e
0000e8  65202564
0000ec  20696e20
0000f0  25730a00
                  |L22.244|
0000f4  64686370          DCB      "dhcp_option_trailer: dhcp->msg_out != NULL\n",0
0000f8  5f6f7074
0000fc  696f6e5f
000100  74726169
000104  6c65723a
000108  20646863
00010c  702d3e6d
000110  73675f6f
000114  75742021
000118  3d204e55
00011c  4c4c0a00
                  |L22.288|
000120  64686370          DCB      "dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIO"
000124  5f6f7074
000128  696f6e5f
00012c  74726169
000130  6c65723a
000134  20646863
000138  702d3e6f
00013c  7074696f
000140  6e735f6f
000144  75745f6c
000148  656e203c
00014c  20444843
000150  505f4f50
000154  54494f  
000157  4e535f4c          DCB      "NS_LEN\n",0
00015b  454e0a00
00015f  00                DCB      0

                          AREA ||i.dhcp_parse_reply||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_parse_reply PROC
;;;1459   static err_t
;;;1460   dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1461   {
000004  b085              SUB      sp,sp,#0x14
;;;1462     u8_t *options;
;;;1463     u16_t offset;
;;;1464     u16_t offset_max;
;;;1465     u16_t options_idx;
;;;1466     u16_t options_idx_max;
;;;1467     struct pbuf *q;
;;;1468     int parse_file_as_options = 0;
000006  2100              MOVS     r1,#0
000008  9104              STR      r1,[sp,#0x10]
;;;1469     int parse_sname_as_options = 0;
00000a  9103              STR      r1,[sp,#0xc]
;;;1470   
;;;1471     /* clear received options */
;;;1472     dhcp_clear_all_options(dhcp);
00000c  4ac9              LDR      r2,|L23.820|
00000e  60d1              STR      r1,[r2,#0xc]  ; dhcp_rx_options_given
000010  6111              STR      r1,[r2,#0x10]  ; dhcp_rx_options_given
;;;1473     /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
;;;1474     if (p->len < DHCP_SNAME_OFS) {
000012  9906              LDR      r1,[sp,#0x18]
000014  8949              LDRH     r1,[r1,#0xa]
000016  292c              CMP      r1,#0x2c
000018  d204              BCS      |L23.36|
;;;1475       return ERR_BUF;
00001a  f06f0001          MVN      r0,#1
                  |L23.30|
;;;1476     }
;;;1477     dhcp->msg_in = (struct dhcp_msg *)p->payload;
;;;1478   #if LWIP_DHCP_BOOTP_FILE
;;;1479     /* clear boot file name */
;;;1480     dhcp->boot_file_name[0] = 0;
;;;1481   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1482   
;;;1483     /* parse options */
;;;1484   
;;;1485     /* start with options field */
;;;1486     options_idx = DHCP_OPTIONS_OFS;
;;;1487     /* parse options to the end of the received packet */
;;;1488     options_idx_max = p->tot_len;
;;;1489   again:
;;;1490     q = p;
;;;1491     while ((q != NULL) && (options_idx >= q->len)) {
;;;1492       options_idx -= q->len;
;;;1493       options_idx_max -= q->len;
;;;1494       q = q->next;
;;;1495     }
;;;1496     if (q == NULL) {
;;;1497       return ERR_BUF;
;;;1498     }
;;;1499     offset = options_idx;
;;;1500     offset_max = options_idx_max;
;;;1501     options = (u8_t*)q->payload;
;;;1502     /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
;;;1503     while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
;;;1504       u8_t op = options[offset];
;;;1505       u8_t len;
;;;1506       u8_t decode_len = 0;
;;;1507       int decode_idx = -1;
;;;1508       u16_t val_offset = offset + 2;
;;;1509       /* len byte might be in the next pbuf */
;;;1510       if ((offset + 1) < q->len) {
;;;1511         len = options[offset + 1];
;;;1512       } else {
;;;1513         len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
;;;1514       }
;;;1515       /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
;;;1516       decode_len = len;
;;;1517       switch(op) {
;;;1518         /* case(DHCP_OPTION_END): handled above */
;;;1519         case(DHCP_OPTION_PAD):
;;;1520           /* special option: no len encoded */
;;;1521           decode_len = len = 0;
;;;1522           /* will be increased below */
;;;1523           offset--;
;;;1524           break;
;;;1525         case(DHCP_OPTION_SUBNET_MASK):
;;;1526           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1527           decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
;;;1528           break;
;;;1529         case(DHCP_OPTION_ROUTER):
;;;1530           decode_len = 4; /* only copy the first given router */
;;;1531           LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
;;;1532           decode_idx = DHCP_OPTION_IDX_ROUTER;
;;;1533           break;
;;;1534   #if LWIP_DHCP_PROVIDE_DNS_SERVERS
;;;1535         case(DHCP_OPTION_DNS_SERVER):
;;;1536           /* special case: there might be more than one server */
;;;1537           LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
;;;1538           /* limit number of DNS servers */
;;;1539           decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
;;;1540           LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
;;;1541           decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
;;;1542           break;
;;;1543   #endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
;;;1544         case(DHCP_OPTION_LEASE_TIME):
;;;1545           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1546           decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
;;;1547           break;
;;;1548   #if LWIP_DHCP_GET_NTP_SRV
;;;1549         case(DHCP_OPTION_NTP):
;;;1550           /* special case: there might be more than one server */
;;;1551           LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
;;;1552           /* limit number of NTP servers */
;;;1553           decode_len = LWIP_MIN(len, 4 * LWIP_DHCP_MAX_NTP_SERVERS);
;;;1554           LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
;;;1555           decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
;;;1556           break;
;;;1557   #endif /* LWIP_DHCP_GET_NTP_SRV*/
;;;1558         case(DHCP_OPTION_OVERLOAD):
;;;1559           LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
;;;1560           /* decode overload only in options, not in file/sname: invalid packet */
;;;1561           LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
;;;1562           decode_idx = DHCP_OPTION_IDX_OVERLOAD;
;;;1563           break;
;;;1564         case(DHCP_OPTION_MESSAGE_TYPE):
;;;1565           LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
;;;1566           decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
;;;1567           break;
;;;1568         case(DHCP_OPTION_SERVER_ID):
;;;1569           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1570           decode_idx = DHCP_OPTION_IDX_SERVER_ID;
;;;1571           break;
;;;1572         case(DHCP_OPTION_T1):
;;;1573           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1574           decode_idx = DHCP_OPTION_IDX_T1;
;;;1575           break;
;;;1576         case(DHCP_OPTION_T2):
;;;1577           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1578           decode_idx = DHCP_OPTION_IDX_T2;
;;;1579           break;
;;;1580         default:
;;;1581           decode_len = 0;
;;;1582           LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
;;;1583           break;
;;;1584       }
;;;1585       offset += len + 2;
;;;1586       if (decode_len > 0) {
;;;1587         u32_t value = 0;
;;;1588         u16_t copy_len;
;;;1589   decode_next:
;;;1590         LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
;;;1591         if (!dhcp_option_given(dhcp, decode_idx)) {
;;;1592           copy_len = LWIP_MIN(decode_len, 4);
;;;1593           if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
;;;1594             return ERR_BUF;
;;;1595           }
;;;1596           if (decode_len > 4) {
;;;1597             /* decode more than one u32_t */
;;;1598             LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
;;;1599             dhcp_got_option(dhcp, decode_idx);
;;;1600             dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
;;;1601             decode_len -= 4;
;;;1602             val_offset += 4;
;;;1603             decode_idx++;
;;;1604             goto decode_next;
;;;1605           } else if (decode_len == 4) {
;;;1606             value = lwip_ntohl(value);
;;;1607           } else {
;;;1608             LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
;;;1609             value = ((u8_t*)&value)[0];
;;;1610           }
;;;1611           dhcp_got_option(dhcp, decode_idx);
;;;1612           dhcp_set_option_value(dhcp, decode_idx, value);
;;;1613         }
;;;1614       }
;;;1615       if (offset >= q->len) {
;;;1616         offset -= q->len;
;;;1617         offset_max -= q->len;
;;;1618         if ((offset < offset_max) && offset_max) {
;;;1619           q = q->next;
;;;1620           LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
;;;1621           options = (u8_t*)q->payload;
;;;1622         } else {
;;;1623           /* We've run out of bytes, probably no end marker. Don't proceed. */
;;;1624           break;
;;;1625         }
;;;1626       }
;;;1627     }
;;;1628     /* is this an overloaded message? */
;;;1629     if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
;;;1630       u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
;;;1631       dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
;;;1632       if (overload == DHCP_OVERLOAD_FILE) {
;;;1633         parse_file_as_options = 1;
;;;1634         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
;;;1635       } else if (overload == DHCP_OVERLOAD_SNAME) {
;;;1636         parse_sname_as_options = 1;
;;;1637         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
;;;1638       } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
;;;1639         parse_sname_as_options = 1;
;;;1640         parse_file_as_options = 1;
;;;1641         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
;;;1642       } else {
;;;1643         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
;;;1644       }
;;;1645   #if LWIP_DHCP_BOOTP_FILE
;;;1646       if (!parse_file_as_options) {
;;;1647         /* only do this for ACK messages */
;;;1648         if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) &&
;;;1649           (dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) == DHCP_ACK))
;;;1650         /* copy bootp file name, don't care for sname (server hostname) */
;;;1651         if (pbuf_copy_partial(p, dhcp->boot_file_name, DHCP_FILE_LEN-1, DHCP_FILE_OFS) != (DHCP_FILE_LEN-1)) {
;;;1652           return ERR_BUF;
;;;1653         }
;;;1654         /* make sure the string is really NULL-terminated */
;;;1655         dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
;;;1656       }
;;;1657   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1658     }
;;;1659     if (parse_file_as_options) {
;;;1660       /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
;;;1661       parse_file_as_options = 0;
;;;1662       options_idx = DHCP_FILE_OFS;
;;;1663       options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
;;;1664       goto again;
;;;1665     } else if (parse_sname_as_options) {
;;;1666       parse_sname_as_options = 0;
;;;1667       options_idx = DHCP_SNAME_OFS;
;;;1668       options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
;;;1669       goto again;
;;;1670     }
;;;1671     return ERR_OK;
;;;1672   }
00001e  b007              ADD      sp,sp,#0x1c
000020  e8bd8ff0          POP      {r4-r11,pc}
                  |L23.36|
000024  9906              LDR      r1,[sp,#0x18]         ;1477
000026  6849              LDR      r1,[r1,#4]            ;1477
000028  6041              STR      r1,[r0,#4]            ;1477
00002a  f04f08f0          MOV      r8,#0xf0              ;1486
00002e  9806              LDR      r0,[sp,#0x18]         ;1488
000030  f8b09008          LDRH     r9,[r0,#8]            ;1488
                  |L23.52|
000034  9e06              LDR      r6,[sp,#0x18]         ;1490
000036  e008              B        |L23.74|
                  |L23.56|
000038  eba80100          SUB      r1,r8,r0              ;1492
00003c  fa1ff881          UXTH     r8,r1                 ;1492
000040  eba90000          SUB      r0,r9,r0              ;1493
000044  fa1ff980          UXTH     r9,r0                 ;1493
000048  6836              LDR      r6,[r6,#0]            ;1494
                  |L23.74|
00004a  b116              CBZ      r6,|L23.82|
00004c  8970              LDRH     r0,[r6,#0xa]          ;1491
00004e  4540              CMP      r0,r8                 ;1491
000050  d9f2              BLS      |L23.56|
                  |L23.82|
000052  b11e              CBZ      r6,|L23.92|
000054  4647              MOV      r7,r8                 ;1499
000056  f8d6b004          LDR      r11,[r6,#4]           ;1501
00005a  e12c              B        |L23.694|
                  |L23.92|
00005c  f06f0001          MVN      r0,#1                 ;1497
000060  e7dd              B        |L23.30|
                  |L23.98|
000062  f04f34ff          MOV      r4,#0xffffffff        ;1507
000066  1cb8              ADDS     r0,r7,#2              ;1508
000068  fa1ffa80          UXTH     r10,r0                ;1508
00006c  8972              LDRH     r2,[r6,#0xa]          ;1510
00006e  1c78              ADDS     r0,r7,#1              ;1510
000070  4282              CMP      r2,r0                 ;1510
000072  d903              BLS      |L23.124|
000074  eb0b0007          ADD      r0,r11,r7             ;1511
000078  7840              LDRB     r0,[r0,#1]            ;1511
00007a  e005              B        |L23.136|
                  |L23.124|
00007c  6830              LDR      r0,[r6,#0]            ;1513
00007e  b110              CBZ      r0,|L23.134|
000080  6840              LDR      r0,[r0,#4]            ;1513
000082  7800              LDRB     r0,[r0,#0]            ;1513
000084  e000              B        |L23.136|
                  |L23.134|
000086  2000              MOVS     r0,#0                 ;1513
                  |L23.136|
000088  4605              MOV      r5,r0                 ;1516
00008a  2934              CMP      r1,#0x34              ;1517
00008c  d058              BEQ      |L23.320|
00008e  dc08              BGT      |L23.162|
000090  2900              CMP      r1,#0                 ;1517
000092  d025              BEQ      |L23.224|
000094  2901              CMP      r1,#1                 ;1517
000096  d028              BEQ      |L23.234|
000098  2903              CMP      r1,#3                 ;1517
00009a  d034              BEQ      |L23.262|
00009c  2933              CMP      r1,#0x33              ;1517
00009e  d108              BNE      |L23.178|
0000a0  e040              B        |L23.292|
                  |L23.162|
0000a2  2935              CMP      r1,#0x35              ;1517
0000a4  d067              BEQ      |L23.374|
0000a6  2936              CMP      r1,#0x36              ;1517
0000a8  d076              BEQ      |L23.408|
0000aa  293a              CMP      r1,#0x3a              ;1517
0000ac  d070              BEQ      |L23.400|
0000ae  293b              CMP      r1,#0x3b              ;1517
0000b0  d06f              BEQ      |L23.402|
                  |L23.178|
0000b2  2500              MOVS     r5,#0                 ;1581
                  |L23.180|
0000b4  4438              ADD      r0,r0,r7              ;1585
0000b6  1c80              ADDS     r0,r0,#2              ;1585
0000b8  b287              UXTH     r7,r0                 ;1585
0000ba  2d00              CMP      r5,#0                 ;1586
0000bc  d00f              BEQ      |L23.222|
0000be  2000              MOVS     r0,#0                 ;1587
0000c0  9002              STR      r0,[sp,#8]            ;1587
                  |L23.194|
0000c2  2c08              CMP      r4,#8                 ;1590
0000c4  d306              BCC      |L23.212|
0000c6  a39c              ADR      r3,|L23.824|
0000c8  f2406236          MOV      r2,#0x636             ;1590
0000cc  a1a8              ADR      r1,|L23.880|
0000ce  a0ad              ADR      r0,|L23.900|
0000d0  f7fffffe          BL       __2printf
                  |L23.212|
0000d4  4897              LDR      r0,|L23.820|
0000d6  300c              ADDS     r0,r0,#0xc            ;1591
0000d8  5d00              LDRB     r0,[r0,r4]            ;1591
0000da  2800              CMP      r0,#0                 ;1591
0000dc  d076              BEQ      |L23.460|
                  |L23.222|
0000de  e0d8              B        |L23.658|
                  |L23.224|
0000e0  2000              MOVS     r0,#0                 ;1521
0000e2  4605              MOV      r5,r0                 ;1521
0000e4  1e7f              SUBS     r7,r7,#1              ;1523
0000e6  b2bf              UXTH     r7,r7                 ;1523
0000e8  e7e4              B        |L23.180|
                  |L23.234|
0000ea  2804              CMP      r0,#4                 ;1526
0000ec  d009              BEQ      |L23.258|
0000ee  a392              ADR      r3,|L23.824|
0000f0  f24052f6          MOV      r2,#0x5f6             ;1526
0000f4  a1ad              ADR      r1,|L23.940|
0000f6  a0a3              ADR      r0,|L23.900|
0000f8  f7fffffe          BL       __2printf
0000fc  f06f0005          MVN      r0,#5                 ;1526
000100  e78d              B        |L23.30|
                  |L23.258|
000102  2406              MOVS     r4,#6                 ;1527
000104  e7d6              B        |L23.180|
                  |L23.262|
000106  2504              MOVS     r5,#4                 ;1530
000108  2804              CMP      r0,#4                 ;1531
00010a  d209              BCS      |L23.288|
00010c  a38a              ADR      r3,|L23.824|
00010e  f24052fb          MOV      r2,#0x5fb             ;1531
000112  a1a9              ADR      r1,|L23.952|
000114  a09b              ADR      r0,|L23.900|
000116  f7fffffe          BL       __2printf
00011a  f06f0005          MVN      r0,#5                 ;1531
00011e  e77e              B        |L23.30|
                  |L23.288|
000120  2407              MOVS     r4,#7                 ;1532
000122  e7c7              B        |L23.180|
                  |L23.292|
000124  2804              CMP      r0,#4                 ;1545
000126  d009              BEQ      |L23.316|
000128  a383              ADR      r3,|L23.824|
00012a  f2406209          MOV      r2,#0x609             ;1545
00012e  a19f              ADR      r1,|L23.940|
000130  a094              ADR      r0,|L23.900|
000132  f7fffffe          BL       __2printf
000136  f06f0005          MVN      r0,#5                 ;1545
00013a  e770              B        |L23.30|
                  |L23.316|
00013c  2403              MOVS     r4,#3                 ;1546
00013e  e7b9              B        |L23.180|
                  |L23.320|
000140  2801              CMP      r0,#1                 ;1559
000142  d009              BEQ      |L23.344|
000144  a37c              ADR      r3,|L23.824|
000146  f2406217          MOV      r2,#0x617             ;1559
00014a  a1a0              ADR      r1,|L23.972|
00014c  a08d              ADR      r0,|L23.900|
00014e  f7fffffe          BL       __2printf
000152  f06f0005          MVN      r0,#5                 ;1559
000156  e762              B        |L23.30|
                  |L23.344|
000158  f1b80ff0          CMP      r8,#0xf0              ;1561
00015c  d009              BEQ      |L23.370|
00015e  a376              ADR      r3,|L23.824|
000160  f2406219          MOV      r2,#0x619             ;1561
000164  a19c              ADR      r1,|L23.984|
000166  a087              ADR      r0,|L23.900|
000168  f7fffffe          BL       __2printf
00016c  f06f0005          MVN      r0,#5                 ;1561
000170  e755              B        |L23.30|
                  |L23.370|
000172  2400              MOVS     r4,#0                 ;1562
000174  e79e              B        |L23.180|
                  |L23.374|
000176  2801              CMP      r0,#1                 ;1565
000178  d00c              BEQ      |L23.404|
00017a  a36f              ADR      r3,|L23.824|
00017c  f240621d          MOV      r2,#0x61d             ;1565
000180  a192              ADR      r1,|L23.972|
000182  a080              ADR      r0,|L23.900|
000184  f7fffffe          BL       __2printf
000188  f06f0005          MVN      r0,#5                 ;1565
00018c  e747              B        |L23.30|
00018e  e003              B        |L23.408|
                  |L23.400|
000190  e010              B        |L23.436|
                  |L23.402|
000192  e01e              B        |L23.466|
                  |L23.404|
000194  2401              MOVS     r4,#1                 ;1566
000196  e78d              B        |L23.180|
                  |L23.408|
000198  2804              CMP      r0,#4                 ;1569
00019a  d009              BEQ      |L23.432|
00019c  a366              ADR      r3,|L23.824|
00019e  f2406221          MOV      r2,#0x621             ;1569
0001a2  a182              ADR      r1,|L23.940|
0001a4  a077              ADR      r0,|L23.900|
0001a6  f7fffffe          BL       __2printf
0001aa  f06f0005          MVN      r0,#5                 ;1569
0001ae  e736              B        |L23.30|
                  |L23.432|
0001b0  2402              MOVS     r4,#2                 ;1570
0001b2  e77f              B        |L23.180|
                  |L23.436|
0001b4  2804              CMP      r0,#4                 ;1573
0001b6  d00a              BEQ      |L23.462|
0001b8  a35f              ADR      r3,|L23.824|
0001ba  f2406225          MOV      r2,#0x625             ;1573
0001be  a17b              ADR      r1,|L23.940|
0001c0  a070              ADR      r0,|L23.900|
0001c2  f7fffffe          BL       __2printf
0001c6  f06f0005          MVN      r0,#5                 ;1573
0001ca  e728              B        |L23.30|
                  |L23.460|
0001cc  e00f              B        |L23.494|
                  |L23.462|
0001ce  2404              MOVS     r4,#4                 ;1574
0001d0  e770              B        |L23.180|
                  |L23.466|
0001d2  2804              CMP      r0,#4                 ;1577
0001d4  d009              BEQ      |L23.490|
0001d6  a358              ADR      r3,|L23.824|
0001d8  f2406229          MOV      r2,#0x629             ;1577
0001dc  a173              ADR      r1,|L23.940|
0001de  a069              ADR      r0,|L23.900|
0001e0  f7fffffe          BL       __2printf
0001e4  f06f0005          MVN      r0,#5                 ;1577
0001e8  e719              B        |L23.30|
                  |L23.490|
0001ea  2405              MOVS     r4,#5                 ;1578
0001ec  e762              B        |L23.180|
                  |L23.494|
0001ee  2d04              CMP      r5,#4                 ;1592
0001f0  d201              BCS      |L23.502|
0001f2  4628              MOV      r0,r5                 ;1592
0001f4  e000              B        |L23.504|
                  |L23.502|
0001f6  2004              MOVS     r0,#4                 ;1592
                  |L23.504|
0001f8  9001              STR      r0,[sp,#4]            ;1592
0001fa  4653              MOV      r3,r10                ;1593
0001fc  a902              ADD      r1,sp,#8              ;1593
0001fe  4630              MOV      r0,r6                 ;1593
000200  9a01              LDR      r2,[sp,#4]            ;1593
000202  f7fffffe          BL       pbuf_copy_partial
000206  4601              MOV      r1,r0                 ;1593
000208  9801              LDR      r0,[sp,#4]            ;1593
00020a  4281              CMP      r1,r0                 ;1593
00020c  d002              BEQ      |L23.532|
00020e  f06f0001          MVN      r0,#1                 ;1594
000212  e704              B        |L23.30|
                  |L23.532|
000214  2d04              CMP      r5,#4                 ;1596
000216  d91e              BLS      |L23.598|
000218  07a8              LSLS     r0,r5,#30             ;1598
00021a  d009              BEQ      |L23.560|
00021c  a346              ADR      r3,|L23.824|
00021e  f240623e          MOV      r2,#0x63e             ;1598
000222  a173              ADR      r1,|L23.1008|
000224  a057              ADR      r0,|L23.900|
000226  f7fffffe          BL       __2printf
00022a  f06f0005          MVN      r0,#5                 ;1598
00022e  e6f6              B        |L23.30|
                  |L23.560|
000230  4940              LDR      r1,|L23.820|
000232  2001              MOVS     r0,#1                 ;1599
000234  310c              ADDS     r1,r1,#0xc            ;1599
000236  5508              STRB     r0,[r1,r4]            ;1599
000238  9802              LDR      r0,[sp,#8]            ;1600
00023a  f7fffffe          BL       lwip_htonl
00023e  4601              MOV      r1,r0                 ;1600
000240  4871              LDR      r0,|L23.1032|
000242  f8401024          STR      r1,[r0,r4,LSL #2]     ;1600
000246  1f2d              SUBS     r5,r5,#4              ;1601
000248  b2ed              UXTB     r5,r5                 ;1601
00024a  f10a0a04          ADD      r10,r10,#4            ;1602
00024e  fa1ffa8a          UXTH     r10,r10               ;1602
000252  1c64              ADDS     r4,r4,#1              ;1603
000254  e735              B        |L23.194|
                  |L23.598|
000256  2d04              CMP      r5,#4                 ;1605
000258  d00b              BEQ      |L23.626|
00025a  2d01              CMP      r5,#1                 ;1608
00025c  d00e              BEQ      |L23.636|
00025e  a336              ADR      r3,|L23.824|
000260  f44f62c9          MOV      r2,#0x648             ;1608
000264  a169              ADR      r1,|L23.1036|
000266  a047              ADR      r0,|L23.900|
000268  f7fffffe          BL       __2printf
00026c  f06f0005          MVN      r0,#5                 ;1608
000270  e6d5              B        |L23.30|
                  |L23.626|
000272  9802              LDR      r0,[sp,#8]            ;1606
000274  f7fffffe          BL       lwip_htonl
000278  9002              STR      r0,[sp,#8]            ;1606
00027a  e002              B        |L23.642|
                  |L23.636|
00027c  f89d0008          LDRB     r0,[sp,#8]            ;1609
000280  9002              STR      r0,[sp,#8]            ;1609
                  |L23.642|
000282  492c              LDR      r1,|L23.820|
000284  2001              MOVS     r0,#1                 ;1611
000286  310c              ADDS     r1,r1,#0xc            ;1611
000288  5508              STRB     r0,[r1,r4]            ;1611
00028a  485f              LDR      r0,|L23.1032|
00028c  9902              LDR      r1,[sp,#8]            ;1612
00028e  f8401024          STR      r1,[r0,r4,LSL #2]     ;1612
                  |L23.658|
000292  8970              LDRH     r0,[r6,#0xa]          ;1615
000294  42b8              CMP      r0,r7                 ;1615
000296  d80e              BHI      |L23.694|
000298  1a39              SUBS     r1,r7,r0              ;1616
00029a  b28f              UXTH     r7,r1                 ;1616
00029c  eba90000          SUB      r0,r9,r0              ;1617
0002a0  fa1ff980          UXTH     r9,r0                 ;1617
0002a4  454f              CMP      r7,r9                 ;1618
0002a6  d20e              BCS      |L23.710|
0002a8  f1b90f00          CMP      r9,#0                 ;1618
0002ac  d00b              BEQ      |L23.710|
0002ae  6836              LDR      r6,[r6,#0]            ;1619
0002b0  b1c6              CBZ      r6,|L23.740|
0002b2  f8d6b004          LDR      r11,[r6,#4]           ;1621
                  |L23.694|
0002b6  b136              CBZ      r6,|L23.710|
0002b8  454f              CMP      r7,r9                 ;1503
0002ba  d204              BCS      |L23.710|
0002bc  f81b1007          LDRB     r1,[r11,r7]           ;1503
0002c0  29ff              CMP      r1,#0xff              ;1503
0002c2  f47faece          BNE      |L23.98|
                  |L23.710|
0002c6  4a1b              LDR      r2,|L23.820|
0002c8  320c              ADDS     r2,r2,#0xc            ;1629
0002ca  7810              LDRB     r0,[r2,#0]            ;1629  ; dhcp_rx_options_given
0002cc  b1e8              CBZ      r0,|L23.778|
0002ce  484e              LDR      r0,|L23.1032|
0002d0  6800              LDR      r0,[r0,#0]            ;1630  ; dhcp_rx_options_val
0002d2  2100              MOVS     r1,#0                 ;1631
0002d4  7011              STRB     r1,[r2,#0]            ;1631
0002d6  2801              CMP      r0,#1                 ;1632
0002d8  d00e              BEQ      |L23.760|
0002da  2802              CMP      r0,#2                 ;1635
0002dc  d00f              BEQ      |L23.766|
0002de  2803              CMP      r0,#3                 ;1638
0002e0  d010              BEQ      |L23.772|
0002e2  e012              B        |L23.778|
                  |L23.740|
0002e4  a314              ADR      r3,|L23.824|
0002e6  f2406254          MOV      r2,#0x654             ;1620
0002ea  a14d              ADR      r1,|L23.1056|
0002ec  a025              ADR      r0,|L23.900|
0002ee  f7fffffe          BL       __2printf
0002f2  f06f0005          MVN      r0,#5                 ;1620
0002f6  e692              B        |L23.30|
                  |L23.760|
0002f8  2001              MOVS     r0,#1                 ;1633
0002fa  9004              STR      r0,[sp,#0x10]         ;1633
0002fc  e005              B        |L23.778|
                  |L23.766|
0002fe  2001              MOVS     r0,#1                 ;1636
000300  9003              STR      r0,[sp,#0xc]          ;1636
000302  e002              B        |L23.778|
                  |L23.772|
000304  2001              MOVS     r0,#1                 ;1639
000306  9003              STR      r0,[sp,#0xc]          ;1639
000308  9004              STR      r0,[sp,#0x10]         ;1640
                  |L23.778|
00030a  9804              LDR      r0,[sp,#0x10]         ;1659
00030c  b130              CBZ      r0,|L23.796|
00030e  2000              MOVS     r0,#0                 ;1661
000310  9004              STR      r0,[sp,#0x10]         ;1661
000312  f04f086c          MOV      r8,#0x6c              ;1662
000316  f04f09ec          MOV      r9,#0xec              ;1663
00031a  e68b              B        |L23.52|
                  |L23.796|
00031c  9803              LDR      r0,[sp,#0xc]          ;1665
00031e  b130              CBZ      r0,|L23.814|
000320  2000              MOVS     r0,#0                 ;1666
000322  9003              STR      r0,[sp,#0xc]          ;1666
000324  f04f082c          MOV      r8,#0x2c              ;1667
000328  f04f096c          MOV      r9,#0x6c              ;1668
00032c  e682              B        |L23.52|
                  |L23.814|
00032e  2000              MOVS     r0,#0                 ;1671
000330  e675              B        |L23.30|
;;;1673   
                          ENDP

000332  0000              DCW      0x0000
                  |L23.820|
                          DCD      ||.data||
                  |L23.824|
000338  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
00033c  6964646c
000340  65776172
000344  65735c54
000348  68697264
00034c  5f506172
000350  74795c4c
000354  7749505c
000358  7372635c
00035c  636f7265
000360  5c697076
000364  345c6468
000368  63702e63          DCB      "cp.c",0
00036c  00      
00036d  00                DCB      0
00036e  00                DCB      0
00036f  00                DCB      0
                  |L23.880|
000370  63686563          DCB      "check decode_idx",0
000374  6b206465
000378  636f6465
00037c  5f696478
000380  00      
000381  00                DCB      0
000382  00                DCB      0
000383  00                DCB      0
                  |L23.900|
000384  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000388  7274696f
00038c  6e202225
000390  73222066
000394  61696c65
000398  64206174
00039c  206c696e
0003a0  65202564
0003a4  20696e20
0003a8  25730a00
                  |L23.940|
0003ac  6c656e20          DCB      "len == 4",0
0003b0  3d3d2034
0003b4  00      
0003b5  00                DCB      0
0003b6  00                DCB      0
0003b7  00                DCB      0
                  |L23.952|
0003b8  6c656e20          DCB      "len >= decode_len",0
0003bc  3e3d2064
0003c0  65636f64
0003c4  655f6c65
0003c8  6e00    
0003ca  00                DCB      0
0003cb  00                DCB      0
                  |L23.972|
0003cc  6c656e20          DCB      "len == 1",0
0003d0  3d3d2031
0003d4  00      
0003d5  00                DCB      0
0003d6  00                DCB      0
0003d7  00                DCB      0
                  |L23.984|
0003d8  6f766572          DCB      "overload in file/sname",0
0003dc  6c6f6164
0003e0  20696e20
0003e4  66696c65
0003e8  2f736e61
0003ec  6d6500  
0003ef  00                DCB      0
                  |L23.1008|
0003f0  6465636f          DCB      "decode_len %% 4 == 0",0
0003f4  64655f6c
0003f8  656e2025
0003fc  25203420
000400  3d3d2030
000404  00      
000405  00                DCB      0
000406  00                DCB      0
000407  00                DCB      0
                  |L23.1032|
                          DCD      ||.bss||
                  |L23.1036|
00040c  696e7661          DCB      "invalid decode_len",0
000410  6c696420
000414  6465636f
000418  64655f6c
00041c  656e00  
00041f  00                DCB      0
                  |L23.1056|
000420  6e657874          DCB      "next pbuf was null",0
000424  20706275
000428  66207761
00042c  73206e75
000430  6c6c00  
000433  00                DCB      0

                          AREA ||i.dhcp_rebind||, CODE, READONLY, ALIGN=2

                  dhcp_rebind PROC
;;;1178   static err_t
;;;1179   dhcp_rebind(struct netif *netif)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1180   {
000004  4607              MOV      r7,r0
;;;1181     struct dhcp *dhcp = netif_dhcp_data(netif);
000006  6abd              LDR      r5,[r7,#0x28]
;;;1182     err_t result;
;;;1183     u16_t msecs;
;;;1184     u8_t i;
;;;1185     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
;;;1186     dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
000008  2104              MOVS     r1,#4
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       dhcp_set_state
;;;1187   
;;;1188     /* create and initialize the DHCP message header */
;;;1189     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000010  2203              MOVS     r2,#3
000012  4629              MOV      r1,r5
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       dhcp_create_msg
00001a  4680              MOV      r8,r0
;;;1190     if (result == ERR_OK) {
00001c  ea5f0008          MOVS     r0,r8
000020  d12c              BNE      |L24.124|
;;;1191       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000022  2202              MOVS     r2,#2
000024  2139              MOVS     r1,#0x39
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       dhcp_option
;;;1192       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
00002c  8df9              LDRH     r1,[r7,#0x2e]
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       dhcp_option_short
;;;1193   
;;;1194       dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
000034  2203              MOVS     r2,#3
000036  2137              MOVS     r1,#0x37
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       dhcp_option
;;;1195       for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
00003e  2400              MOVS     r4,#0
;;;1196         dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
000040  4e1b              LDR      r6,|L24.176|
                  |L24.66|
000042  4628              MOV      r0,r5
000044  5d31              LDRB     r1,[r6,r4]
000046  f7fffffe          BL       dhcp_option_byte
00004a  1c64              ADDS     r4,r4,#1              ;1195
00004c  b2e4              UXTB     r4,r4                 ;1195
00004e  2c03              CMP      r4,#3                 ;1195
000050  d3f7              BCC      |L24.66|
;;;1197       }
;;;1198   
;;;1199   #if LWIP_NETIF_HOSTNAME
;;;1200       dhcp_option_hostname(dhcp, netif);
;;;1201   #endif /* LWIP_NETIF_HOSTNAME */
;;;1202   
;;;1203       dhcp_option_trailer(dhcp);
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       dhcp_option_trailer
;;;1204   
;;;1205       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000058  8aa8              LDRH     r0,[r5,#0x14]
00005a  30f0              ADDS     r0,r0,#0xf0
00005c  b281              UXTH     r1,r0
00005e  68e8              LDR      r0,[r5,#0xc]
000060  f7fffffe          BL       pbuf_realloc
;;;1206   
;;;1207       /* broadcast to server */
;;;1208       udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000064  4812              LDR      r0,|L24.176|
000066  9700              STR      r7,[sp,#0]
000068  1e40              SUBS     r0,r0,#1
00006a  2343              MOVS     r3,#0x43
00006c  4a11              LDR      r2,|L24.180|
00006e  68e9              LDR      r1,[r5,#0xc]
000070  6880              LDR      r0,[r0,#8]  ; dhcp_pcb
000072  f7fffffe          BL       udp_sendto_if
;;;1209       dhcp_delete_msg(dhcp);
000076  4628              MOV      r0,r5
000078  f7fffffe          BL       dhcp_delete_msg
                  |L24.124|
;;;1210       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
;;;1211     } else {
;;;1212       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
;;;1213     }
;;;1214     if (dhcp->tries < 255) {
00007c  7aa8              LDRB     r0,[r5,#0xa]
00007e  28ff              CMP      r0,#0xff
000080  d201              BCS      |L24.134|
;;;1215       dhcp->tries++;
000082  1c40              ADDS     r0,r0,#1
000084  72a8              STRB     r0,[r5,#0xa]
                  |L24.134|
;;;1216     }
;;;1217     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
000086  7aa8              LDRB     r0,[r5,#0xa]
000088  280a              CMP      r0,#0xa
00008a  d203              BCS      |L24.148|
00008c  f44f717a          MOV      r1,#0x3e8
000090  4348              MULS     r0,r1,r0
000092  e001              B        |L24.152|
                  |L24.148|
000094  f2427010          MOV      r0,#0x2710
                  |L24.152|
000098  b280              UXTH     r0,r0
;;;1218     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00009a  f20010f3          ADD      r0,r0,#0x1f3
00009e  f44f71fa          MOV      r1,#0x1f4
0000a2  fbb0f0f1          UDIV     r0,r0,r1
0000a6  82e8              STRH     r0,[r5,#0x16]
;;;1219     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
;;;1220     return result;
0000a8  4640              MOV      r0,r8
;;;1221   }
0000aa  e8bd83f8          POP      {r3-r9,pc}
;;;1222   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L24.176|
                          DCD      ||.data||+0x1
                  |L24.180|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_reboot||, CODE, READONLY, ALIGN=2

                  dhcp_reboot PROC
;;;1228   static err_t
;;;1229   dhcp_reboot(struct netif *netif)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1230   {
000004  4607              MOV      r7,r0
;;;1231     struct dhcp *dhcp = netif_dhcp_data(netif);
000006  6abc              LDR      r4,[r7,#0x28]
;;;1232     err_t result;
;;;1233     u16_t msecs;
;;;1234     u8_t i;
;;;1235     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
;;;1236     dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
000008  2103              MOVS     r1,#3
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       dhcp_set_state
;;;1237   
;;;1238     /* create and initialize the DHCP message header */
;;;1239     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000010  2203              MOVS     r2,#3
000012  4621              MOV      r1,r4
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       dhcp_create_msg
00001a  4680              MOV      r8,r0
;;;1240     if (result == ERR_OK) {
00001c  ea5f0008          MOVS     r0,r8
000020  d139              BNE      |L25.150|
;;;1241       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000022  2202              MOVS     r2,#2
000024  2139              MOVS     r1,#0x39
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       dhcp_option
;;;1242       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
00002c  f44f7110          MOV      r1,#0x240
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       dhcp_option_short
;;;1243   
;;;1244       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
000036  2204              MOVS     r2,#4
000038  2132              MOVS     r1,#0x32
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       dhcp_option
;;;1245       dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
000040  6aa0              LDR      r0,[r4,#0x28]
000042  f7fffffe          BL       lwip_htonl
000046  4601              MOV      r1,r0
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       dhcp_option_long
;;;1246   
;;;1247       dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
00004e  2203              MOVS     r2,#3
000050  2137              MOVS     r1,#0x37
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dhcp_option
;;;1248       for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
000058  2500              MOVS     r5,#0
;;;1249         dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
00005a  4e1b              LDR      r6,|L25.200|
                  |L25.92|
00005c  4620              MOV      r0,r4
00005e  5d71              LDRB     r1,[r6,r5]
000060  f7fffffe          BL       dhcp_option_byte
000064  1c6d              ADDS     r5,r5,#1              ;1248
000066  b2ed              UXTB     r5,r5                 ;1248
000068  2d03              CMP      r5,#3                 ;1248
00006a  d3f7              BCC      |L25.92|
;;;1250       }
;;;1251   
;;;1252       dhcp_option_trailer(dhcp);
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       dhcp_option_trailer
;;;1253   
;;;1254       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000072  8aa0              LDRH     r0,[r4,#0x14]
000074  30f0              ADDS     r0,r0,#0xf0
000076  b281              UXTH     r1,r0
000078  68e0              LDR      r0,[r4,#0xc]
00007a  f7fffffe          BL       pbuf_realloc
;;;1255   
;;;1256       /* broadcast to server */
;;;1257       udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
00007e  4812              LDR      r0,|L25.200|
000080  9700              STR      r7,[sp,#0]
000082  1e40              SUBS     r0,r0,#1
000084  2343              MOVS     r3,#0x43
000086  4a11              LDR      r2,|L25.204|
000088  68e1              LDR      r1,[r4,#0xc]
00008a  6880              LDR      r0,[r0,#8]  ; dhcp_pcb
00008c  f7fffffe          BL       udp_sendto_if
;;;1258       dhcp_delete_msg(dhcp);
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       dhcp_delete_msg
                  |L25.150|
;;;1259       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
;;;1260     } else {
;;;1261       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
;;;1262     }
;;;1263     if (dhcp->tries < 255) {
000096  7aa0              LDRB     r0,[r4,#0xa]
000098  28ff              CMP      r0,#0xff
00009a  d201              BCS      |L25.160|
;;;1264       dhcp->tries++;
00009c  1c40              ADDS     r0,r0,#1
00009e  72a0              STRB     r0,[r4,#0xa]
                  |L25.160|
;;;1265     }
;;;1266     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
0000a0  7aa0              LDRB     r0,[r4,#0xa]
0000a2  280a              CMP      r0,#0xa
0000a4  d203              BCS      |L25.174|
0000a6  f44f717a          MOV      r1,#0x3e8
0000aa  4348              MULS     r0,r1,r0
0000ac  e001              B        |L25.178|
                  |L25.174|
0000ae  f2427010          MOV      r0,#0x2710
                  |L25.178|
0000b2  b280              UXTH     r0,r0
;;;1267     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000b4  f20010f3          ADD      r0,r0,#0x1f3
0000b8  f44f71fa          MOV      r1,#0x1f4
0000bc  fbb0f0f1          UDIV     r0,r0,r1
0000c0  82e0              STRH     r0,[r4,#0x16]
;;;1268     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
;;;1269     return result;
0000c2  4640              MOV      r0,r8
;;;1270   }
0000c4  e8bd83f8          POP      {r3-r9,pc}
;;;1271   
                          ENDP

                  |L25.200|
                          DCD      ||.data||+0x1
                  |L25.204|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_recv||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_recv PROC
;;;1677   static void
;;;1678   dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1679   {
000004  4617              MOV      r7,r2
;;;1680     struct netif *netif = ip_current_input_netif();
000006  4840              LDR      r0,|L26.264|
000008  6845              LDR      r5,[r0,#4]  ; ip_data
;;;1681     struct dhcp *dhcp = netif_dhcp_data(netif);
00000a  6aac              LDR      r4,[r5,#0x28]
;;;1682     struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
00000c  687e              LDR      r6,[r7,#4]
;;;1683     u8_t msg_type;
;;;1684     u8_t i;
;;;1685   
;;;1686     LWIP_UNUSED_ARG(arg);
;;;1687   
;;;1688     /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
;;;1689     if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
00000e  f04f0800          MOV      r8,#0
000012  2c00              CMP      r4,#0
000014  d070              BEQ      |L26.248|
000016  7a20              LDRB     r0,[r4,#8]
000018  2800              CMP      r0,#0
00001a  d06d              BEQ      |L26.248|
;;;1690       goto free_pbuf_and_return;
;;;1691     }
;;;1692   
;;;1693     LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));
;;;1694   
;;;1695     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void*)p,
;;;1696       ip4_addr1_16(ip_2_ip4(addr)), ip4_addr2_16(ip_2_ip4(addr)), ip4_addr3_16(ip_2_ip4(addr)), ip4_addr4_16(ip_2_ip4(addr)), port));
;;;1697     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
;;;1698     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
;;;1699     /* prevent warnings about unused arguments */
;;;1700     LWIP_UNUSED_ARG(pcb);
;;;1701     LWIP_UNUSED_ARG(addr);
;;;1702     LWIP_UNUSED_ARG(port);
;;;1703   
;;;1704     LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
00001c  6860              LDR      r0,[r4,#4]
00001e  b130              CBZ      r0,|L26.46|
000020  a33a              ADR      r3,|L26.268|
000022  f44f62d5          MOV      r2,#0x6a8
000026  a147              ADR      r1,|L26.324|
000028  a04b              ADR      r0,|L26.344|
00002a  f7fffffe          BL       __2printf
                  |L26.46|
;;;1705   
;;;1706     if (p->len < DHCP_MIN_REPLY_LEN) {
00002e  8978              LDRH     r0,[r7,#0xa]
000030  282c              CMP      r0,#0x2c
000032  d361              BCC      |L26.248|
;;;1707       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
;;;1708       goto free_pbuf_and_return;
;;;1709     }
;;;1710   
;;;1711     if (reply_msg->op != DHCP_BOOTREPLY) {
000034  7830              LDRB     r0,[r6,#0]
000036  2802              CMP      r0,#2
000038  d15e              BNE      |L26.248|
;;;1712       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
;;;1713       goto free_pbuf_and_return;
;;;1714     }
;;;1715     /* iterate through hardware address and match against DHCP message */
;;;1716     for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
00003a  2000              MOVS     r0,#0
00003c  f8951030          LDRB     r1,[r5,#0x30]
000040  e001              B        |L26.70|
                  |L26.66|
000042  1c40              ADDS     r0,r0,#1
000044  b2c0              UXTB     r0,r0
                  |L26.70|
000046  4281              CMP      r1,r0
000048  d909              BLS      |L26.94|
00004a  2806              CMP      r0,#6
00004c  d207              BCS      |L26.94|
;;;1717       if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
00004e  182a              ADDS     r2,r5,r0
000050  1833              ADDS     r3,r6,r0
000052  f8922031          LDRB     r2,[r2,#0x31]
000056  7f1b              LDRB     r3,[r3,#0x1c]
000058  429a              CMP      r2,r3
00005a  d14d              BNE      |L26.248|
00005c  e7f1              B        |L26.66|
                  |L26.94|
;;;1718         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
;;;1719           ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
;;;1720           (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
;;;1721         goto free_pbuf_and_return;
;;;1722       }
;;;1723     }
;;;1724     /* match transaction ID against what we expected */
;;;1725     if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
00005e  6870              LDR      r0,[r6,#4]
000060  f7fffffe          BL       lwip_htonl
000064  6821              LDR      r1,[r4,#0]
000066  4288              CMP      r0,r1
000068  d146              BNE      |L26.248|
;;;1726       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
;;;1727         ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
;;;1728       goto free_pbuf_and_return;
;;;1729     }
;;;1730     /* option fields could be unfold? */
;;;1731     if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
00006a  4639              MOV      r1,r7
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       dhcp_parse_reply
000072  bb08              CBNZ     r0,|L26.184|
;;;1732       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;1733         ("problem unfolding DHCP message - too short on memory?\n"));
;;;1734       goto free_pbuf_and_return;
;;;1735     }
;;;1736   
;;;1737     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
;;;1738     /* obtain pointer to DHCP message type */
;;;1739     if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
000074  4842              LDR      r0,|L26.384|
000076  7840              LDRB     r0,[r0,#1]  ; dhcp_rx_options_given
000078  b1f0              CBZ      r0,|L26.184|
;;;1740       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
;;;1741       goto free_pbuf_and_return;
;;;1742     }
;;;1743   
;;;1744     /* read DHCP message type */
;;;1745     msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
00007a  4842              LDR      r0,|L26.388|
00007c  7900              LDRB     r0,[r0,#4]  ; dhcp_rx_options_val
;;;1746     /* message type is DHCP ACK? */
;;;1747     if (msg_type == DHCP_ACK) {
00007e  2805              CMP      r0,#5
000080  d002              BEQ      |L26.136|
;;;1748       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
;;;1749       /* in requesting state? */
;;;1750       if (dhcp->state == DHCP_STATE_REQUESTING) {
;;;1751         dhcp_handle_ack(netif);
;;;1752   #if DHCP_DOES_ARP_CHECK
;;;1753         if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
;;;1754           /* check if the acknowledged lease address is already in use */
;;;1755           dhcp_check(netif);
;;;1756         } else {
;;;1757           /* bind interface to the acknowledged lease address */
;;;1758           dhcp_bind(netif);
;;;1759         }
;;;1760   #else
;;;1761         /* bind interface to the acknowledged lease address */
;;;1762         dhcp_bind(netif);
;;;1763   #endif
;;;1764       }
;;;1765       /* already bound to the given lease address? */
;;;1766       else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
;;;1767                (dhcp->state == DHCP_STATE_RENEWING)) {
;;;1768         dhcp_handle_ack(netif);
;;;1769         dhcp_bind(netif);
;;;1770       }
;;;1771     }
;;;1772     /* received a DHCP_NAK in appropriate state? */
;;;1773     else if ((msg_type == DHCP_NAK) &&
000082  2806              CMP      r0,#6
000084  d020              BEQ      |L26.200|
000086  e028              B        |L26.218|
                  |L26.136|
000088  7a60              LDRB     r0,[r4,#9]            ;1750
00008a  2801              CMP      r0,#1                 ;1750
00008c  d006              BEQ      |L26.156|
00008e  2803              CMP      r0,#3                 ;1766
000090  d013              BEQ      |L26.186|
000092  2804              CMP      r0,#4                 ;1766
000094  d011              BEQ      |L26.186|
000096  2805              CMP      r0,#5                 ;1767
000098  d00f              BEQ      |L26.186|
00009a  e02d              B        |L26.248|
                  |L26.156|
00009c  4628              MOV      r0,r5                 ;1751
00009e  f7fffffe          BL       dhcp_handle_ack
0000a2  f8950037          LDRB     r0,[r5,#0x37]         ;1753
0000a6  0700              LSLS     r0,r0,#28             ;1753
0000a8  d503              BPL      |L26.178|
0000aa  4628              MOV      r0,r5                 ;1755
0000ac  f7fffffe          BL       dhcp_check
0000b0  e022              B        |L26.248|
                  |L26.178|
0000b2  4628              MOV      r0,r5                 ;1758
0000b4  f7fffffe          BL       dhcp_bind
                  |L26.184|
0000b8  e01e              B        |L26.248|
                  |L26.186|
0000ba  4628              MOV      r0,r5                 ;1768
0000bc  f7fffffe          BL       dhcp_handle_ack
0000c0  4628              MOV      r0,r5                 ;1769
0000c2  f7fffffe          BL       dhcp_bind
0000c6  e017              B        |L26.248|
                  |L26.200|
;;;1774       ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
0000c8  7a63              LDRB     r3,[r4,#9]
0000ca  2b03              CMP      r3,#3
0000cc  d008              BEQ      |L26.224|
0000ce  2b01              CMP      r3,#1
0000d0  d006              BEQ      |L26.224|
;;;1775        (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
0000d2  2b04              CMP      r3,#4
0000d4  d004              BEQ      |L26.224|
0000d6  2b05              CMP      r3,#5
0000d8  d002              BEQ      |L26.224|
                  |L26.218|
;;;1776       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
;;;1777       dhcp_handle_nak(netif);
;;;1778     }
;;;1779     /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
;;;1780     else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
0000da  2802              CMP      r0,#2
0000dc  d004              BEQ      |L26.232|
0000de  e00b              B        |L26.248|
                  |L26.224|
0000e0  4628              MOV      r0,r5                 ;1777
0000e2  f7fffffe          BL       dhcp_handle_nak
0000e6  e007              B        |L26.248|
                  |L26.232|
0000e8  7a60              LDRB     r0,[r4,#9]
0000ea  2806              CMP      r0,#6
0000ec  d104              BNE      |L26.248|
;;;1781       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
;;;1782       dhcp->request_timeout = 0;
0000ee  f8a48016          STRH     r8,[r4,#0x16]
;;;1783       /* remember offered lease */
;;;1784       dhcp_handle_offer(netif);
0000f2  4628              MOV      r0,r5
0000f4  f7fffffe          BL       dhcp_handle_offer
                  |L26.248|
;;;1785     }
;;;1786   
;;;1787   free_pbuf_and_return:
;;;1788     if (dhcp != NULL) {
0000f8  b10c              CBZ      r4,|L26.254|
;;;1789       dhcp->msg_in = NULL;
0000fa  f8c48004          STR      r8,[r4,#4]
                  |L26.254|
;;;1790     }
;;;1791     pbuf_free(p);
0000fe  4638              MOV      r0,r7
000100  e8bd41f0          POP      {r4-r8,lr}
000104  f7ffbffe          B.W      pbuf_free
;;;1792   }
;;;1793   
                          ENDP

                  |L26.264|
                          DCD      ip_data
                  |L26.268|
00010c  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
000110  6964646c
000114  65776172
000118  65735c54
00011c  68697264
000120  5f506172
000124  74795c4c
000128  7749505c
00012c  7372635c
000130  636f7265
000134  5c697076
000138  345c6468
00013c  63702e63          DCB      "cp.c",0
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
                  |L26.324|
000144  7265706c          DCB      "reply wasn't freed",0
000148  79207761
00014c  736e2774
000150  20667265
000154  656400  
000157  00                DCB      0
                  |L26.344|
000158  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
00015c  7274696f
000160  6e202225
000164  73222066
000168  61696c65
00016c  64206174
000170  206c696e
000174  65202564
000178  20696e20
00017c  25730a00
                  |L26.384|
                          DCD      ||.data||+0xc
                  |L26.388|
                          DCD      ||.bss||

                          AREA ||i.dhcp_release||, CODE, READONLY, ALIGN=2

                  dhcp_release PROC
;;;1279   err_t
;;;1280   dhcp_release(struct netif *netif)
000000  b57c              PUSH     {r2-r6,lr}
;;;1281   {
000002  4605              MOV      r5,r0
;;;1282     struct dhcp *dhcp = netif_dhcp_data(netif);
000004  6aac              LDR      r4,[r5,#0x28]
;;;1283     err_t result;
;;;1284     ip_addr_t server_ip_addr;
;;;1285     u8_t is_dhcp_supplied_address;
;;;1286   
;;;1287     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
;;;1288     if (dhcp == NULL) {
000006  2c00              CMP      r4,#0
000008  d01e              BEQ      |L27.72|
;;;1289       return ERR_ARG;
;;;1290     }
;;;1291     ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
00000a  6a60              LDR      r0,[r4,#0x24]
00000c  9001              STR      r0,[sp,#4]
;;;1292   
;;;1293     is_dhcp_supplied_address = dhcp_supplied_address(netif);
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       dhcp_supplied_address
000014  4606              MOV      r6,r0
;;;1294   
;;;1295     /* idle DHCP client */
;;;1296     dhcp_set_state(dhcp, DHCP_STATE_OFF);
000016  2100              MOVS     r1,#0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       dhcp_set_state
;;;1297     /* clean old DHCP offer */
;;;1298     ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
00001e  2000              MOVS     r0,#0
000020  6260              STR      r0,[r4,#0x24]
;;;1299     ip4_addr_set_zero(&dhcp->offered_ip_addr);
000022  62a0              STR      r0,[r4,#0x28]
;;;1300     ip4_addr_set_zero(&dhcp->offered_sn_mask);
000024  62e0              STR      r0,[r4,#0x2c]
;;;1301     ip4_addr_set_zero(&dhcp->offered_gw_addr);
000026  6320              STR      r0,[r4,#0x30]
;;;1302   #if LWIP_DHCP_BOOTP_FILE
;;;1303     ip4_addr_set_zero(&dhcp->offered_si_addr);
;;;1304   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1305     dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
000028  63e0              STR      r0,[r4,#0x3c]
00002a  63a0              STR      r0,[r4,#0x38]
00002c  6360              STR      r0,[r4,#0x34]
;;;1306     dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
00002e  8460              STRH     r0,[r4,#0x22]
000030  8420              STRH     r0,[r4,#0x20]
000032  83e0              STRH     r0,[r4,#0x1e]
000034  83a0              STRH     r0,[r4,#0x1c]
;;;1307   
;;;1308     if (!is_dhcp_supplied_address) {
000036  b156              CBZ      r6,|L27.78|
;;;1309       /* don't issue release message when address is not dhcp-assigned */
;;;1310       return ERR_OK;
;;;1311     }
;;;1312   
;;;1313     /* create and initialize the DHCP message header */
;;;1314     result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
000038  2207              MOVS     r2,#7
00003a  4621              MOV      r1,r4
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       dhcp_create_msg
000042  4606              MOV      r6,r0
;;;1315     if (result == ERR_OK) {
000044  b12e              CBZ      r6,|L27.82|
000046  e024              B        |L27.146|
                  |L27.72|
000048  f06f000f          MVN      r0,#0xf               ;1289
;;;1316       dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
;;;1317       dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
;;;1318   
;;;1319       dhcp_option_trailer(dhcp);
;;;1320   
;;;1321       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
;;;1322   
;;;1323       udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
;;;1324       dhcp_delete_msg(dhcp);
;;;1325       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_STATE_OFF\n"));
;;;1326     } else {
;;;1327       /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
;;;1328       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
;;;1329     }
;;;1330     /* remove IP address from interface (prevents routing from selecting this interface) */
;;;1331     netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
;;;1332   
;;;1333     return result;
;;;1334   }
00004c  bd7c              POP      {r2-r6,pc}
                  |L27.78|
00004e  2000              MOVS     r0,#0                 ;1310
000050  bd7c              POP      {r2-r6,pc}
                  |L27.82|
000052  2204              MOVS     r2,#4                 ;1316
000054  2136              MOVS     r1,#0x36              ;1316
000056  4620              MOV      r0,r4                 ;1316
000058  f7fffffe          BL       dhcp_option
00005c  9801              LDR      r0,[sp,#4]            ;1317
00005e  f7fffffe          BL       lwip_htonl
000062  4601              MOV      r1,r0                 ;1317
000064  4620              MOV      r0,r4                 ;1317
000066  f7fffffe          BL       dhcp_option_long
00006a  4620              MOV      r0,r4                 ;1319
00006c  f7fffffe          BL       dhcp_option_trailer
000070  8aa0              LDRH     r0,[r4,#0x14]         ;1321
000072  30f0              ADDS     r0,r0,#0xf0           ;1321
000074  b281              UXTH     r1,r0                 ;1321
000076  68e0              LDR      r0,[r4,#0xc]          ;1321
000078  f7fffffe          BL       pbuf_realloc
00007c  4809              LDR      r0,|L27.164|
00007e  9500              STR      r5,[sp,#0]            ;1323
000080  2343              MOVS     r3,#0x43              ;1323
000082  aa01              ADD      r2,sp,#4              ;1323
000084  68e1              LDR      r1,[r4,#0xc]          ;1323
000086  6880              LDR      r0,[r0,#8]            ;1323  ; dhcp_pcb
000088  f7fffffe          BL       udp_sendto_if
00008c  4620              MOV      r0,r4                 ;1324
00008e  f7fffffe          BL       dhcp_delete_msg
                  |L27.146|
000092  4b05              LDR      r3,|L27.168|
000094  4628              MOV      r0,r5                 ;1331
000096  461a              MOV      r2,r3                 ;1331
000098  4611              MOV      r1,r2                 ;1331
00009a  f7fffffe          BL       netif_set_addr
00009e  4630              MOV      r0,r6                 ;1333
0000a0  bd7c              POP      {r2-r6,pc}
;;;1335   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L27.164|
                          DCD      ||.data||
                  |L27.168|
                          DCD      ip_addr_any

                          AREA ||i.dhcp_renew||, CODE, READONLY, ALIGN=2

                  dhcp_renew PROC
;;;1126   err_t
;;;1127   dhcp_renew(struct netif *netif)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1128   {
000004  4607              MOV      r7,r0
;;;1129     struct dhcp *dhcp = netif_dhcp_data(netif);
000006  6abc              LDR      r4,[r7,#0x28]
;;;1130     err_t result;
;;;1131     u16_t msecs;
;;;1132     u8_t i;
;;;1133     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
;;;1134     dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
000008  2105              MOVS     r1,#5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       dhcp_set_state
;;;1135   
;;;1136     /* create and initialize the DHCP message header */
;;;1137     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000010  2203              MOVS     r2,#3
000012  4621              MOV      r1,r4
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       dhcp_create_msg
00001a  4680              MOV      r8,r0
;;;1138     if (result == ERR_OK) {
00001c  ea5f0008          MOVS     r0,r8
000020  d12d              BNE      |L28.126|
;;;1139       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000022  2202              MOVS     r2,#2
000024  2139              MOVS     r1,#0x39
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       dhcp_option
;;;1140       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
00002c  8df9              LDRH     r1,[r7,#0x2e]
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       dhcp_option_short
;;;1141   
;;;1142       dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
000034  2203              MOVS     r2,#3
000036  2137              MOVS     r1,#0x37
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       dhcp_option
;;;1143       for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
00003e  2500              MOVS     r5,#0
;;;1144         dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
000040  4e1b              LDR      r6,|L28.176|
                  |L28.66|
000042  4620              MOV      r0,r4
000044  5d71              LDRB     r1,[r6,r5]
000046  f7fffffe          BL       dhcp_option_byte
00004a  1c6d              ADDS     r5,r5,#1              ;1143
00004c  b2ed              UXTB     r5,r5                 ;1143
00004e  2d03              CMP      r5,#3                 ;1143
000050  d3f7              BCC      |L28.66|
;;;1145       }
;;;1146   
;;;1147   #if LWIP_NETIF_HOSTNAME
;;;1148       dhcp_option_hostname(dhcp, netif);
;;;1149   #endif /* LWIP_NETIF_HOSTNAME */
;;;1150   
;;;1151       /* append DHCP message trailer */
;;;1152       dhcp_option_trailer(dhcp);
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dhcp_option_trailer
;;;1153   
;;;1154       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000058  8aa0              LDRH     r0,[r4,#0x14]
00005a  30f0              ADDS     r0,r0,#0xf0
00005c  b281              UXTH     r1,r0
00005e  68e0              LDR      r0,[r4,#0xc]
000060  f7fffffe          BL       pbuf_realloc
;;;1155   
;;;1156       udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
000064  4812              LDR      r0,|L28.176|
000066  9700              STR      r7,[sp,#0]
000068  1e40              SUBS     r0,r0,#1
00006a  2343              MOVS     r3,#0x43
00006c  f1040224          ADD      r2,r4,#0x24
000070  68e1              LDR      r1,[r4,#0xc]
000072  6880              LDR      r0,[r0,#8]  ; dhcp_pcb
000074  f7fffffe          BL       udp_sendto_if
;;;1157       dhcp_delete_msg(dhcp);
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       dhcp_delete_msg
                  |L28.126|
;;;1158   
;;;1159       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
;;;1160     } else {
;;;1161       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
;;;1162     }
;;;1163     if (dhcp->tries < 255) {
00007e  7aa0              LDRB     r0,[r4,#0xa]
000080  28ff              CMP      r0,#0xff
000082  d201              BCS      |L28.136|
;;;1164       dhcp->tries++;
000084  1c40              ADDS     r0,r0,#1
000086  72a0              STRB     r0,[r4,#0xa]
                  |L28.136|
;;;1165     }
;;;1166     /* back-off on retries, but to a maximum of 20 seconds */
;;;1167     msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
000088  7aa0              LDRB     r0,[r4,#0xa]
00008a  280a              CMP      r0,#0xa
00008c  d203              BCS      |L28.150|
00008e  f44f61fa          MOV      r1,#0x7d0
000092  4348              MULS     r0,r1,r0
000094  e001              B        |L28.154|
                  |L28.150|
000096  f6446020          MOV      r0,#0x4e20
                  |L28.154|
00009a  b280              UXTH     r0,r0
;;;1168     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00009c  f20010f3          ADD      r0,r0,#0x1f3
0000a0  f44f71fa          MOV      r1,#0x1f4
0000a4  fbb0f0f1          UDIV     r0,r0,r1
0000a8  82e0              STRH     r0,[r4,#0x16]
;;;1169     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
;;;1170     return result;
0000aa  4640              MOV      r0,r8
;;;1171   }
0000ac  e8bd83f8          POP      {r3-r9,pc}
;;;1172   
                          ENDP

                  |L28.176|
                          DCD      ||.data||+0x1

                          AREA ||i.dhcp_select||, CODE, READONLY, ALIGN=2

                  dhcp_select PROC
;;;351    static err_t
;;;352    dhcp_select(struct netif *netif)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;353    {
000004  4680              MOV      r8,r0
;;;354      struct dhcp *dhcp = netif_dhcp_data(netif);
000006  f8d84028          LDR      r4,[r8,#0x28]
;;;355      err_t result;
;;;356      u16_t msecs;
;;;357      u8_t i;
;;;358    
;;;359      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;360      dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
00000a  2101              MOVS     r1,#1
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       dhcp_set_state
;;;361    
;;;362      /* create and initialize the DHCP message header */
;;;363      result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000012  2203              MOVS     r2,#3
000014  4621              MOV      r1,r4
000016  4640              MOV      r0,r8
000018  f7fffffe          BL       dhcp_create_msg
00001c  4607              MOV      r7,r0
;;;364      if (result == ERR_OK) {
00001e  0038              MOVS     r0,r7
000020  d147              BNE      |L29.178|
;;;365        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000022  2202              MOVS     r2,#2
000024  2139              MOVS     r1,#0x39
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       dhcp_option
;;;366        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
00002c  f8b8102e          LDRH     r1,[r8,#0x2e]
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       dhcp_option_short
;;;367    
;;;368        /* MUST request the offered IP address */
;;;369        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
000036  2204              MOVS     r2,#4
000038  2132              MOVS     r1,#0x32
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       dhcp_option
;;;370        dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
000040  6aa0              LDR      r0,[r4,#0x28]
000042  f7fffffe          BL       lwip_htonl
000046  4601              MOV      r1,r0
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       dhcp_option_long
;;;371    
;;;372        dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
00004e  2204              MOVS     r2,#4
000050  2136              MOVS     r1,#0x36
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dhcp_option
;;;373        dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
000058  6a60              LDR      r0,[r4,#0x24]
00005a  f7fffffe          BL       lwip_htonl
00005e  4601              MOV      r1,r0
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       dhcp_option_long
;;;374    
;;;375        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
000066  2203              MOVS     r2,#3
000068  2137              MOVS     r1,#0x37
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       dhcp_option
;;;376        for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
000070  2500              MOVS     r5,#0
;;;377          dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
000072  4e1f              LDR      r6,|L29.240|
                  |L29.116|
000074  4620              MOV      r0,r4
000076  5d71              LDRB     r1,[r6,r5]
000078  f7fffffe          BL       dhcp_option_byte
00007c  1c6d              ADDS     r5,r5,#1              ;376
00007e  b2ed              UXTB     r5,r5                 ;376
000080  2d03              CMP      r5,#3                 ;376
000082  d3f7              BCC      |L29.116|
;;;378        }
;;;379    
;;;380    #if LWIP_NETIF_HOSTNAME
;;;381        dhcp_option_hostname(dhcp, netif);
;;;382    #endif /* LWIP_NETIF_HOSTNAME */
;;;383    
;;;384        dhcp_option_trailer(dhcp);
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       dhcp_option_trailer
;;;385        /* shrink the pbuf to the actual content length */
;;;386        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
00008a  8aa0              LDRH     r0,[r4,#0x14]
00008c  30f0              ADDS     r0,r0,#0xf0
00008e  b281              UXTH     r1,r0
000090  68e0              LDR      r0,[r4,#0xc]
000092  f7fffffe          BL       pbuf_realloc
;;;387    
;;;388        /* send broadcast to any DHCP server */
;;;389        udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
000096  4817              LDR      r0,|L29.244|
000098  2343              MOVS     r3,#0x43
00009a  e9cd8000          STRD     r8,r0,[sp,#0]
00009e  4814              LDR      r0,|L29.240|
0000a0  4a15              LDR      r2,|L29.248|
0000a2  1e40              SUBS     r0,r0,#1
0000a4  68e1              LDR      r1,[r4,#0xc]
0000a6  6880              LDR      r0,[r0,#8]  ; dhcp_pcb
0000a8  f7fffffe          BL       udp_sendto_if_src
;;;390        dhcp_delete_msg(dhcp);
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       dhcp_delete_msg
                  |L29.178|
;;;391        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
;;;392      } else {
;;;393        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
;;;394      }
;;;395      if (dhcp->tries < 255) {
0000b2  7aa0              LDRB     r0,[r4,#0xa]
0000b4  28ff              CMP      r0,#0xff
0000b6  d201              BCS      |L29.188|
;;;396        dhcp->tries++;
0000b8  1c40              ADDS     r0,r0,#1
0000ba  72a0              STRB     r0,[r4,#0xa]
                  |L29.188|
;;;397      }
;;;398      msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
0000bc  7aa1              LDRB     r1,[r4,#0xa]
0000be  2906              CMP      r1,#6
0000c0  d202              BCS      |L29.200|
0000c2  2001              MOVS     r0,#1
0000c4  4088              LSLS     r0,r0,r1
0000c6  e000              B        |L29.202|
                  |L29.200|
0000c8  203c              MOVS     r0,#0x3c
                  |L29.202|
0000ca  eb000140          ADD      r1,r0,r0,LSL #1
0000ce  ebc110c0          RSB      r0,r1,r0,LSL #7
0000d2  f64f71ff          MOV      r1,#0xffff
0000d6  ea0100c0          AND      r0,r1,r0,LSL #3
;;;399      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000da  f20010f3          ADD      r0,r0,#0x1f3
0000de  f44f71fa          MOV      r1,#0x1f4
0000e2  fbb0f0f1          UDIV     r0,r0,r1
0000e6  82e0              STRH     r0,[r4,#0x16]
;;;400      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
;;;401      return result;
0000e8  4638              MOV      r0,r7
;;;402    }
0000ea  e8bd81fc          POP      {r2-r8,pc}
;;;403    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L29.240|
                          DCD      ||.data||+0x1
                  |L29.244|
                          DCD      ip_addr_any
                  |L29.248|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_set_state||, CODE, READONLY, ALIGN=1

                  dhcp_set_state PROC
;;;1374   static void
;;;1375   dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
000000  7a42              LDRB     r2,[r0,#9]
;;;1376   {
;;;1377     if (new_state != dhcp->state) {
000002  428a              CMP      r2,r1
000004  d003              BEQ      |L30.14|
;;;1378       dhcp->state = new_state;
000006  7241              STRB     r1,[r0,#9]
;;;1379       dhcp->tries = 0;
000008  2100              MOVS     r1,#0
00000a  7281              STRB     r1,[r0,#0xa]
;;;1380       dhcp->request_timeout = 0;
00000c  82c1              STRH     r1,[r0,#0x16]
                  |L30.14|
;;;1381     }
;;;1382   }
00000e  4770              BX       lr
;;;1383   
                          ENDP


                          AREA ||i.dhcp_set_struct||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_set_struct PROC
;;;675    void
;;;676    dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
000000  b570              PUSH     {r4-r6,lr}
;;;677    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;678      LWIP_ASSERT("netif != NULL", netif != NULL);
000006  2c00              CMP      r4,#0
000008  d106              BNE      |L31.24|
00000a  a30f              ADR      r3,|L31.72|
00000c  f24022a6          MOV      r2,#0x2a6
000010  a11b              ADR      r1,|L31.128|
000012  a01f              ADR      r0,|L31.144|
000014  f7fffffe          BL       __2printf
                  |L31.24|
;;;679      LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
000018  b935              CBNZ     r5,|L31.40|
00001a  a30b              ADR      r3,|L31.72|
00001c  f24022a7          MOV      r2,#0x2a7
000020  a125              ADR      r1,|L31.184|
000022  a01b              ADR      r0,|L31.144|
000024  f7fffffe          BL       __2printf
                  |L31.40|
;;;680      LWIP_ASSERT("netif already has a struct dhcp set", netif_dhcp_data(netif) == NULL);
000028  6aa0              LDR      r0,[r4,#0x28]
00002a  2800              CMP      r0,#0
00002c  d006              BEQ      |L31.60|
00002e  a306              ADR      r3,|L31.72|
000030  f44f722a          MOV      r2,#0x2a8
000034  a124              ADR      r1,|L31.200|
000036  a016              ADR      r0,|L31.144|
000038  f7fffffe          BL       __2printf
                  |L31.60|
;;;681    
;;;682      /* clear data structure */
;;;683      memset(dhcp, 0, sizeof(struct dhcp));
00003c  2140              MOVS     r1,#0x40
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       __aeabi_memclr4
;;;684      /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
;;;685      netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
000044  62a5              STR      r5,[r4,#0x28]
;;;686    }
000046  bd70              POP      {r4-r6,pc}
;;;687    
                          ENDP

                  |L31.72|
000048  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
00004c  6964646c
000050  65776172
000054  65735c54
000058  68697264
00005c  5f506172
000060  74795c4c
000064  7749505c
000068  7372635c
00006c  636f7265
000070  5c697076
000074  345c6468
000078  63702e63          DCB      "cp.c",0
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L31.128|
000080  6e657469          DCB      "netif != NULL",0
000084  6620213d
000088  204e554c
00008c  4c00    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L31.144|
000090  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000094  7274696f
000098  6e202225
00009c  73222066
0000a0  61696c65
0000a4  64206174
0000a8  206c696e
0000ac  65202564
0000b0  20696e20
0000b4  25730a00
                  |L31.184|
0000b8  64686370          DCB      "dhcp != NULL",0
0000bc  20213d20
0000c0  4e554c4c
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L31.200|
0000c8  6e657469          DCB      "netif already has a struct dhcp set",0
0000cc  6620616c
0000d0  72656164
0000d4  79206861
0000d8  73206120
0000dc  73747275
0000e0  63742064
0000e4  68637020
0000e8  73657400

                          AREA ||i.dhcp_start||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_start PROC
;;;720    err_t
;;;721    dhcp_start(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;722    {
000002  4605              MOV      r5,r0
;;;723      struct dhcp *dhcp;
;;;724      err_t result;
;;;725    
;;;726      LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
000004  f06f040f          MVN      r4,#0xf
000008  2d00              CMP      r5,#0
00000a  d00c              BEQ      |L32.38|
;;;727      LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
00000c  f8950037          LDRB     r0,[r5,#0x37]
000010  07c0              LSLS     r0,r0,#31
000012  d011              BEQ      |L32.56|
;;;728      dhcp = netif_dhcp_data(netif);
000014  6aac              LDR      r4,[r5,#0x28]
;;;729      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;730    
;;;731      /* check MTU of the netif */
;;;732      if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
000016  8de8              LDRH     r0,[r5,#0x2e]
;;;733        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
;;;734        return ERR_MEM;
000018  f04f36ff          MOV      r6,#0xffffffff
00001c  f5b07f10          CMP      r0,#0x240             ;732
000020  d213              BCS      |L32.74|
000022  4630              MOV      r0,r6
;;;735      }
;;;736    
;;;737      /* no DHCP client attached yet? */
;;;738      if (dhcp == NULL) {
;;;739        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
;;;740        dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
;;;741        if (dhcp == NULL) {
;;;742          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
;;;743          return ERR_MEM;
;;;744        }
;;;745    
;;;746        /* store this dhcp client in the netif */
;;;747        netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
;;;748        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
;;;749      /* already has DHCP client attached */
;;;750      } else {
;;;751        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
;;;752        LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
;;;753        LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
;;;754    
;;;755        if (dhcp->pcb_allocated != 0) {
;;;756          dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
;;;757        }
;;;758        /* dhcp is cleared below, no need to reset flag*/
;;;759      }
;;;760    
;;;761      /* clear data structure */
;;;762      memset(dhcp, 0, sizeof(struct dhcp));
;;;763      /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
;;;764    
;;;765      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
;;;766    
;;;767      if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
;;;768        return ERR_MEM;
;;;769      }
;;;770      dhcp->pcb_allocated = 1;
;;;771    
;;;772    #if LWIP_DHCP_CHECK_LINK_UP
;;;773      if (!netif_is_link_up(netif)) {
;;;774        /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
;;;775        dhcp_set_state(dhcp, DHCP_STATE_INIT);
;;;776        return ERR_OK;
;;;777      }
;;;778    #endif /* LWIP_DHCP_CHECK_LINK_UP */
;;;779    
;;;780    
;;;781      /* (re)start the DHCP negotiation */
;;;782      result = dhcp_discover(netif);
;;;783      if (result != ERR_OK) {
;;;784        /* free resources allocated above */
;;;785        dhcp_stop(netif);
;;;786        return ERR_MEM;
;;;787      }
;;;788      return result;
;;;789    }
000024  bd70              POP      {r4-r6,pc}
                  |L32.38|
000026  a324              ADR      r3,|L32.184|
000028  f24022d6          MOV      r2,#0x2d6             ;726
00002c  a130              ADR      r1,|L32.240|
00002e  a034              ADR      r0,|L32.256|
000030  f7fffffe          BL       __2printf
000034  4620              MOV      r0,r4                 ;726
000036  bd70              POP      {r4-r6,pc}
                  |L32.56|
000038  a31f              ADR      r3,|L32.184|
00003a  f24022d7          MOV      r2,#0x2d7             ;727
00003e  a13a              ADR      r1,|L32.296|
000040  a02f              ADR      r0,|L32.256|
000042  f7fffffe          BL       __2printf
000046  4620              MOV      r0,r4                 ;727
000048  bd70              POP      {r4-r6,pc}
                  |L32.74|
00004a  2c00              CMP      r4,#0                 ;738
00004c  d01e              BEQ      |L32.140|
00004e  68e0              LDR      r0,[r4,#0xc]          ;752
000050  b130              CBZ      r0,|L32.96|
000052  a319              ADR      r3,|L32.184|
000054  f44f723c          MOV      r2,#0x2f0             ;752
000058  a13c              ADR      r1,|L32.332|
00005a  a029              ADR      r0,|L32.256|
00005c  f7fffffe          BL       __2printf
                  |L32.96|
000060  6860              LDR      r0,[r4,#4]            ;753
000062  b130              CBZ      r0,|L32.114|
000064  a314              ADR      r3,|L32.184|
000066  f24022f1          MOV      r2,#0x2f1             ;753
00006a  a13e              ADR      r1,|L32.356|
00006c  a024              ADR      r0,|L32.256|
00006e  f7fffffe          BL       __2printf
                  |L32.114|
000072  7a20              LDRB     r0,[r4,#8]            ;755
000074  b108              CBZ      r0,|L32.122|
000076  f7fffffe          BL       dhcp_dec_pcb_refcount
                  |L32.122|
00007a  2140              MOVS     r1,#0x40              ;762
00007c  4620              MOV      r0,r4                 ;762
00007e  f7fffffe          BL       __aeabi_memclr4
000082  f7fffffe          BL       dhcp_inc_pcb_refcount
000086  b150              CBZ      r0,|L32.158|
000088  4630              MOV      r0,r6                 ;768
00008a  bd70              POP      {r4-r6,pc}
                  |L32.140|
00008c  2040              MOVS     r0,#0x40              ;740
00008e  f7fffffe          BL       mem_malloc
000092  4604              MOV      r4,r0                 ;740
000094  b10c              CBZ      r4,|L32.154|
000096  62ac              STR      r4,[r5,#0x28]         ;747
000098  e7ef              B        |L32.122|
                  |L32.154|
00009a  4630              MOV      r0,r6                 ;743
                  |L32.156|
00009c  bd70              POP      {r4-r6,pc}
                  |L32.158|
00009e  2001              MOVS     r0,#1                 ;770
0000a0  7220              STRB     r0,[r4,#8]            ;770
0000a2  4628              MOV      r0,r5                 ;782
0000a4  f7fffffe          BL       dhcp_discover
0000a8  2800              CMP      r0,#0                 ;783
0000aa  d0f7              BEQ      |L32.156|
0000ac  4628              MOV      r0,r5                 ;785
0000ae  f7fffffe          BL       dhcp_stop
0000b2  4630              MOV      r0,r6                 ;786
0000b4  bd70              POP      {r4-r6,pc}
;;;790    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L32.184|
0000b8  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
0000bc  6964646c
0000c0  65776172
0000c4  65735c54
0000c8  68697264
0000cc  5f506172
0000d0  74795c4c
0000d4  7749505c
0000d8  7372635c
0000dc  636f7265
0000e0  5c697076
0000e4  345c6468
0000e8  63702e63          DCB      "cp.c",0
0000ec  00      
0000ed  00                DCB      0
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L32.240|
0000f0  6e657469          DCB      "netif != NULL",0
0000f4  6620213d
0000f8  204e554c
0000fc  4c00    
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L32.256|
000100  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000104  7274696f
000108  6e202225
00010c  73222066
000110  61696c65
000114  64206174
000118  206c696e
00011c  65202564
000120  20696e20
000124  25730a00
                  |L32.296|
000128  6e657469          DCB      "netif is not up, old style port?",0
00012c  66206973
000130  206e6f74
000134  2075702c
000138  206f6c64
00013c  20737479
000140  6c652070
000144  6f72743f
000148  00      
000149  00                DCB      0
00014a  00                DCB      0
00014b  00                DCB      0
                  |L32.332|
00014c  70627566          DCB      "pbuf p_out wasn't freed",0
000150  20705f6f
000154  75742077
000158  61736e27
00015c  74206672
000160  65656400
                  |L32.356|
000164  7265706c          DCB      "reply wasn't freed",0
000168  79207761
00016c  736e2774
000170  20667265
000174  656400  
000177  00                DCB      0

                          AREA ||i.dhcp_stop||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_stop PROC
;;;1342   void
;;;1343   dhcp_stop(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;1344   {
;;;1345     struct dhcp *dhcp;
;;;1346     LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
000002  2800              CMP      r0,#0
000004  d017              BEQ      |L33.54|
;;;1347     dhcp = netif_dhcp_data(netif);
000006  6a84              LDR      r4,[r0,#0x28]
;;;1348   
;;;1349     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
;;;1350     /* netif is DHCP configured? */
;;;1351     if (dhcp != NULL) {
000008  2c00              CMP      r4,#0
00000a  d013              BEQ      |L33.52|
;;;1352   #if LWIP_DHCP_AUTOIP_COOP
;;;1353       if (dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;1354         autoip_stop(netif);
;;;1355         dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;1356       }
;;;1357   #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1358   
;;;1359       LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
00000c  6860              LDR      r0,[r4,#4]
00000e  b130              CBZ      r0,|L33.30|
000010  a30d              ADR      r3,|L33.72|
000012  f240524f          MOV      r2,#0x54f
000016  a11a              ADR      r1,|L33.128|
000018  a01e              ADR      r0,|L33.148|
00001a  f7fffffe          BL       __2printf
                  |L33.30|
;;;1360       dhcp_set_state(dhcp, DHCP_STATE_OFF);
00001e  2100              MOVS     r1,#0
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       dhcp_set_state
;;;1361   
;;;1362       if (dhcp->pcb_allocated != 0) {
000026  7a20              LDRB     r0,[r4,#8]
000028  2800              CMP      r0,#0
00002a  d003              BEQ      |L33.52|
;;;1363         dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
00002c  f7fffffe          BL       dhcp_dec_pcb_refcount
;;;1364         dhcp->pcb_allocated = 0;
000030  2000              MOVS     r0,#0
000032  7220              STRB     r0,[r4,#8]
                  |L33.52|
;;;1365       }
;;;1366     }
;;;1367   }
000034  bd10              POP      {r4,pc}
                  |L33.54|
000036  e8bd4010          POP      {r4,lr}               ;1346
00003a  a303              ADR      r3,|L33.72|
00003c  f2405242          MOV      r2,#0x542             ;1346
000040  a11e              ADR      r1,|L33.188|
000042  a014              ADR      r0,|L33.148|
000044  f7ffbffe          B.W      __2printf
;;;1368   
                          ENDP

                  |L33.72|
000048  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dh"
00004c  6964646c
000050  65776172
000054  65735c54
000058  68697264
00005c  5f506172
000060  74795c4c
000064  7749505c
000068  7372635c
00006c  636f7265
000070  5c697076
000074  345c6468
000078  63702e63          DCB      "cp.c",0
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L33.128|
000080  7265706c          DCB      "reply wasn't freed",0
000084  79207761
000088  736e2774
00008c  20667265
000090  656400  
000093  00                DCB      0
                  |L33.148|
000094  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000098  7274696f
00009c  6e202225
0000a0  73222066
0000a4  61696c65
0000a8  64206174
0000ac  206c696e
0000b0  65202564
0000b4  20696e20
0000b8  25730a00
                  |L33.188|
0000bc  64686370          DCB      "dhcp_stop: netif != NULL",0
0000c0  5f73746f
0000c4  703a206e
0000c8  65746966
0000cc  20213d20
0000d0  4e554c4c
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0

                          AREA ||i.dhcp_supplied_address||, CODE, READONLY, ALIGN=1

                  dhcp_supplied_address PROC
;;;1940   u8_t
;;;1941   dhcp_supplied_address(const struct netif *netif)
000000  2800              CMP      r0,#0
;;;1942   {
000002  d00c              BEQ      |L34.30|
;;;1943     if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
000004  6a80              LDR      r0,[r0,#0x28]
000006  b150              CBZ      r0,|L34.30|
;;;1944       struct dhcp* dhcp = netif_dhcp_data(netif);
;;;1945       return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
000008  7a40              LDRB     r0,[r0,#9]
00000a  280a              CMP      r0,#0xa
00000c  d005              BEQ      |L34.26|
00000e  2805              CMP      r0,#5
000010  d003              BEQ      |L34.26|
;;;1946              (dhcp->state == DHCP_STATE_REBINDING);
000012  2804              CMP      r0,#4
000014  d001              BEQ      |L34.26|
000016  2000              MOVS     r0,#0
;;;1947     }
;;;1948     return 0;
;;;1949   }
000018  4770              BX       lr
                  |L34.26|
00001a  2001              MOVS     r0,#1                 ;1946
00001c  4770              BX       lr
                  |L34.30|
00001e  2000              MOVS     r0,#0                 ;1948
000020  4770              BX       lr
;;;1950   
                          ENDP


                          AREA ||i.dhcp_t1_timeout||, CODE, READONLY, ALIGN=1

                  dhcp_t1_timeout PROC
;;;529    static void
;;;530    dhcp_t1_timeout(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;531    {
;;;532      struct dhcp *dhcp = netif_dhcp_data(netif);
000002  6a84              LDR      r4,[r0,#0x28]
;;;533    
;;;534      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
;;;535      if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
000004  7a61              LDRB     r1,[r4,#9]
000006  2901              CMP      r1,#1
000008  d003              BEQ      |L35.18|
00000a  290a              CMP      r1,#0xa
00000c  d001              BEQ      |L35.18|
;;;536          (dhcp->state == DHCP_STATE_RENEWING)) {
00000e  2905              CMP      r1,#5
000010  d10a              BNE      |L35.40|
                  |L35.18|
;;;537        /* just retry to renew - note that the rebind timer (t2) will
;;;538         * eventually time-out if renew tries fail. */
;;;539        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
;;;540                    ("dhcp_t1_timeout(): must renew\n"));
;;;541        /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
;;;542           DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
;;;543        dhcp_renew(netif);
000012  f7fffffe          BL       dhcp_renew
;;;544        /* Calculate next timeout */
;;;545        if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
000016  8b60              LDRH     r0,[r4,#0x1a]
000018  8c21              LDRH     r1,[r4,#0x20]
00001a  1a40              SUBS     r0,r0,r1
00001c  2802              CMP      r0,#2
00001e  db03              BLT      |L35.40|
;;;546        {
;;;547           dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
000020  eb0070d0          ADD      r0,r0,r0,LSR #31
000024  0840              LSRS     r0,r0,#1
000026  83a0              STRH     r0,[r4,#0x1c]
                  |L35.40|
;;;548        }
;;;549      }
;;;550    }
000028  bd10              POP      {r4,pc}
;;;551    
                          ENDP


                          AREA ||i.dhcp_t2_timeout||, CODE, READONLY, ALIGN=1

                  dhcp_t2_timeout PROC
;;;557    static void
;;;558    dhcp_t2_timeout(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;559    {
;;;560      struct dhcp *dhcp = netif_dhcp_data(netif);
000002  6a84              LDR      r4,[r0,#0x28]
;;;561    
;;;562      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
;;;563      if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
000004  7a61              LDRB     r1,[r4,#9]
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L36.22|
00000a  290a              CMP      r1,#0xa
00000c  d003              BEQ      |L36.22|
;;;564          (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
00000e  2905              CMP      r1,#5
000010  d001              BEQ      |L36.22|
000012  2904              CMP      r1,#4
000014  d10a              BNE      |L36.44|
                  |L36.22|
;;;565        /* just retry to rebind */
;;;566        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
;;;567                    ("dhcp_t2_timeout(): must rebind\n"));
;;;568        /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
;;;569           DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
;;;570        dhcp_rebind(netif);
000016  f7fffffe          BL       dhcp_rebind
;;;571        /* Calculate next timeout */
;;;572        if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
00001a  8c60              LDRH     r0,[r4,#0x22]
00001c  8c21              LDRH     r1,[r4,#0x20]
00001e  1a40              SUBS     r0,r0,r1
000020  2802              CMP      r0,#2
000022  db03              BLT      |L36.44|
;;;573        {
;;;574           dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
000024  eb0070d0          ADD      r0,r0,r0,LSR #31
000028  0840              LSRS     r0,r0,#1
00002a  83e0              STRH     r0,[r4,#0x1e]
                  |L36.44|
;;;575        }
;;;576      }
;;;577    }
00002c  bd10              POP      {r4,pc}
;;;578    
                          ENDP


                          AREA ||i.dhcp_timeout||, CODE, READONLY, ALIGN=1

                  dhcp_timeout PROC
;;;482    static void
;;;483    dhcp_timeout(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;484    {
000002  4604              MOV      r4,r0
;;;485      struct dhcp *dhcp = netif_dhcp_data(netif);
000004  6aa1              LDR      r1,[r4,#0x28]
;;;486    
;;;487      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
;;;488      /* back-off period has passed, or server selection timed out */
;;;489      if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
000006  7a4a              LDRB     r2,[r1,#9]
000008  2a0c              CMP      r2,#0xc
00000a  d00f              BEQ      |L37.44|
00000c  2a06              CMP      r2,#6
00000e  d00d              BEQ      |L37.44|
;;;490        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
;;;491        dhcp_discover(netif);
;;;492      /* receiving the requested lease timed out */
;;;493      } else if (dhcp->state == DHCP_STATE_REQUESTING) {
000010  2a01              CMP      r2,#1
000012  d010              BEQ      |L37.54|
;;;494        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
;;;495        if (dhcp->tries <= 5) {
;;;496          dhcp_select(netif);
;;;497        } else {
;;;498          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
;;;499          dhcp_release(netif);
;;;500          dhcp_discover(netif);
;;;501        }
;;;502    #if DHCP_DOES_ARP_CHECK
;;;503      /* received no ARP reply for the offered address (which is good) */
;;;504      } else if (dhcp->state == DHCP_STATE_CHECKING) {
000014  2a08              CMP      r2,#8
000016  d01e              BEQ      |L37.86|
;;;505        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
;;;506        if (dhcp->tries <= 1) {
;;;507          dhcp_check(netif);
;;;508        /* no ARP replies on the offered address,
;;;509           looks like the IP address is indeed free */
;;;510        } else {
;;;511          /* bind the interface to the offered address */
;;;512          dhcp_bind(netif);
;;;513        }
;;;514    #endif /* DHCP_DOES_ARP_CHECK */
;;;515      } else if (dhcp->state == DHCP_STATE_REBOOTING) {
000018  2a03              CMP      r2,#3
00001a  d12e              BNE      |L37.122|
;;;516        if (dhcp->tries < REBOOT_TRIES) {
00001c  7a88              LDRB     r0,[r1,#0xa]
00001e  2802              CMP      r0,#2
000020  d226              BCS      |L37.112|
;;;517          dhcp_reboot(netif);
000022  4620              MOV      r0,r4
000024  e8bd4010          POP      {r4,lr}
000028  f7ffbffe          B.W      dhcp_reboot
                  |L37.44|
00002c  4620              MOV      r0,r4                 ;491
00002e  e8bd4010          POP      {r4,lr}               ;491
000032  f7ffbffe          B.W      dhcp_discover
                  |L37.54|
000036  7a88              LDRB     r0,[r1,#0xa]          ;495
000038  2805              CMP      r0,#5                 ;495
00003a  d804              BHI      |L37.70|
00003c  4620              MOV      r0,r4                 ;496
00003e  e8bd4010          POP      {r4,lr}               ;496
000042  f7ffbffe          B.W      dhcp_select
                  |L37.70|
000046  4620              MOV      r0,r4                 ;499
000048  f7fffffe          BL       dhcp_release
00004c  4620              MOV      r0,r4                 ;500
00004e  e8bd4010          POP      {r4,lr}               ;500
000052  f7ffbffe          B.W      dhcp_discover
                  |L37.86|
000056  7a88              LDRB     r0,[r1,#0xa]          ;506
000058  2801              CMP      r0,#1                 ;506
00005a  d804              BHI      |L37.102|
00005c  4620              MOV      r0,r4                 ;507
00005e  e8bd4010          POP      {r4,lr}               ;507
000062  f7ffbffe          B.W      dhcp_check
                  |L37.102|
000066  4620              MOV      r0,r4                 ;512
000068  e8bd4010          POP      {r4,lr}               ;512
00006c  f7ffbffe          B.W      dhcp_bind
                  |L37.112|
;;;518        } else {
;;;519          dhcp_discover(netif);
000070  4620              MOV      r0,r4
000072  e8bd4010          POP      {r4,lr}
000076  f7ffbffe          B.W      dhcp_discover
                  |L37.122|
;;;520        }
;;;521      }
;;;522    }
00007a  bd10              POP      {r4,pc}
;;;523    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  dhcp_rx_options_val
                          %        32

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  64686370          DCB      "dhcp_option: dhcp->options_out_len + 2 + option_len <= "
000004  5f6f7074
000008  696f6e3a
00000c  20646863
000010  702d3e6f
000014  7074696f
000018  6e735f6f
00001c  75745f6c
000020  656e202b
000024  2032202b
000028  206f7074
00002c  696f6e5f
000030  6c656e20
000034  3c3d20  
000037  44484350          DCB      "DHCP_OPTIONS_LEN",0
00003b  5f4f5054
00003f  494f4e53
000043  5f4c454e
000047  00      
000048  64686370          DCB      "dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OP"
00004c  5f6f7074
000050  696f6e5f
000054  73686f72
000058  743a2064
00005c  6863702d
000060  3e6f7074
000064  696f6e73
000068  5f6f7574
00006c  5f6c656e
000070  202b2032
000074  203c3d20
000078  44484350
00007c  5f4f50  
00007f  54494f4e          DCB      "TIONS_LEN",0
000083  535f4c45
000087  4e00    

                          AREA ||.data||, DATA, ALIGN=2

                  dhcp_pcb_refcount
000000  00                DCB      0x00
                  dhcp_discover_request_options
000001  01031c            DCB      0x01,0x03,0x1c
                  xid
                          DCD      0x00000000
                  dhcp_pcb
                          DCD      0x00000000
                  dhcp_rx_options_given
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\ipv4\\dhcp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_dhcp_c_7036610f____REV16|
#line 463 "..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_dhcp_c_7036610f____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_dhcp_c_7036610f____REVSH|
#line 478
|__asm___6_dhcp_c_7036610f____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_dhcp_c_7036610f____RRX|
#line 665
|__asm___6_dhcp_c_7036610f____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
