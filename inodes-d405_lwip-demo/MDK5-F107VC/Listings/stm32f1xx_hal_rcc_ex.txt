; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\stm32f1xx_hal_rcc_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_rcc_ex.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device -I..\Drivers\CMSIS\Include -I..\Middlewares\Third_Party\LwIP\src\include\lwip\apps -I..\Middlewares\Third_Party\LwIP\src\include\lwip\priv -I..\Middlewares\Third_Party\LwIP\src\include\lwip\prot -I..\Middlewares\Third_Party\LwIP\src\include\netif\ppp -I..\Middlewares\Third_Party\LwIP\src\include\netif -I..\Middlewares\Third_Party\LwIP\src\include\posix\sys -I..\Middlewares\Third_Party\LwIP\src\include\posix -I..\Middlewares\Third_Party\LwIP\system\arch -I..\Middlewares\Third_Party\LwIP\src\include\lwip -I..\Inc -I..\Middlewares\Third_Party\LwIP\src\include -I.\RTE\_f107vc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_CL -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F107xC --omf_browse=.\objects\stm32f1xx_hal_rcc_ex.crf ..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rcc_ex.c]
                          THUMB

                          AREA ||i.HAL_RCCEx_DisablePLL2||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_DisablePLL2 PROC
;;;809      */
;;;810    HAL_StatusTypeDef HAL_RCCEx_DisablePLL2(void)
000000  b570              PUSH     {r4-r6,lr}
;;;811    {
;;;812      uint32_t tickstart = 0U;
;;;813    
;;;814      /* This bit can not be cleared if the PLL2 clock is used indirectly as system
;;;815        clock (i.e. it is used as PLL clock entry that is used as system clock). */
;;;816      if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
000002  4c10              LDR      r4,|L1.68|
000004  6860              LDR      r0,[r4,#4]
000006  03c0              LSLS     r0,r0,#15
000008  d509              BPL      |L1.30|
;;;817          (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
00000a  6860              LDR      r0,[r4,#4]
00000c  f3c00081          UBFX     r0,r0,#2,#2
000010  2802              CMP      r0,#2
000012  d104              BNE      |L1.30|
;;;818          ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
000014  6ae0              LDR      r0,[r4,#0x2c]
000016  03c0              LSLS     r0,r0,#15
000018  d501              BPL      |L1.30|
;;;819      {
;;;820        return HAL_ERROR;
00001a  2001              MOVS     r0,#1
;;;821      }
;;;822      else
;;;823      {
;;;824        /* Disable the main PLL2. */
;;;825        __HAL_RCC_PLL2_DISABLE();
;;;826    
;;;827        /* Get Start Tick*/
;;;828        tickstart = HAL_GetTick();
;;;829    
;;;830        /* Wait till PLL2 is disabled */
;;;831        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
;;;832        {
;;;833          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;834          {
;;;835            return HAL_TIMEOUT;
;;;836          }
;;;837        }
;;;838      }
;;;839    
;;;840      return HAL_OK;
;;;841    }
00001c  bd70              POP      {r4-r6,pc}
                  |L1.30|
00001e  490a              LDR      r1,|L1.72|
000020  2000              MOVS     r0,#0                 ;825
000022  6688              STR      r0,[r1,#0x68]         ;825
000024  f7fffffe          BL       HAL_GetTick
000028  4605              MOV      r5,r0                 ;828
00002a  e006              B        |L1.58|
                  |L1.44|
00002c  f7fffffe          BL       HAL_GetTick
000030  1b40              SUBS     r0,r0,r5              ;833
000032  2864              CMP      r0,#0x64              ;833
000034  d901              BLS      |L1.58|
000036  2003              MOVS     r0,#3                 ;835
000038  bd70              POP      {r4-r6,pc}
                  |L1.58|
00003a  6820              LDR      r0,[r4,#0]            ;831
00003c  0100              LSLS     r0,r0,#4              ;831
00003e  d4f5              BMI      |L1.44|
000040  2000              MOVS     r0,#0                 ;840
000042  bd70              POP      {r4-r6,pc}
;;;842    
                          ENDP

                  |L1.68|
                          DCD      0x40021000
                  |L1.72|
                          DCD      0x42420000

                          AREA ||i.HAL_RCCEx_DisablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_DisablePLLI2S PROC
;;;682      */
;;;683    HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
000000  b570              PUSH     {r4-r6,lr}
;;;684    {
;;;685      uint32_t tickstart = 0U;
;;;686    
;;;687      /* Disable PLL I2S as not requested by I2S2 or I2S3*/
;;;688      if (HAL_IS_BIT_CLR(RCC->CFGR2, RCC_CFGR2_I2S2SRC) && HAL_IS_BIT_CLR(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
000002  4c0e              LDR      r4,|L2.60|
000004  6ae0              LDR      r0,[r4,#0x2c]
000006  0380              LSLS     r0,r0,#14
000008  d415              BMI      |L2.54|
00000a  6ae0              LDR      r0,[r4,#0x2c]
00000c  0340              LSLS     r0,r0,#13
00000e  d412              BMI      |L2.54|
;;;689      {
;;;690        /* Disable the main PLLI2S. */
;;;691        __HAL_RCC_PLLI2S_DISABLE();
000010  490b              LDR      r1,|L2.64|
000012  2000              MOVS     r0,#0
000014  6708              STR      r0,[r1,#0x70]
;;;692    
;;;693        /* Get Start Tick*/
;;;694        tickstart = HAL_GetTick();
000016  f7fffffe          BL       HAL_GetTick
00001a  4605              MOV      r5,r0
;;;695    
;;;696        /* Wait till PLLI2S is ready */
;;;697        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
00001c  e006              B        |L2.44|
                  |L2.30|
;;;698        {
;;;699          if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
00001e  f7fffffe          BL       HAL_GetTick
000022  1b40              SUBS     r0,r0,r5
000024  2864              CMP      r0,#0x64
000026  d901              BLS      |L2.44|
;;;700          {
;;;701            return HAL_TIMEOUT;
000028  2003              MOVS     r0,#3
;;;702          }
;;;703        }
;;;704      }
;;;705      else
;;;706      {
;;;707        /* PLLI2S is currently used by I2S2 or I2S3. Cannot be disabled.*/
;;;708        return HAL_ERROR;
;;;709      }
;;;710    
;;;711      return HAL_OK;
;;;712    }
00002a  bd70              POP      {r4-r6,pc}
                  |L2.44|
00002c  6820              LDR      r0,[r4,#0]            ;697
00002e  0080              LSLS     r0,r0,#2              ;697
000030  d4f5              BMI      |L2.30|
000032  2000              MOVS     r0,#0                 ;711
000034  bd70              POP      {r4-r6,pc}
                  |L2.54|
000036  2001              MOVS     r0,#1                 ;708
000038  bd70              POP      {r4-r6,pc}
;;;713    
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      0x40021000
                  |L2.64|
                          DCD      0x42420000

                          AREA ||i.HAL_RCCEx_EnablePLL2||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_EnablePLL2 PROC
;;;738      */
;;;739    HAL_StatusTypeDef HAL_RCCEx_EnablePLL2(RCC_PLL2InitTypeDef  *PLL2Init)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;740    {
000004  4606              MOV      r6,r0
;;;741      uint32_t tickstart = 0U;
;;;742    
;;;743      /* This bit can not be cleared if the PLL2 clock is used indirectly as system
;;;744        clock (i.e. it is used as PLL clock entry that is used as system clock). */
;;;745      if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
000006  4c24              LDR      r4,|L3.152|
000008  6860              LDR      r0,[r4,#4]
00000a  03c0              LSLS     r0,r0,#15
00000c  d50a              BPL      |L3.36|
;;;746          (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
00000e  6860              LDR      r0,[r4,#4]
000010  f3c00081          UBFX     r0,r0,#2,#2
000014  2802              CMP      r0,#2
000016  d105              BNE      |L3.36|
;;;747          ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
000018  6ae0              LDR      r0,[r4,#0x2c]
00001a  03c0              LSLS     r0,r0,#15
00001c  d502              BPL      |L3.36|
;;;748      {
;;;749        return HAL_ERROR;
00001e  2001              MOVS     r0,#1
                  |L3.32|
;;;750      }
;;;751      else
;;;752      {
;;;753        /* Check the parameters */
;;;754        assert_param(IS_RCC_PLL2_MUL(PLL2Init->PLL2MUL));
;;;755        assert_param(IS_RCC_HSE_PREDIV2(PLL2Init->HSEPrediv2Value));
;;;756    
;;;757        /* Prediv2 can be written only when the PLLI2S is disabled. */
;;;758        /* Return an error only if new value is different from the programmed value */
;;;759        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
;;;760            (__HAL_RCC_HSE_GET_PREDIV2() != PLL2Init->HSEPrediv2Value))
;;;761        {
;;;762          return HAL_ERROR;
;;;763        }
;;;764    
;;;765        /* Disable the main PLL2. */
;;;766        __HAL_RCC_PLL2_DISABLE();
;;;767    
;;;768        /* Get Start Tick*/
;;;769        tickstart = HAL_GetTick();
;;;770    
;;;771        /* Wait till PLL2 is disabled */
;;;772        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
;;;773        {
;;;774          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;775          {
;;;776            return HAL_TIMEOUT;
;;;777          }
;;;778        }
;;;779    
;;;780        /* Configure the HSE prediv2 factor --------------------------------*/
;;;781        __HAL_RCC_HSE_PREDIV2_CONFIG(PLL2Init->HSEPrediv2Value);
;;;782    
;;;783        /* Configure the main PLL2 multiplication factors. */
;;;784        __HAL_RCC_PLL2_CONFIG(PLL2Init->PLL2MUL);
;;;785    
;;;786        /* Enable the main PLL2. */
;;;787        __HAL_RCC_PLL2_ENABLE();
;;;788    
;;;789        /* Get Start Tick*/
;;;790        tickstart = HAL_GetTick();
;;;791    
;;;792        /* Wait till PLL2 is ready */
;;;793        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
;;;794        {
;;;795          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;796          {
;;;797            return HAL_TIMEOUT;
;;;798          }
;;;799        }
;;;800      }
;;;801    
;;;802      return HAL_OK;
;;;803    }
000020  e8bd81f0          POP      {r4-r8,pc}
                  |L3.36|
000024  6820              LDR      r0,[r4,#0]            ;759
000026  00c0              LSLS     r0,r0,#3              ;759
000028  d507              BPL      |L3.58|
00002a  6ae0              LDR      r0,[r4,#0x2c]         ;760
00002c  68b1              LDR      r1,[r6,#8]            ;760
00002e  f00000f0          AND      r0,r0,#0xf0           ;760
000032  4288              CMP      r0,r1                 ;760
000034  d001              BEQ      |L3.58|
000036  2001              MOVS     r0,#1                 ;762
000038  e7f2              B        |L3.32|
                  |L3.58|
00003a  4f18              LDR      r7,|L3.156|
00003c  2000              MOVS     r0,#0                 ;766
00003e  66b8              STR      r0,[r7,#0x68]         ;766
000040  f7fffffe          BL       HAL_GetTick
000044  4605              MOV      r5,r0                 ;769
000046  e006              B        |L3.86|
                  |L3.72|
000048  f7fffffe          BL       HAL_GetTick
00004c  1b40              SUBS     r0,r0,r5              ;774
00004e  2864              CMP      r0,#0x64              ;774
000050  d901              BLS      |L3.86|
000052  2003              MOVS     r0,#3                 ;776
000054  e7e4              B        |L3.32|
                  |L3.86|
000056  6820              LDR      r0,[r4,#0]            ;772
000058  0100              LSLS     r0,r0,#4              ;772
00005a  d4f5              BMI      |L3.72|
00005c  6ae0              LDR      r0,[r4,#0x2c]         ;781
00005e  68b1              LDR      r1,[r6,#8]            ;781
000060  f02000f0          BIC      r0,r0,#0xf0           ;781
000064  4308              ORRS     r0,r0,r1              ;781
000066  62e0              STR      r0,[r4,#0x2c]         ;781
000068  6ae0              LDR      r0,[r4,#0x2c]         ;784
00006a  6871              LDR      r1,[r6,#4]            ;784
00006c  f4206070          BIC      r0,r0,#0xf00          ;784
000070  4308              ORRS     r0,r0,r1              ;784
000072  62e0              STR      r0,[r4,#0x2c]         ;784
000074  2001              MOVS     r0,#1                 ;787
000076  66b8              STR      r0,[r7,#0x68]         ;787
000078  f7fffffe          BL       HAL_GetTick
00007c  4605              MOV      r5,r0                 ;790
00007e  e006              B        |L3.142|
                  |L3.128|
000080  f7fffffe          BL       HAL_GetTick
000084  1b40              SUBS     r0,r0,r5              ;795
000086  2864              CMP      r0,#0x64              ;795
000088  d901              BLS      |L3.142|
00008a  2003              MOVS     r0,#3                 ;797
00008c  e7c8              B        |L3.32|
                  |L3.142|
00008e  6820              LDR      r0,[r4,#0]            ;793
000090  0100              LSLS     r0,r0,#4              ;793
000092  d5f5              BPL      |L3.128|
000094  2000              MOVS     r0,#0                 ;802
000096  e7c3              B        |L3.32|
;;;804    
                          ENDP

                  |L3.152|
                          DCD      0x40021000
                  |L3.156|
                          DCD      0x42420000

                          AREA ||i.HAL_RCCEx_EnablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_EnablePLLI2S PROC
;;;612      */
;;;613    HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;614    {
000004  4606              MOV      r6,r0
;;;615      uint32_t tickstart = 0U;
;;;616    
;;;617      /* Check that PLL I2S has not been already enabled by I2S2 or I2S3*/
;;;618      if (HAL_IS_BIT_CLR(RCC->CFGR2, RCC_CFGR2_I2S2SRC) && HAL_IS_BIT_CLR(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
000006  4c22              LDR      r4,|L4.144|
000008  6ae0              LDR      r0,[r4,#0x2c]
00000a  0380              LSLS     r0,r0,#14
00000c  d43d              BMI      |L4.138|
00000e  6ae0              LDR      r0,[r4,#0x2c]
000010  0340              LSLS     r0,r0,#13
000012  d43a              BMI      |L4.138|
;;;619      {
;;;620        /* Check the parameters */
;;;621        assert_param(IS_RCC_PLLI2S_MUL(PLLI2SInit->PLLI2SMUL));
;;;622        assert_param(IS_RCC_HSE_PREDIV2(PLLI2SInit->HSEPrediv2Value));
;;;623    
;;;624        /* Prediv2 can be written only when the PLL2 is disabled. */
;;;625        /* Return an error only if new value is different from the programmed value */
;;;626        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
000014  6820              LDR      r0,[r4,#0]
000016  0140              LSLS     r0,r0,#5
000018  d508              BPL      |L4.44|
;;;627            (__HAL_RCC_HSE_GET_PREDIV2() != PLLI2SInit->HSEPrediv2Value))
00001a  6ae0              LDR      r0,[r4,#0x2c]
00001c  6871              LDR      r1,[r6,#4]
00001e  f00000f0          AND      r0,r0,#0xf0
000022  4288              CMP      r0,r1
000024  d002              BEQ      |L4.44|
;;;628        {
;;;629          return HAL_ERROR;
000026  2001              MOVS     r0,#1
                  |L4.40|
;;;630        }
;;;631    
;;;632        /* Disable the main PLLI2S. */
;;;633        __HAL_RCC_PLLI2S_DISABLE();
;;;634    
;;;635        /* Get Start Tick*/
;;;636        tickstart = HAL_GetTick();
;;;637    
;;;638        /* Wait till PLLI2S is ready */
;;;639        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
;;;640        {
;;;641          if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;642          {
;;;643            return HAL_TIMEOUT;
;;;644          }
;;;645        }
;;;646    
;;;647        /* Configure the HSE prediv2 factor --------------------------------*/
;;;648        __HAL_RCC_HSE_PREDIV2_CONFIG(PLLI2SInit->HSEPrediv2Value);
;;;649    
;;;650    
;;;651        /* Configure the main PLLI2S multiplication factors. */
;;;652        __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SMUL);
;;;653    
;;;654        /* Enable the main PLLI2S. */
;;;655        __HAL_RCC_PLLI2S_ENABLE();
;;;656    
;;;657        /* Get Start Tick*/
;;;658        tickstart = HAL_GetTick();
;;;659    
;;;660        /* Wait till PLLI2S is ready */
;;;661        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
;;;662        {
;;;663          if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;664          {
;;;665            return HAL_TIMEOUT;
;;;666          }
;;;667        }
;;;668      }
;;;669      else
;;;670      {
;;;671        /* PLLI2S cannot be modified as already used by I2S2 or I2S3 */
;;;672        return HAL_ERROR;
;;;673      }
;;;674    
;;;675      return HAL_OK;
;;;676    }
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L4.44|
00002c  4f19              LDR      r7,|L4.148|
00002e  2000              MOVS     r0,#0                 ;633
000030  6738              STR      r0,[r7,#0x70]         ;633
000032  f7fffffe          BL       HAL_GetTick
000036  4605              MOV      r5,r0                 ;636
000038  e006              B        |L4.72|
                  |L4.58|
00003a  f7fffffe          BL       HAL_GetTick
00003e  1b40              SUBS     r0,r0,r5              ;641
000040  2864              CMP      r0,#0x64              ;641
000042  d901              BLS      |L4.72|
000044  2003              MOVS     r0,#3                 ;643
000046  e7ef              B        |L4.40|
                  |L4.72|
000048  6820              LDR      r0,[r4,#0]            ;639
00004a  0080              LSLS     r0,r0,#2              ;639
00004c  d4f5              BMI      |L4.58|
00004e  6ae0              LDR      r0,[r4,#0x2c]         ;648
000050  6871              LDR      r1,[r6,#4]            ;648
000052  f02000f0          BIC      r0,r0,#0xf0           ;648
000056  4308              ORRS     r0,r0,r1              ;648
000058  62e0              STR      r0,[r4,#0x2c]         ;648
00005a  6ae0              LDR      r0,[r4,#0x2c]         ;652
00005c  6831              LDR      r1,[r6,#0]            ;652
00005e  f4204070          BIC      r0,r0,#0xf000         ;652
000062  4308              ORRS     r0,r0,r1              ;652
000064  62e0              STR      r0,[r4,#0x2c]         ;652
000066  2001              MOVS     r0,#1                 ;655
000068  6738              STR      r0,[r7,#0x70]         ;655
00006a  f7fffffe          BL       HAL_GetTick
00006e  4605              MOV      r5,r0                 ;658
000070  e006              B        |L4.128|
                  |L4.114|
000072  f7fffffe          BL       HAL_GetTick
000076  1b40              SUBS     r0,r0,r5              ;663
000078  2864              CMP      r0,#0x64              ;663
00007a  d901              BLS      |L4.128|
00007c  2003              MOVS     r0,#3                 ;665
00007e  e7d3              B        |L4.40|
                  |L4.128|
000080  6820              LDR      r0,[r4,#0]            ;661
000082  0080              LSLS     r0,r0,#2              ;661
000084  d5f5              BPL      |L4.114|
000086  2000              MOVS     r0,#0                 ;675
000088  e7ce              B        |L4.40|
                  |L4.138|
00008a  2001              MOVS     r0,#1                 ;672
00008c  e7cc              B        |L4.40|
;;;677    
                          ENDP

00008e  0000              DCW      0x0000
                  |L4.144|
                          DCD      0x40021000
                  |L4.148|
                          DCD      0x42420000

                          AREA ||i.HAL_RCCEx_GetPeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKConfig PROC
;;;293      */
;;;294    void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  2101              MOVS     r1,#1
;;;295    {
;;;296      uint32_t srcclk = 0U;
;;;297    
;;;298      /* Set all possible values for the extended clock type parameter------------*/
;;;299      PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_RTC;
000002  6001              STR      r1,[r0,#0]
;;;300    
;;;301      /* Get the RTC configuration -----------------------------------------------*/
;;;302      srcclk = __HAL_RCC_GET_RTC_SOURCE();
000004  490e              LDR      r1,|L5.64|
000006  6a0a              LDR      r2,[r1,#0x20]
000008  f4027240          AND      r2,r2,#0x300
;;;303      /* Source clock is LSE or LSI*/
;;;304      PeriphClkInit->RTCClockSelection = srcclk;
00000c  6042              STR      r2,[r0,#4]
;;;305    
;;;306      /* Get the ADC clock configuration -----------------------------------------*/
;;;307      PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC;
00000e  2203              MOVS     r2,#3
000010  6002              STR      r2,[r0,#0]
;;;308      PeriphClkInit->AdcClockSelection = __HAL_RCC_GET_ADC_SOURCE();
000012  684a              LDR      r2,[r1,#4]
000014  f4024240          AND      r2,r2,#0xc000
000018  6082              STR      r2,[r0,#8]
;;;309    
;;;310    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;311      /* Get the I2S2 clock configuration -----------------------------------------*/
;;;312      PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S2;
00001a  2207              MOVS     r2,#7
00001c  6002              STR      r2,[r0,#0]
;;;313      PeriphClkInit->I2s2ClockSelection = __HAL_RCC_GET_I2S2_SOURCE();
00001e  6aca              LDR      r2,[r1,#0x2c]
000020  f4023200          AND      r2,r2,#0x20000
000024  60c2              STR      r2,[r0,#0xc]
;;;314    
;;;315      /* Get the I2S3 clock configuration -----------------------------------------*/
;;;316      PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S3;
000026  220f              MOVS     r2,#0xf
000028  6002              STR      r2,[r0,#0]
;;;317      PeriphClkInit->I2s3ClockSelection = __HAL_RCC_GET_I2S3_SOURCE();
00002a  6aca              LDR      r2,[r1,#0x2c]
00002c  f4022280          AND      r2,r2,#0x40000
000030  6102              STR      r2,[r0,#0x10]
;;;318    
;;;319    #endif /* STM32F105xC || STM32F107xC */
;;;320    
;;;321    #if defined(STM32F103xE) || defined(STM32F103xG)
;;;322      /* Get the I2S2 clock configuration -----------------------------------------*/
;;;323      PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S2;
;;;324      PeriphClkInit->I2s2ClockSelection = RCC_I2S2CLKSOURCE_SYSCLK;
;;;325    
;;;326      /* Get the I2S3 clock configuration -----------------------------------------*/
;;;327      PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S3;
;;;328      PeriphClkInit->I2s3ClockSelection = RCC_I2S3CLKSOURCE_SYSCLK;
;;;329    
;;;330    #endif /* STM32F103xE || STM32F103xG */
;;;331    
;;;332    #if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
;;;333     || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
;;;334     || defined(STM32F105xC) || defined(STM32F107xC)
;;;335      /* Get the USB clock configuration -----------------------------------------*/
;;;336      PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USB;
000032  221f              MOVS     r2,#0x1f
000034  6002              STR      r2,[r0,#0]
;;;337      PeriphClkInit->UsbClockSelection = __HAL_RCC_GET_USB_SOURCE();
000036  6849              LDR      r1,[r1,#4]
000038  f4010180          AND      r1,r1,#0x400000
00003c  61c1              STR      r1,[r0,#0x1c]
;;;338    #endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
;;;339    }
00003e  4770              BX       lr
;;;340    
                          ENDP

                  |L5.64|
                          DCD      0x40021000

                          AREA ||i.HAL_RCCEx_GetPeriphCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKFreq PROC
;;;386      */
;;;387    uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
000000  b530              PUSH     {r4,r5,lr}
;;;388    {
000002  b089              SUB      sp,sp,#0x24
000004  4601              MOV      r1,r0
;;;389    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;390      const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
000006  a054              ADR      r0,|L6.344|
000008  e9d03400          LDRD     r3,r4,[r0,#0]
00000c  e9d02002          LDRD     r2,r0,[r0,#8]
000010  e9cd3405          STRD     r3,r4,[sp,#0x14]
000014  e9cd2007          STRD     r2,r0,[sp,#0x1c]
;;;391      const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
000018  a053              ADR      r0,|L6.360|
00001a  e9d04301          LDRD     r4,r3,[r0,#4]
00001e  6802              LDR      r2,[r0,#0]
000020  68c0              LDR      r0,[r0,#0xc]
000022  e9cd4302          STRD     r4,r3,[sp,#8]
000026  9201              STR      r2,[sp,#4]
000028  9004              STR      r0,[sp,#0x10]
;;;392    
;;;393      uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
;;;394      uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
;;;395    #endif /* STM32F105xC || STM32F107xC */
;;;396    #if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
;;;397        defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
;;;398      const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
;;;399      const uint8_t aPredivFactorTable[2] = {1, 2};
;;;400    
;;;401      uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
;;;402    #endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
;;;403      uint32_t temp_reg = 0U, frequency = 0U;
00002a  2000              MOVS     r0,#0
;;;404    
;;;405      /* Check the parameters */
;;;406      assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
;;;407    
;;;408      switch (PeriphClk)
;;;409      {
;;;410    #if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
;;;411     || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
;;;412     || defined(STM32F105xC) || defined(STM32F107xC)
;;;413        case RCC_PERIPHCLK_USB:
;;;414        {
;;;415          /* Get RCC configuration ------------------------------------------------------*/
;;;416          temp_reg = RCC->CFGR;
;;;417    
;;;418          /* Check if PLL is enabled */
;;;419          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
;;;420          {
;;;421            pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
;;;422            if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
;;;423            {
;;;424    #if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
;;;425     || defined(STM32F100xE)
;;;426              prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
;;;427    #else
;;;428              prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
;;;429    #endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */
;;;430    
;;;431    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;432              if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
;;;433              {
;;;434                /* PLL2 selected as Prediv1 source */
;;;435                /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
;;;436                prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
;;;437                pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
;;;438                pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
00002c  4b52              LDR      r3,|L6.376|
00002e  4c53              LDR      r4,|L6.380|
000030  2904              CMP      r1,#4                 ;408
000032  d047              BEQ      |L6.196|
000034  dc0e              BGT      |L6.84|
000036  2901              CMP      r1,#1                 ;408
000038  d075              BEQ      |L6.294|
00003a  2902              CMP      r1,#2                 ;408
00003c  d108              BNE      |L6.80|
;;;439              }
;;;440              else
;;;441              {
;;;442                /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;443                pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
;;;444              }
;;;445    
;;;446              /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
;;;447              /* In this case need to divide pllclk by 2 */
;;;448              if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
;;;449              {
;;;450                pllclk = pllclk / 2;
;;;451              }
;;;452    #else
;;;453              if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
;;;454              {
;;;455                /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;456                pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
;;;457              }
;;;458    #endif /* STM32F105xC || STM32F107xC */
;;;459            }
;;;460            else
;;;461            {
;;;462              /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
;;;463              pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
;;;464            }
;;;465    
;;;466            /* Calcul of the USB frequency*/
;;;467    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;468            /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
;;;469            if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
;;;470            {
;;;471              /* Prescaler of 2 selected for USB */
;;;472              frequency = pllclk;
;;;473            }
;;;474            else
;;;475            {
;;;476              /* Prescaler of 3 selected for USB */
;;;477              frequency = (2 * pllclk) / 3;
;;;478            }
;;;479    #else
;;;480            /* USBCLK = PLLCLK / USB prescaler */
;;;481            if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
;;;482            {
;;;483              /* No prescaler selected for USB */
;;;484              frequency = pllclk;
;;;485            }
;;;486            else
;;;487            {
;;;488              /* Prescaler of 1.5 selected for USB */
;;;489              frequency = (pllclk * 2) / 3;
;;;490            }
;;;491    #endif
;;;492          }
;;;493          break;
;;;494        }
;;;495    #endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
;;;496    #if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
;;;497        case RCC_PERIPHCLK_I2S2:
;;;498        {
;;;499    #if defined(STM32F103xE) || defined(STM32F103xG)
;;;500          /* SYSCLK used as source clock for I2S2 */
;;;501          frequency = HAL_RCC_GetSysClockFreq();
;;;502    #else
;;;503          if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
;;;504          {
;;;505            /* SYSCLK used as source clock for I2S2 */
;;;506            frequency = HAL_RCC_GetSysClockFreq();
;;;507          }
;;;508          else
;;;509          {
;;;510            /* Check if PLLI2S is enabled */
;;;511            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
;;;512            {
;;;513              /* PLLI2SVCO = 2 * PLLI2SCLK = 2 * (HSE/PREDIV2 * PLL3MUL) */
;;;514              prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
;;;515              pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
;;;516              frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
;;;517            }
;;;518          }
;;;519    #endif /* STM32F103xE || STM32F103xG */
;;;520          break;
;;;521        }
;;;522        case RCC_PERIPHCLK_I2S3:
;;;523        {
;;;524    #if defined(STM32F103xE) || defined(STM32F103xG)
;;;525          /* SYSCLK used as source clock for I2S3 */
;;;526          frequency = HAL_RCC_GetSysClockFreq();
;;;527    #else
;;;528          if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
;;;529          {
;;;530            /* SYSCLK used as source clock for I2S3 */
;;;531            frequency = HAL_RCC_GetSysClockFreq();
;;;532          }
;;;533          else
;;;534          {
;;;535            /* Check if PLLI2S is enabled */
;;;536            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
;;;537            {
;;;538              /* PLLI2SVCO = 2 * PLLI2SCLK = 2 * (HSE/PREDIV2 * PLL3MUL) */
;;;539              prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
;;;540              pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
;;;541              frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
;;;542            }
;;;543          }
;;;544    #endif /* STM32F103xE || STM32F103xG */
;;;545          break;
;;;546        }
;;;547    #endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
;;;548        case RCC_PERIPHCLK_RTC:
;;;549        {
;;;550          /* Get RCC BDCR configuration ------------------------------------------------------*/
;;;551          temp_reg = RCC->BDCR;
;;;552    
;;;553          /* Check if LSE is ready if RTC clock selection is LSE */
;;;554          if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
;;;555          {
;;;556            frequency = LSE_VALUE;
;;;557          }
;;;558          /* Check if LSI is ready if RTC clock selection is LSI */
;;;559          else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
;;;560          {
;;;561            frequency = LSI_VALUE;
;;;562          }
;;;563          else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
;;;564          {
;;;565            frequency = HSE_VALUE / 128U;
;;;566          }
;;;567          /* Clock not enabled for RTC*/
;;;568          else
;;;569          {
;;;570            /* nothing to do: frequency already initialized to 0U */
;;;571          }
;;;572          break;
;;;573        }
;;;574        case RCC_PERIPHCLK_ADC:
;;;575        {
;;;576          frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
00003e  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
000042  6861              LDR      r1,[r4,#4]
000044  f3c13181          UBFX     r1,r1,#14,#2
000048  1c49              ADDS     r1,r1,#1
00004a  0049              LSLS     r1,r1,#1
00004c  fbb0f0f1          UDIV     r0,r0,r1
                  |L6.80|
;;;577          break;
;;;578        }
;;;579        default:
;;;580        {
;;;581          break;
;;;582        }
;;;583      }
;;;584      return (frequency);
;;;585    }
000050  b009              ADD      sp,sp,#0x24
000052  bd30              POP      {r4,r5,pc}
                  |L6.84|
000054  2908              CMP      r1,#8                 ;408
000056  d04d              BEQ      |L6.244|
000058  2910              CMP      r1,#0x10              ;408
00005a  d1f9              BNE      |L6.80|
00005c  6862              LDR      r2,[r4,#4]            ;416
00005e  6821              LDR      r1,[r4,#0]            ;419
000060  01c9              LSLS     r1,r1,#7              ;419
000062  d5f5              BPL      |L6.80|
000064  a805              ADD      r0,sp,#0x14           ;421
000066  f3c24183          UBFX     r1,r2,#18,#4          ;421
00006a  5c41              LDRB     r1,[r0,r1]            ;421
00006c  03d0              LSLS     r0,r2,#15             ;422
00006e  d51f              BPL      |L6.176|
000070  6ae0              LDR      r0,[r4,#0x2c]         ;426
000072  aa01              ADD      r2,sp,#4              ;426
000074  f000000f          AND      r0,r0,#0xf            ;426
000078  5c10              LDRB     r0,[r2,r0]            ;426
00007a  6ae2              LDR      r2,[r4,#0x2c]         ;432
00007c  03d2              LSLS     r2,r2,#15             ;432
00007e  d50e              BPL      |L6.158|
000080  6ae2              LDR      r2,[r4,#0x2c]         ;436
000082  f3c21203          UBFX     r2,r2,#4,#4           ;436
000086  1c52              ADDS     r2,r2,#1              ;436
000088  6ae5              LDR      r5,[r4,#0x2c]         ;437
00008a  f3c52503          UBFX     r5,r5,#8,#4           ;437
00008e  1cad              ADDS     r5,r5,#2              ;437
000090  fbb3f2f2          UDIV     r2,r3,r2              ;438
000094  436a              MULS     r2,r5,r2              ;438
000096  fbb2f0f0          UDIV     r0,r2,r0              ;438
00009a  4348              MULS     r0,r1,r0              ;438
00009c  e002              B        |L6.164|
                  |L6.158|
00009e  fbb3f0f0          UDIV     r0,r3,r0              ;443
0000a2  4348              MULS     r0,r1,r0              ;443
                  |L6.164|
0000a4  f89d2021          LDRB     r2,[sp,#0x21]         ;448
0000a8  428a              CMP      r2,r1                 ;448
0000aa  d103              BNE      |L6.180|
0000ac  0840              LSRS     r0,r0,#1              ;450
0000ae  e001              B        |L6.180|
                  |L6.176|
0000b0  4833              LDR      r0,|L6.384|
0000b2  4348              MULS     r0,r1,r0              ;463
                  |L6.180|
0000b4  6861              LDR      r1,[r4,#4]            ;469
0000b6  0249              LSLS     r1,r1,#9              ;469
0000b8  d4ca              BMI      |L6.80|
0000ba  0040              LSLS     r0,r0,#1              ;477
0000bc  2103              MOVS     r1,#3                 ;477
0000be  fbb0f0f1          UDIV     r0,r0,r1              ;477
                  |L6.194|
0000c2  e7c5              B        |L6.80|
                  |L6.196|
0000c4  6ae1              LDR      r1,[r4,#0x2c]         ;503
0000c6  0389              LSLS     r1,r1,#14             ;503
0000c8  d404              BMI      |L6.212|
0000ca  b009              ADD      sp,sp,#0x24           ;506
0000cc  e8bd4030          POP      {r4,r5,lr}            ;506
0000d0  f7ffbffe          B.W      HAL_RCC_GetSysClockFreq
                  |L6.212|
0000d4  6821              LDR      r1,[r4,#0]            ;511
0000d6  00c9              LSLS     r1,r1,#3              ;511
0000d8  d5ba              BPL      |L6.80|
0000da  6ae0              LDR      r0,[r4,#0x2c]         ;514
0000dc  f3c01003          UBFX     r0,r0,#4,#4           ;514
0000e0  1c40              ADDS     r0,r0,#1              ;514
0000e2  6ae1              LDR      r1,[r4,#0x2c]         ;515
0000e4  f3c13103          UBFX     r1,r1,#12,#4          ;515
0000e8  1c89              ADDS     r1,r1,#2              ;515
0000ea  fbb3f0f0          UDIV     r0,r3,r0              ;516
0000ee  4348              MULS     r0,r1,r0              ;516
0000f0  0040              LSLS     r0,r0,#1              ;516
0000f2  e7ad              B        |L6.80|
                  |L6.244|
0000f4  6ae1              LDR      r1,[r4,#0x2c]         ;528
0000f6  0349              LSLS     r1,r1,#13             ;528
0000f8  d404              BMI      |L6.260|
0000fa  b009              ADD      sp,sp,#0x24           ;531
0000fc  e8bd4030          POP      {r4,r5,lr}            ;531
000100  f7ffbffe          B.W      HAL_RCC_GetSysClockFreq
                  |L6.260|
000104  6821              LDR      r1,[r4,#0]            ;536
000106  00c9              LSLS     r1,r1,#3              ;536
000108  d5a2              BPL      |L6.80|
00010a  6ae0              LDR      r0,[r4,#0x2c]         ;539
00010c  f3c01003          UBFX     r0,r0,#4,#4           ;539
000110  1c40              ADDS     r0,r0,#1              ;539
000112  6ae1              LDR      r1,[r4,#0x2c]         ;540
000114  f3c13103          UBFX     r1,r1,#12,#4          ;540
000118  1c89              ADDS     r1,r1,#2              ;540
00011a  fbb3f0f0          UDIV     r0,r3,r0              ;541
00011e  4348              MULS     r0,r1,r0              ;541
000120  0040              LSLS     r0,r0,#1              ;541
000122  e795              B        |L6.80|
000124  e7ff              B        |L6.294|
                  |L6.294|
000126  6a21              LDR      r1,[r4,#0x20]         ;551
000128  f3c12201          UBFX     r2,r1,#8,#2           ;554
00012c  2a01              CMP      r2,#1                 ;554
00012e  d103              BNE      |L6.312|
000130  0789              LSLS     r1,r1,#30             ;554
000132  d501              BPL      |L6.312|
000134  03d0              LSLS     r0,r2,#15             ;556
000136  e78b              B        |L6.80|
                  |L6.312|
000138  2a02              CMP      r2,#2                 ;559
00013a  d105              BNE      |L6.328|
00013c  6a61              LDR      r1,[r4,#0x24]         ;559
00013e  0789              LSLS     r1,r1,#30             ;559
000140  d502              BPL      |L6.328|
000142  f6494040          MOV      r0,#0x9c40            ;561
000146  e783              B        |L6.80|
                  |L6.328|
000148  2a03              CMP      r2,#3                 ;563
00014a  d181              BNE      |L6.80|
00014c  6821              LDR      r1,[r4,#0]            ;563
00014e  0389              LSLS     r1,r1,#14             ;563
000150  d5b7              BPL      |L6.194|
000152  480c              LDR      r0,|L6.388|
000154  e77c              B        |L6.80|
;;;586    
                          ENDP

000156  0000              DCW      0x0000
                  |L6.344|
000158  00                DCB      0
000159  00                DCB      0
00015a  04050607          DCB      4,5,6,"\a\b\t",0
00015e  080900  
000161  00                DCB      0
000162  00                DCB      0
000163  00                DCB      0
000164  00                DCB      0
000165  0d00              DCB      "\r",0
000167  00                DCB      0
                  |L6.360|
000168  01020304          DCB      1,2,3,4,5,6,"\a\b\t\n\v\f\r",14,15,16
00016c  05060708
000170  090a0b0c
000174  0d0e0f10
                  |L6.376|
                          DCD      0x017d7840
                  |L6.380|
                          DCD      0x40021000
                  |L6.384|
                          DCD      0x003d0900
                  |L6.388|
                          DCD      0x0002faf0

                          AREA ||i.HAL_RCCEx_PeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_PeriphCLKConfig PROC
;;;99       */
;;;100    HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;101    {
000004  4604              MOV      r4,r0
;;;102      uint32_t tickstart = 0U, temp_reg = 0U;
;;;103    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;104      uint32_t  pllactive = 0U;
000006  2600              MOVS     r6,#0
;;;105    #endif /* STM32F105xC || STM32F107xC */
;;;106    
;;;107      /* Check the parameters */
;;;108      assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
;;;109    
;;;110      /*------------------------------- RTC/LCD Configuration ------------------------*/
;;;111      if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
000008  7820              LDRB     r0,[r4,#0]
;;;112      {
;;;113        /* check for RTC Parameters used to output RTCCLK */
;;;114        assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
;;;115    
;;;116        FlagStatus       pwrclkchanged = RESET;
;;;117    
;;;118        /* As soon as function is called to change RTC clock source, activation of the
;;;119           power domain is done. */
;;;120        /* Requires to enable write access to Backup Domain of necessary */
;;;121        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
00000a  4d61              LDR      r5,|L7.400|
00000c  07c0              LSLS     r0,r0,#31             ;111
;;;122        {
;;;123          __HAL_RCC_PWR_CLK_ENABLE();
;;;124          pwrclkchanged = SET;
00000e  f04f0901          MOV      r9,#1
000012  d05a              BEQ      |L7.202|
000014  2700              MOVS     r7,#0                 ;116
000016  69e8              LDR      r0,[r5,#0x1c]         ;121
000018  00c0              LSLS     r0,r0,#3              ;121
00001a  d408              BMI      |L7.46|
00001c  69e8              LDR      r0,[r5,#0x1c]         ;123
00001e  f0405080          ORR      r0,r0,#0x10000000     ;123
000022  61e8              STR      r0,[r5,#0x1c]         ;123
000024  69e8              LDR      r0,[r5,#0x1c]         ;123
000026  f0005080          AND      r0,r0,#0x10000000     ;123
00002a  9000              STR      r0,[sp,#0]            ;123
00002c  2701              MOVS     r7,#1
                  |L7.46|
;;;125        }
;;;126    
;;;127        if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
00002e  f8dfa164          LDR      r10,|L7.404|
000032  f8da0000          LDR      r0,[r10,#0]
000036  05c0              LSLS     r0,r0,#23
000038  d416              BMI      |L7.104|
;;;128        {
;;;129          /* Enable write access to Backup domain */
;;;130          SET_BIT(PWR->CR, PWR_CR_DBP);
00003a  f8da0000          LDR      r0,[r10,#0]
00003e  f4407080          ORR      r0,r0,#0x100
000042  f8ca0000          STR      r0,[r10,#0]
;;;131    
;;;132          /* Wait for Backup domain Write protection disable */
;;;133          tickstart = HAL_GetTick();
000046  f7fffffe          BL       HAL_GetTick
00004a  4680              MOV      r8,r0
;;;134    
;;;135          while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
00004c  e008              B        |L7.96|
                  |L7.78|
;;;136          {
;;;137            if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
00004e  f7fffffe          BL       HAL_GetTick
000052  eba00008          SUB      r0,r0,r8
000056  2864              CMP      r0,#0x64
000058  d902              BLS      |L7.96|
;;;138            {
;;;139              return HAL_TIMEOUT;
00005a  2003              MOVS     r0,#3
                  |L7.92|
;;;140            }
;;;141          }
;;;142        }
;;;143    
;;;144        /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
;;;145        temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
;;;146        if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
;;;147        {
;;;148          /* Store the content of BDCR register before the reset of Backup Domain */
;;;149          temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
;;;150          /* RTC Clock selection can be changed only if the Backup Domain is reset */
;;;151          __HAL_RCC_BACKUPRESET_FORCE();
;;;152          __HAL_RCC_BACKUPRESET_RELEASE();
;;;153          /* Restore the Content of BDCR register */
;;;154          RCC->BDCR = temp_reg;
;;;155    
;;;156          /* Wait for LSERDY if LSE was enabled */
;;;157          if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
;;;158          {
;;;159            /* Get Start Tick */
;;;160            tickstart = HAL_GetTick();
;;;161    
;;;162            /* Wait till LSE is ready */
;;;163            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;164            {
;;;165              if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
;;;166              {
;;;167                return HAL_TIMEOUT;
;;;168              }
;;;169            }
;;;170          }
;;;171        }
;;;172        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
;;;173    
;;;174        /* Require to disable power clock if necessary */
;;;175        if (pwrclkchanged == SET)
;;;176        {
;;;177          __HAL_RCC_PWR_CLK_DISABLE();
;;;178        }
;;;179      }
;;;180    
;;;181      /*------------------------------ ADC clock Configuration ------------------*/
;;;182      if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
;;;183      {
;;;184        /* Check the parameters */
;;;185        assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
;;;186    
;;;187        /* Configure the ADC clock source */
;;;188        __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
;;;189      }
;;;190    
;;;191    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;192      /*------------------------------ I2S2 Configuration ------------------------*/
;;;193      if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
;;;194      {
;;;195        /* Check the parameters */
;;;196        assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));
;;;197    
;;;198        /* Configure the I2S2 clock source */
;;;199        __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
;;;200      }
;;;201    
;;;202      /*------------------------------ I2S3 Configuration ------------------------*/
;;;203      if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
;;;204      {
;;;205        /* Check the parameters */
;;;206        assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
;;;207    
;;;208        /* Configure the I2S3 clock source */
;;;209        __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
;;;210      }
;;;211    
;;;212      /*------------------------------ PLL I2S Configuration ----------------------*/
;;;213      /* Check that PLLI2S need to be enabled */
;;;214      if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
;;;215      {
;;;216        /* Update flag to indicate that PLL I2S should be active */
;;;217        pllactive = 1;
;;;218      }
;;;219    
;;;220      /* Check if PLL I2S need to be enabled */
;;;221      if (pllactive == 1)
;;;222      {
;;;223        /* Enable PLL I2S only if not active */
;;;224        if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
;;;225        {
;;;226          /* Check the parameters */
;;;227          assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
;;;228          assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));
;;;229    
;;;230          /* Prediv2 can be written only when the PLL2 is disabled. */
;;;231          /* Return an error only if new value is different from the programmed value */
;;;232          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
;;;233              (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
;;;234          {
;;;235            return HAL_ERROR;
;;;236          }
;;;237    
;;;238          /* Configure the HSE prediv2 factor --------------------------------*/
;;;239          __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
;;;240    
;;;241          /* Configure the main PLLI2S multiplication factors. */
;;;242          __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
;;;243    
;;;244          /* Enable the main PLLI2S. */
;;;245          __HAL_RCC_PLLI2S_ENABLE();
;;;246    
;;;247          /* Get Start Tick*/
;;;248          tickstart = HAL_GetTick();
;;;249    
;;;250          /* Wait till PLLI2S is ready */
;;;251          while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
;;;252          {
;;;253            if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;254            {
;;;255              return HAL_TIMEOUT;
;;;256            }
;;;257          }
;;;258        }
;;;259        else
;;;260        {
;;;261          /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
;;;262          if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
;;;263          {
;;;264            return HAL_ERROR;
;;;265          }
;;;266        }
;;;267      }
;;;268    #endif /* STM32F105xC || STM32F107xC */
;;;269    
;;;270    #if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
;;;271     || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
;;;272     || defined(STM32F105xC) || defined(STM32F107xC)
;;;273      /*------------------------------ USB clock Configuration ------------------*/
;;;274      if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
;;;275      {
;;;276        /* Check the parameters */
;;;277        assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
;;;278    
;;;279        /* Configure the USB clock source */
;;;280        __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
;;;281      }
;;;282    #endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
;;;283    
;;;284      return HAL_OK;
;;;285    }
00005c  e8bd8ff8          POP      {r3-r11,pc}
                  |L7.96|
000060  f8da0000          LDR      r0,[r10,#0]           ;135
000064  05c0              LSLS     r0,r0,#23             ;135
000066  d5f2              BPL      |L7.78|
                  |L7.104|
000068  6a28              LDR      r0,[r5,#0x20]         ;145
00006a  f4007040          AND      r0,r0,#0x300          ;145
00006e  b300              CBZ      r0,|L7.178|
000070  88a1              LDRH     r1,[r4,#4]            ;146
000072  f4017140          AND      r1,r1,#0x300          ;146
000076  4281              CMP      r1,r0                 ;146
000078  d01b              BEQ      |L7.178|
00007a  6a28              LDR      r0,[r5,#0x20]         ;149
00007c  f4207040          BIC      r0,r0,#0x300          ;149
000080  4945              LDR      r1,|L7.408|
000082  f8c19000          STR      r9,[r1,#0]            ;151
000086  2200              MOVS     r2,#0                 ;152
000088  600a              STR      r2,[r1,#0]            ;152
00008a  6228              STR      r0,[r5,#0x20]         ;154
00008c  07c0              LSLS     r0,r0,#31             ;157
00008e  d010              BEQ      |L7.178|
000090  f7fffffe          BL       HAL_GetTick
000094  4680              MOV      r8,r0                 ;160
000096  f2413a88          MOV      r10,#0x1388           ;165
00009a  e007              B        |L7.172|
                  |L7.156|
00009c  f7fffffe          BL       HAL_GetTick
0000a0  eba00008          SUB      r0,r0,r8              ;165
0000a4  4550              CMP      r0,r10                ;165
0000a6  d901              BLS      |L7.172|
0000a8  2003              MOVS     r0,#3                 ;167
0000aa  e7d7              B        |L7.92|
                  |L7.172|
0000ac  6a28              LDR      r0,[r5,#0x20]         ;163
0000ae  0780              LSLS     r0,r0,#30             ;163
0000b0  d5f4              BPL      |L7.156|
                  |L7.178|
0000b2  6a28              LDR      r0,[r5,#0x20]         ;172
0000b4  6861              LDR      r1,[r4,#4]            ;172
0000b6  f4207040          BIC      r0,r0,#0x300          ;172
0000ba  4308              ORRS     r0,r0,r1              ;172
0000bc  6228              STR      r0,[r5,#0x20]         ;172
0000be  2f01              CMP      r7,#1                 ;175
0000c0  d103              BNE      |L7.202|
0000c2  69e8              LDR      r0,[r5,#0x1c]         ;177
0000c4  f0205080          BIC      r0,r0,#0x10000000     ;177
0000c8  61e8              STR      r0,[r5,#0x1c]         ;177
                  |L7.202|
0000ca  7820              LDRB     r0,[r4,#0]            ;182
0000cc  0780              LSLS     r0,r0,#30             ;182
0000ce  d505              BPL      |L7.220|
0000d0  6868              LDR      r0,[r5,#4]            ;188
0000d2  68a1              LDR      r1,[r4,#8]            ;188
0000d4  f4204040          BIC      r0,r0,#0xc000         ;188
0000d8  4308              ORRS     r0,r0,r1              ;188
0000da  6068              STR      r0,[r5,#4]            ;188
                  |L7.220|
0000dc  7820              LDRB     r0,[r4,#0]            ;193
0000de  0740              LSLS     r0,r0,#29             ;193
0000e0  d505              BPL      |L7.238|
0000e2  6ae8              LDR      r0,[r5,#0x2c]         ;199
0000e4  68e1              LDR      r1,[r4,#0xc]          ;199
0000e6  f4203000          BIC      r0,r0,#0x20000        ;199
0000ea  4308              ORRS     r0,r0,r1              ;199
0000ec  62e8              STR      r0,[r5,#0x2c]         ;199
                  |L7.238|
0000ee  7820              LDRB     r0,[r4,#0]            ;203
0000f0  0700              LSLS     r0,r0,#28             ;203
0000f2  d505              BPL      |L7.256|
0000f4  6ae8              LDR      r0,[r5,#0x2c]         ;209
0000f6  6921              LDR      r1,[r4,#0x10]         ;209
0000f8  f4202080          BIC      r0,r0,#0x40000        ;209
0000fc  4308              ORRS     r0,r0,r1              ;209
0000fe  62e8              STR      r0,[r5,#0x2c]         ;209
                  |L7.256|
000100  6ae8              LDR      r0,[r5,#0x2c]         ;214
000102  0380              LSLS     r0,r0,#14             ;214
000104  d402              BMI      |L7.268|
000106  6ae8              LDR      r0,[r5,#0x2c]         ;214
000108  0340              LSLS     r0,r0,#13             ;214
00010a  d500              BPL      |L7.270|
                  |L7.268|
00010c  2601              MOVS     r6,#1                 ;217
                  |L7.270|
00010e  2e01              CMP      r6,#1                 ;221
000110  d133              BNE      |L7.378|
000112  6828              LDR      r0,[r5,#0]            ;224
000114  00c0              LSLS     r0,r0,#3              ;224
000116  d428              BMI      |L7.362|
000118  6828              LDR      r0,[r5,#0]            ;232
00011a  0140              LSLS     r0,r0,#5              ;232
00011c  d507              BPL      |L7.302|
00011e  6ae8              LDR      r0,[r5,#0x2c]         ;233
000120  69a1              LDR      r1,[r4,#0x18]         ;233
000122  f00000f0          AND      r0,r0,#0xf0           ;233
000126  4288              CMP      r0,r1                 ;233
000128  d001              BEQ      |L7.302|
00012a  2001              MOVS     r0,#1                 ;235
00012c  e796              B        |L7.92|
                  |L7.302|
00012e  6ae8              LDR      r0,[r5,#0x2c]         ;239
000130  69a1              LDR      r1,[r4,#0x18]         ;239
000132  f02000f0          BIC      r0,r0,#0xf0           ;239
000136  4308              ORRS     r0,r0,r1              ;239
000138  62e8              STR      r0,[r5,#0x2c]         ;239
00013a  6ae8              LDR      r0,[r5,#0x2c]         ;242
00013c  6961              LDR      r1,[r4,#0x14]         ;242
00013e  f4204070          BIC      r0,r0,#0xf000         ;242
000142  4308              ORRS     r0,r0,r1              ;242
000144  62e8              STR      r0,[r5,#0x2c]         ;242
000146  4815              LDR      r0,|L7.412|
000148  f8c09070          STR      r9,[r0,#0x70]         ;245
00014c  f7fffffe          BL       HAL_GetTick
000150  4606              MOV      r6,r0                 ;248
000152  e006              B        |L7.354|
                  |L7.340|
000154  f7fffffe          BL       HAL_GetTick
000158  1b80              SUBS     r0,r0,r6              ;253
00015a  2864              CMP      r0,#0x64              ;253
00015c  d901              BLS      |L7.354|
00015e  2003              MOVS     r0,#3                 ;255
000160  e77c              B        |L7.92|
                  |L7.354|
000162  6828              LDR      r0,[r5,#0]            ;251
000164  0080              LSLS     r0,r0,#2              ;251
000166  d5f5              BPL      |L7.340|
000168  e007              B        |L7.378|
                  |L7.362|
00016a  6ae8              LDR      r0,[r5,#0x2c]         ;262
00016c  6961              LDR      r1,[r4,#0x14]         ;262
00016e  f4004070          AND      r0,r0,#0xf000         ;262
000172  4288              CMP      r0,r1                 ;262
000174  d001              BEQ      |L7.378|
000176  2001              MOVS     r0,#1                 ;264
000178  e770              B        |L7.92|
                  |L7.378|
00017a  7820              LDRB     r0,[r4,#0]            ;274
00017c  06c0              LSLS     r0,r0,#27             ;274
00017e  d505              BPL      |L7.396|
000180  6868              LDR      r0,[r5,#4]            ;280
000182  69e1              LDR      r1,[r4,#0x1c]         ;280
000184  f4200080          BIC      r0,r0,#0x400000       ;280
000188  4308              ORRS     r0,r0,r1              ;280
00018a  6068              STR      r0,[r5,#4]            ;280
                  |L7.396|
00018c  2000              MOVS     r0,#0                 ;284
00018e  e765              B        |L7.92|
;;;286    
                          ENDP

                  |L7.400|
                          DCD      0x40021000
                  |L7.404|
                          DCD      0x40007000
                  |L7.408|
                          DCD      0x42420440
                  |L7.412|
                          DCD      0x42420000

;*** Start embedded assembler ***

#line 1 "..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_rcc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_rcc_ex_c_bed13b44____REV16|
#line 463 "..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f1xx_hal_rcc_ex_c_bed13b44____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_rcc_ex_c_bed13b44____REVSH|
#line 478
|__asm___22_stm32f1xx_hal_rcc_ex_c_bed13b44____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_rcc_ex_c_bed13b44____RRX|
#line 665
|__asm___22_stm32f1xx_hal_rcc_ex_c_bed13b44____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
