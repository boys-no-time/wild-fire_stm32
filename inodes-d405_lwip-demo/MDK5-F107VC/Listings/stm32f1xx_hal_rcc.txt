; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\stm32f1xx_hal_rcc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_rcc.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device -I..\Drivers\CMSIS\Include -I..\Middlewares\Third_Party\LwIP\src\include\lwip\apps -I..\Middlewares\Third_Party\LwIP\src\include\lwip\priv -I..\Middlewares\Third_Party\LwIP\src\include\lwip\prot -I..\Middlewares\Third_Party\LwIP\src\include\netif\ppp -I..\Middlewares\Third_Party\LwIP\src\include\netif -I..\Middlewares\Third_Party\LwIP\src\include\posix\sys -I..\Middlewares\Third_Party\LwIP\src\include\posix -I..\Middlewares\Third_Party\LwIP\system\arch -I..\Middlewares\Third_Party\LwIP\src\include\lwip -I..\Inc -I..\Middlewares\Third_Party\LwIP\src\include -I.\RTE\_f107vc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_CL -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F107xC --omf_browse=.\objects\stm32f1xx_hal_rcc.crf ..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1378     */
;;;1379   __weak void HAL_RCC_CSSCallback(void)
000000  4770              BX       lr
;;;1380   {
;;;1381     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1382       the HAL_RCC_CSSCallback could be implemented in the user file
;;;1383       */
;;;1384   }
;;;1385   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;812      */
;;;813    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;814    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;815      uint32_t tickstart;
;;;816    
;;;817      /* Check Null pointer */
;;;818      if (RCC_ClkInitStruct == NULL)
000008  2c00              CMP      r4,#0
00000a  d017              BEQ      |L2.60|
;;;819      {
;;;820        return HAL_ERROR;
;;;821      }
;;;822    
;;;823      /* Check the parameters */
;;;824      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;825      assert_param(IS_FLASH_LATENCY(FLatency));
;;;826    
;;;827      /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
;;;828      must be correctly programmed according to the frequency of the CPU clock
;;;829        (HCLK) of the device. */
;;;830    
;;;831    #if defined(FLASH_ACR_LATENCY)
;;;832      /* Increasing the number of wait states because of higher CPU frequency */
;;;833      if (FLatency > __HAL_FLASH_GET_LATENCY())
00000c  f8df8130          LDR      r8,|L2.320|
000010  f8d80000          LDR      r0,[r8,#0]
000014  f0000007          AND      r0,r0,#7
000018  42a8              CMP      r0,r5
00001a  d211              BCS      |L2.64|
;;;834      {
;;;835        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;836        __HAL_FLASH_SET_LATENCY(FLatency);
00001c  f8d80000          LDR      r0,[r8,#0]
000020  f0200007          BIC      r0,r0,#7
000024  4328              ORRS     r0,r0,r5
000026  f8c80000          STR      r0,[r8,#0]
;;;837    
;;;838        /* Check that the new number of wait states is taken into account to access the Flash
;;;839        memory by reading the FLASH_ACR register */
;;;840        if (__HAL_FLASH_GET_LATENCY() != FLatency)
00002a  f8d80000          LDR      r0,[r8,#0]
00002e  f0000007          AND      r0,r0,#7
000032  42a8              CMP      r0,r5
000034  d004              BEQ      |L2.64|
;;;841      {
;;;842        return HAL_ERROR;
000036  2001              MOVS     r0,#1
                  |L2.56|
;;;843      }
;;;844    }
;;;845    
;;;846    #endif /* FLASH_ACR_LATENCY */
;;;847    /*-------------------------- HCLK Configuration --------------------------*/
;;;848    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;849      {
;;;850        /* Set the highest APBx dividers in order to ensure that we do not go through
;;;851        a non-spec phase whatever we decrease or increase HCLK. */
;;;852        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;853        {
;;;854          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
;;;855        }
;;;856    
;;;857        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;858        {
;;;859          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
;;;860        }
;;;861    
;;;862        /* Set the new HCLK clock divider */
;;;863        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;864        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;865      }
;;;866    
;;;867      /*------------------------- SYSCLK Configuration ---------------------------*/
;;;868      if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;869      {
;;;870        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;871    
;;;872        /* HSE is selected as System Clock Source */
;;;873        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;874        {
;;;875          /* Check the HSE ready flag */
;;;876          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;877          {
;;;878            return HAL_ERROR;
;;;879          }
;;;880        }
;;;881        /* PLL is selected as System Clock Source */
;;;882        else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;883        {
;;;884          /* Check the PLL ready flag */
;;;885          if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;886          {
;;;887            return HAL_ERROR;
;;;888          }
;;;889        }
;;;890        /* HSI is selected as System Clock Source */
;;;891        else
;;;892        {
;;;893          /* Check the HSI ready flag */
;;;894          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;895          {
;;;896            return HAL_ERROR;
;;;897          }
;;;898        }
;;;899        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;900    
;;;901        /* Get Start Tick */
;;;902        tickstart = HAL_GetTick();
;;;903    
;;;904        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
;;;905        {
;;;906          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;907          {
;;;908            return HAL_TIMEOUT;
;;;909          }
;;;910        }
;;;911      }
;;;912    
;;;913    #if defined(FLASH_ACR_LATENCY)
;;;914      /* Decreasing the number of wait states because of lower CPU frequency */
;;;915      if (FLatency < __HAL_FLASH_GET_LATENCY())
;;;916      {
;;;917        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;918        __HAL_FLASH_SET_LATENCY(FLatency);
;;;919    
;;;920        /* Check that the new number of wait states is taken into account to access the Flash
;;;921        memory by reading the FLASH_ACR register */
;;;922        if (__HAL_FLASH_GET_LATENCY() != FLatency)
;;;923      {
;;;924        return HAL_ERROR;
;;;925      }
;;;926    }
;;;927    #endif /* FLASH_ACR_LATENCY */
;;;928    
;;;929    /*-------------------------- PCLK1 Configuration ---------------------------*/
;;;930    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;931      {
;;;932        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;933        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;934      }
;;;935    
;;;936      /*-------------------------- PCLK2 Configuration ---------------------------*/
;;;937      if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;938      {
;;;939        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;940        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
;;;941      }
;;;942    
;;;943      /* Update the SystemCoreClock global variable */
;;;944      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
;;;945    
;;;946      /* Configure the source of time base considering new system clocks settings*/
;;;947      HAL_InitTick(uwTickPrio);
;;;948    
;;;949      return HAL_OK;
;;;950    }
000038  e8bd87f0          POP      {r4-r10,pc}
                  |L2.60|
00003c  2001              MOVS     r0,#1                 ;820
00003e  e7fb              B        |L2.56|
                  |L2.64|
000040  6820              LDR      r0,[r4,#0]            ;848
000042  4e40              LDR      r6,|L2.324|
000044  0781              LSLS     r1,r0,#30             ;848
000046  d512              BPL      |L2.110|
000048  0740              LSLS     r0,r0,#29             ;852
00004a  d503              BPL      |L2.84|
00004c  6870              LDR      r0,[r6,#4]            ;854
00004e  f44060e0          ORR      r0,r0,#0x700          ;854
000052  6070              STR      r0,[r6,#4]            ;854
                  |L2.84|
000054  7820              LDRB     r0,[r4,#0]            ;857
000056  0700              LSLS     r0,r0,#28             ;857
000058  d503              BPL      |L2.98|
00005a  6870              LDR      r0,[r6,#4]            ;859
00005c  f4405060          ORR      r0,r0,#0x3800         ;859
000060  6070              STR      r0,[r6,#4]            ;859
                  |L2.98|
000062  6870              LDR      r0,[r6,#4]            ;864
000064  68a1              LDR      r1,[r4,#8]            ;864
000066  f02000f0          BIC      r0,r0,#0xf0           ;864
00006a  4308              ORRS     r0,r0,r1              ;864
00006c  6070              STR      r0,[r6,#4]            ;864
                  |L2.110|
00006e  7820              LDRB     r0,[r4,#0]            ;868
000070  07c0              LSLS     r0,r0,#31             ;868
000072  d02c              BEQ      |L2.206|
000074  6860              LDR      r0,[r4,#4]            ;873
000076  2801              CMP      r0,#1                 ;873
000078  d006              BEQ      |L2.136|
00007a  2802              CMP      r0,#2                 ;882
00007c  d009              BEQ      |L2.146|
00007e  6831              LDR      r1,[r6,#0]            ;894
000080  0789              LSLS     r1,r1,#30             ;894
000082  d40b              BMI      |L2.156|
000084  2001              MOVS     r0,#1                 ;896
000086  e7d7              B        |L2.56|
                  |L2.136|
000088  6831              LDR      r1,[r6,#0]            ;876
00008a  0389              LSLS     r1,r1,#14             ;876
00008c  d406              BMI      |L2.156|
00008e  2001              MOVS     r0,#1                 ;878
000090  e7d2              B        |L2.56|
                  |L2.146|
000092  6831              LDR      r1,[r6,#0]            ;885
000094  0189              LSLS     r1,r1,#6              ;885
000096  d401              BMI      |L2.156|
000098  2001              MOVS     r0,#1                 ;887
00009a  e7cd              B        |L2.56|
                  |L2.156|
00009c  6871              LDR      r1,[r6,#4]            ;899
00009e  f0210103          BIC      r1,r1,#3              ;899
0000a2  4301              ORRS     r1,r1,r0              ;899
0000a4  6071              STR      r1,[r6,#4]            ;899
0000a6  f7fffffe          BL       HAL_GetTick
0000aa  4607              MOV      r7,r0                 ;902
0000ac  f2413988          MOV      r9,#0x1388            ;906
0000b0  e006              B        |L2.192|
                  |L2.178|
0000b2  f7fffffe          BL       HAL_GetTick
0000b6  1bc0              SUBS     r0,r0,r7              ;906
0000b8  4548              CMP      r0,r9                 ;906
0000ba  d901              BLS      |L2.192|
0000bc  2003              MOVS     r0,#3                 ;908
0000be  e7bb              B        |L2.56|
                  |L2.192|
0000c0  6870              LDR      r0,[r6,#4]            ;904
0000c2  6861              LDR      r1,[r4,#4]            ;904
0000c4  f000000c          AND      r0,r0,#0xc            ;904
0000c8  ebb00f81          CMP      r0,r1,LSL #2          ;904
0000cc  d1f1              BNE      |L2.178|
                  |L2.206|
0000ce  f8d80000          LDR      r0,[r8,#0]            ;915
0000d2  f0000007          AND      r0,r0,#7              ;915
0000d6  42a8              CMP      r0,r5                 ;915
0000d8  d90e              BLS      |L2.248|
0000da  f8d80000          LDR      r0,[r8,#0]            ;918
0000de  f0200007          BIC      r0,r0,#7              ;918
0000e2  4328              ORRS     r0,r0,r5              ;918
0000e4  f8c80000          STR      r0,[r8,#0]            ;918
0000e8  f8d80000          LDR      r0,[r8,#0]            ;922
0000ec  f0000007          AND      r0,r0,#7              ;922
0000f0  42a8              CMP      r0,r5                 ;922
0000f2  d001              BEQ      |L2.248|
0000f4  2001              MOVS     r0,#1                 ;924
0000f6  e79f              B        |L2.56|
                  |L2.248|
0000f8  7820              LDRB     r0,[r4,#0]            ;930
0000fa  0740              LSLS     r0,r0,#29             ;930
0000fc  d505              BPL      |L2.266|
0000fe  6870              LDR      r0,[r6,#4]            ;933
000100  68e1              LDR      r1,[r4,#0xc]          ;933
000102  f42060e0          BIC      r0,r0,#0x700          ;933
000106  4308              ORRS     r0,r0,r1              ;933
000108  6070              STR      r0,[r6,#4]            ;933
                  |L2.266|
00010a  7820              LDRB     r0,[r4,#0]            ;937
00010c  0700              LSLS     r0,r0,#28             ;937
00010e  d506              BPL      |L2.286|
000110  6870              LDR      r0,[r6,#4]            ;940
000112  6921              LDR      r1,[r4,#0x10]         ;940
000114  f4205060          BIC      r0,r0,#0x3800         ;940
000118  ea4000c1          ORR      r0,r0,r1,LSL #3       ;940
00011c  6070              STR      r0,[r6,#4]            ;940
                  |L2.286|
00011e  f7fffffe          BL       HAL_RCC_GetSysClockFreq
000122  6871              LDR      r1,[r6,#4]            ;944
000124  4a08              LDR      r2,|L2.328|
000126  f3c11103          UBFX     r1,r1,#4,#4           ;944
00012a  5c51              LDRB     r1,[r2,r1]            ;944
00012c  40c8              LSRS     r0,r0,r1              ;944
00012e  4907              LDR      r1,|L2.332|
000130  6008              STR      r0,[r1,#0]            ;944  ; SystemCoreClock
000132  4807              LDR      r0,|L2.336|
000134  6800              LDR      r0,[r0,#0]            ;947  ; uwTickPrio
000136  f7fffffe          BL       HAL_InitTick
00013a  2000              MOVS     r0,#0                 ;949
00013c  e77c              B        |L2.56|
;;;951    
                          ENDP

00013e  0000              DCW      0x0000
                  |L2.320|
                          DCD      0x40022000
                  |L2.324|
                          DCD      0x40021000
                  |L2.328|
                          DCD      AHBPrescTable
                  |L2.332|
                          DCD      SystemCoreClock
                  |L2.336|
                          DCD      uwTickPrio

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;201      */
;;;202    HAL_StatusTypeDef HAL_RCC_DeInit(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;203    {
;;;204      uint32_t tickstart;
;;;205    
;;;206      /* Get Start Tick */
;;;207      tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4605              MOV      r5,r0
;;;208    
;;;209      /* Set HSION bit */
;;;210      SET_BIT(RCC->CR, RCC_CR_HSION);
00000a  4c44              LDR      r4,|L3.284|
00000c  6820              LDR      r0,[r4,#0]
00000e  f0400001          ORR      r0,r0,#1
000012  6020              STR      r0,[r4,#0]
;;;211    
;;;212      /* Wait till HSI is ready */
;;;213      while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
000014  e007              B        |L3.38|
                  |L3.22|
;;;214      {
;;;215        if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
000016  f7fffffe          BL       HAL_GetTick
00001a  1b40              SUBS     r0,r0,r5
00001c  2802              CMP      r0,#2
00001e  d902              BLS      |L3.38|
;;;216        {
;;;217          return HAL_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L3.34|
;;;218        }
;;;219      }
;;;220    
;;;221      /* Set HSITRIM bits to the reset value */
;;;222      MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
;;;223    
;;;224      /* Get Start Tick */
;;;225      tickstart = HAL_GetTick();
;;;226    
;;;227      /* Reset CFGR register */
;;;228      CLEAR_REG(RCC->CFGR);
;;;229    
;;;230      /* Wait till clock switch is ready */
;;;231      while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
;;;232      {
;;;233        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;234        {
;;;235          return HAL_TIMEOUT;
;;;236        }
;;;237      }
;;;238    
;;;239      /* Update the SystemCoreClock global variable */
;;;240      SystemCoreClock = HSI_VALUE;
;;;241    
;;;242      /* Adapt Systick interrupt period */
;;;243      if (HAL_InitTick(uwTickPrio) != HAL_OK)
;;;244      {
;;;245        return HAL_ERROR;
;;;246      }
;;;247    
;;;248      /* Get Start Tick */
;;;249      tickstart = HAL_GetTick();
;;;250    
;;;251      /* Second step is to clear PLLON bit */
;;;252      CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
;;;253    
;;;254      /* Wait till PLL is disabled */
;;;255      while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
;;;256      {
;;;257        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;258        {
;;;259          return HAL_TIMEOUT;
;;;260        }
;;;261      }
;;;262    
;;;263      /* Ensure to reset PLLSRC and PLLMUL bits */
;;;264      CLEAR_REG(RCC->CFGR);
;;;265    
;;;266      /* Get Start Tick */
;;;267      tickstart = HAL_GetTick();
;;;268    
;;;269      /* Reset HSEON & CSSON bits */
;;;270      CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
;;;271    
;;;272      /* Wait till HSE is disabled */
;;;273      while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
;;;274      {
;;;275        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;276        {
;;;277          return HAL_TIMEOUT;
;;;278        }
;;;279      }
;;;280    
;;;281      /* Reset HSEBYP bit */
;;;282      CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
;;;283    
;;;284    #if defined(RCC_PLL2_SUPPORT)
;;;285      /* Get Start Tick */
;;;286      tickstart = HAL_GetTick();
;;;287    
;;;288      /* Clear PLL2ON bit */
;;;289      CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
;;;290    
;;;291      /* Wait till PLL2 is disabled */
;;;292      while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != RESET)
;;;293      {
;;;294        if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;295        {
;;;296          return HAL_TIMEOUT;
;;;297        }
;;;298      }
;;;299    #endif /* RCC_PLL2_SUPPORT */
;;;300    
;;;301    #if defined(RCC_PLLI2S_SUPPORT)
;;;302      /* Get Start Tick */
;;;303      tickstart = HAL_GetTick();
;;;304    
;;;305      /* Clear PLL3ON bit */
;;;306      CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
;;;307    
;;;308      /* Wait till PLL3 is disabled */
;;;309      while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != RESET)
;;;310      {
;;;311        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;312        {
;;;313          return HAL_TIMEOUT;
;;;314        }
;;;315      }
;;;316    #endif /* RCC_PLLI2S_SUPPORT */
;;;317    
;;;318    #if defined(RCC_CFGR2_PREDIV1)
;;;319      /* Reset CFGR2 register */
;;;320      CLEAR_REG(RCC->CFGR2);
;;;321    #endif /* RCC_CFGR2_PREDIV1 */
;;;322    
;;;323      /* Reset all CSR flags */
;;;324      SET_BIT(RCC->CSR, RCC_CSR_RMVF);
;;;325    
;;;326      /* Disable all interrupts */
;;;327      CLEAR_REG(RCC->CIR);
;;;328    
;;;329      return HAL_OK;
;;;330    }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L3.38|
000026  6820              LDR      r0,[r4,#0]            ;213
000028  0780              LSLS     r0,r0,#30             ;213
00002a  d5f4              BPL      |L3.22|
00002c  6820              LDR      r0,[r4,#0]            ;222
00002e  f02000f8          BIC      r0,r0,#0xf8           ;222
000032  f0400080          ORR      r0,r0,#0x80           ;222
000036  6020              STR      r0,[r4,#0]            ;222
000038  f7fffffe          BL       HAL_GetTick
00003c  4605              MOV      r5,r0                 ;225
00003e  2600              MOVS     r6,#0                 ;228
000040  6066              STR      r6,[r4,#4]            ;228
000042  f2413788          MOV      r7,#0x1388            ;233
000046  e006              B        |L3.86|
                  |L3.72|
000048  f7fffffe          BL       HAL_GetTick
00004c  1b40              SUBS     r0,r0,r5              ;233
00004e  42b8              CMP      r0,r7                 ;233
000050  d901              BLS      |L3.86|
000052  2003              MOVS     r0,#3                 ;235
000054  e7e5              B        |L3.34|
                  |L3.86|
000056  6860              LDR      r0,[r4,#4]            ;231
000058  f0100f0c          TST      r0,#0xc               ;231
00005c  d1f4              BNE      |L3.72|
00005e  4831              LDR      r0,|L3.292|
000060  492f              LDR      r1,|L3.288|
000062  6001              STR      r1,[r0,#0]            ;240  ; SystemCoreClock
000064  4830              LDR      r0,|L3.296|
000066  6800              LDR      r0,[r0,#0]            ;243  ; uwTickPrio
000068  f7fffffe          BL       HAL_InitTick
00006c  b108              CBZ      r0,|L3.114|
00006e  2001              MOVS     r0,#1                 ;245
000070  e7d7              B        |L3.34|
                  |L3.114|
000072  f7fffffe          BL       HAL_GetTick
000076  4605              MOV      r5,r0                 ;249
000078  6820              LDR      r0,[r4,#0]            ;252
00007a  f0207080          BIC      r0,r0,#0x1000000      ;252
00007e  6020              STR      r0,[r4,#0]            ;252
000080  e006              B        |L3.144|
                  |L3.130|
000082  f7fffffe          BL       HAL_GetTick
000086  1b40              SUBS     r0,r0,r5              ;257
000088  2802              CMP      r0,#2                 ;257
00008a  d901              BLS      |L3.144|
00008c  2003              MOVS     r0,#3                 ;259
00008e  e7c8              B        |L3.34|
                  |L3.144|
000090  6820              LDR      r0,[r4,#0]            ;255
000092  0180              LSLS     r0,r0,#6              ;255
000094  d4f5              BMI      |L3.130|
000096  6066              STR      r6,[r4,#4]            ;264
000098  f7fffffe          BL       HAL_GetTick
00009c  4605              MOV      r5,r0                 ;267
00009e  6820              LDR      r0,[r4,#0]            ;270
0000a0  f4202010          BIC      r0,r0,#0x90000        ;270
0000a4  6020              STR      r0,[r4,#0]            ;270
0000a6  e006              B        |L3.182|
                  |L3.168|
0000a8  f7fffffe          BL       HAL_GetTick
0000ac  1b40              SUBS     r0,r0,r5              ;275
0000ae  2864              CMP      r0,#0x64              ;275
0000b0  d901              BLS      |L3.182|
0000b2  2003              MOVS     r0,#3                 ;277
0000b4  e7b5              B        |L3.34|
                  |L3.182|
0000b6  6820              LDR      r0,[r4,#0]            ;273
0000b8  0380              LSLS     r0,r0,#14             ;273
0000ba  d4f5              BMI      |L3.168|
0000bc  6820              LDR      r0,[r4,#0]            ;282
0000be  f4202080          BIC      r0,r0,#0x40000        ;282
0000c2  6020              STR      r0,[r4,#0]            ;282
0000c4  f7fffffe          BL       HAL_GetTick
0000c8  4605              MOV      r5,r0                 ;286
0000ca  6820              LDR      r0,[r4,#0]            ;289
0000cc  f0206080          BIC      r0,r0,#0x4000000      ;289
0000d0  6020              STR      r0,[r4,#0]            ;289
0000d2  e006              B        |L3.226|
                  |L3.212|
0000d4  f7fffffe          BL       HAL_GetTick
0000d8  1b40              SUBS     r0,r0,r5              ;294
0000da  2864              CMP      r0,#0x64              ;294
0000dc  d901              BLS      |L3.226|
0000de  2003              MOVS     r0,#3                 ;296
0000e0  e79f              B        |L3.34|
                  |L3.226|
0000e2  6820              LDR      r0,[r4,#0]            ;292
0000e4  0100              LSLS     r0,r0,#4              ;292
0000e6  d4f5              BMI      |L3.212|
0000e8  f7fffffe          BL       HAL_GetTick
0000ec  4605              MOV      r5,r0                 ;303
0000ee  6820              LDR      r0,[r4,#0]            ;306
0000f0  f0205080          BIC      r0,r0,#0x10000000     ;306
0000f4  6020              STR      r0,[r4,#0]            ;306
0000f6  e006              B        |L3.262|
                  |L3.248|
0000f8  f7fffffe          BL       HAL_GetTick
0000fc  1b40              SUBS     r0,r0,r5              ;311
0000fe  2864              CMP      r0,#0x64              ;311
000100  d901              BLS      |L3.262|
000102  2003              MOVS     r0,#3                 ;313
000104  e78d              B        |L3.34|
                  |L3.262|
000106  6820              LDR      r0,[r4,#0]            ;309
000108  0080              LSLS     r0,r0,#2              ;309
00010a  d4f5              BMI      |L3.248|
00010c  62e6              STR      r6,[r4,#0x2c]         ;320
00010e  6a60              LDR      r0,[r4,#0x24]         ;324
000110  f0407080          ORR      r0,r0,#0x1000000      ;324
000114  6260              STR      r0,[r4,#0x24]         ;324
000116  60a6              STR      r6,[r4,#8]            ;327
000118  2000              MOVS     r0,#0                 ;329
00011a  e782              B        |L3.34|
;;;331    
                          ENDP

                  |L3.284|
                          DCD      0x40021000
                  |L3.288|
                          DCD      0x007a1200
                  |L3.292|
                          DCD      SystemCoreClock
                  |L3.296|
                          DCD      uwTickPrio

                          AREA ||i.HAL_RCC_DisableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DisableCSS PROC
;;;1047     */
;;;1048   void HAL_RCC_DisableCSS(void)
000000  4901              LDR      r1,|L4.8|
;;;1049   {
;;;1050     *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  64c8              STR      r0,[r1,#0x4c]
;;;1051   }
000006  4770              BX       lr
;;;1052   
                          ENDP

                  |L4.8|
                          DCD      0x42420000

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;1038     */
;;;1039   void HAL_RCC_EnableCSS(void)
000000  4901              LDR      r1,|L5.8|
;;;1040   {
;;;1041     *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  64c8              STR      r0,[r1,#0x4c]
;;;1042   }
000006  4770              BX       lr
;;;1043   
                          ENDP

                  |L5.8|
                          DCD      0x42420000

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1311     */
;;;1312   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  220f              MOVS     r2,#0xf
;;;1313   {
;;;1314     /* Check the parameters */
;;;1315     assert_param(RCC_ClkInitStruct != NULL);
;;;1316     assert_param(pFLatency != NULL);
;;;1317   
;;;1318     /* Set all possible values for the Clock type parameter --------------------*/
;;;1319     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
000002  6002              STR      r2,[r0,#0]
;;;1320   
;;;1321     /* Get the SYSCLK configuration --------------------------------------------*/
;;;1322     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000004  4a0b              LDR      r2,|L6.52|
000006  6853              LDR      r3,[r2,#4]
000008  f0030303          AND      r3,r3,#3
00000c  6043              STR      r3,[r0,#4]
;;;1323   
;;;1324     /* Get the HCLK configuration ----------------------------------------------*/
;;;1325     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
00000e  6853              LDR      r3,[r2,#4]
000010  f00303f0          AND      r3,r3,#0xf0
000014  6083              STR      r3,[r0,#8]
;;;1326   
;;;1327     /* Get the APB1 configuration ----------------------------------------------*/
;;;1328     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
000016  6853              LDR      r3,[r2,#4]
000018  f40363e0          AND      r3,r3,#0x700
00001c  60c3              STR      r3,[r0,#0xc]
;;;1329   
;;;1330     /* Get the APB2 configuration ----------------------------------------------*/
;;;1331     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
00001e  6852              LDR      r2,[r2,#4]
000020  f4025260          AND      r2,r2,#0x3800
000024  08d2              LSRS     r2,r2,#3
000026  6102              STR      r2,[r0,#0x10]
;;;1332   
;;;1333   #if   defined(FLASH_ACR_LATENCY)
;;;1334     /* Get the Flash Wait State (Latency) configuration ------------------------*/
;;;1335     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
000028  4803              LDR      r0,|L6.56|
00002a  6800              LDR      r0,[r0,#0]
00002c  f0000007          AND      r0,r0,#7
000030  6008              STR      r0,[r1,#0]
;;;1336   #else
;;;1337     /* For VALUE lines devices, only LATENCY_0 can be set*/
;;;1338     *pFLatency = (uint32_t)FLASH_LATENCY_0;
;;;1339   #endif
;;;1340   }
000032  4770              BX       lr
;;;1341   
                          ENDP

                  |L6.52|
                          DCD      0x40021000
                  |L6.56|
                          DCD      0x40022000

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;1175     */
;;;1176   uint32_t HAL_RCC_GetHCLKFreq(void)
000000  4801              LDR      r0,|L7.8|
;;;1177   {
;;;1178     return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;1179   }
000004  4770              BX       lr
;;;1180   
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;1211     */
;;;1212   void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b510              PUSH     {r4,lr}
;;;1213   {
;;;1214     /* Check the parameters */
;;;1215     assert_param(RCC_OscInitStruct != NULL);
;;;1216   
;;;1217     /* Set all possible values for the Oscillator type parameter ---------------*/
;;;1218     RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
000002  210f              MOVS     r1,#0xf
000004  6001              STR      r1,[r0,#0]
;;;1219                                         | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
;;;1220   
;;;1221   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1222     /* Get the Prediv1 source --------------------------------------------------*/
;;;1223     RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
000006  4b2b              LDR      r3,|L8.180|
000008  6ad9              LDR      r1,[r3,#0x2c]
00000a  f4013180          AND      r1,r1,#0x10000
00000e  6041              STR      r1,[r0,#4]
;;;1224   #endif /* RCC_CFGR2_PREDIV1SRC */
;;;1225   
;;;1226     /* Get the HSE configuration -----------------------------------------------*/
;;;1227     if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000010  6819              LDR      r1,[r3,#0]
000012  f04f0200          MOV      r2,#0
000016  0349              LSLS     r1,r1,#13
000018  d503              BPL      |L8.34|
;;;1228     {
;;;1229       RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
00001a  f44f21a0          MOV      r1,#0x50000
00001e  6081              STR      r1,[r0,#8]
000020  e007              B        |L8.50|
                  |L8.34|
;;;1230     }
;;;1231     else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
000022  6819              LDR      r1,[r3,#0]
000024  03c9              LSLS     r1,r1,#15
000026  d503              BPL      |L8.48|
;;;1232     {
;;;1233       RCC_OscInitStruct->HSEState = RCC_HSE_ON;
000028  f44f3180          MOV      r1,#0x10000
00002c  6081              STR      r1,[r0,#8]
00002e  e000              B        |L8.50|
                  |L8.48|
;;;1234     }
;;;1235     else
;;;1236     {
;;;1237       RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
000030  6082              STR      r2,[r0,#8]
                  |L8.50|
;;;1238     }
;;;1239     RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
000032  6ad9              LDR      r1,[r3,#0x2c]
000034  f001010f          AND      r1,r1,#0xf
000038  60c1              STR      r1,[r0,#0xc]
;;;1240   
;;;1241     /* Get the HSI configuration -----------------------------------------------*/
;;;1242     if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
00003a  6819              LDR      r1,[r3,#0]
00003c  07cc              LSLS     r4,r1,#31
;;;1243     {
;;;1244       RCC_OscInitStruct->HSIState = RCC_HSI_ON;
00003e  f04f0101          MOV      r1,#1
000042  d001              BEQ      |L8.72|
000044  6141              STR      r1,[r0,#0x14]
000046  e000              B        |L8.74|
                  |L8.72|
;;;1245     }
;;;1246     else
;;;1247     {
;;;1248       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000048  6142              STR      r2,[r0,#0x14]
                  |L8.74|
;;;1249     }
;;;1250   
;;;1251     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
00004a  681c              LDR      r4,[r3,#0]
00004c  f3c404c4          UBFX     r4,r4,#3,#5
000050  6184              STR      r4,[r0,#0x18]
;;;1252   
;;;1253     /* Get the LSE configuration -----------------------------------------------*/
;;;1254     if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
000052  6a1c              LDR      r4,[r3,#0x20]
000054  0764              LSLS     r4,r4,#29
000056  d502              BPL      |L8.94|
;;;1255     {
;;;1256       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
000058  2405              MOVS     r4,#5
00005a  6104              STR      r4,[r0,#0x10]
00005c  e005              B        |L8.106|
                  |L8.94|
;;;1257     }
;;;1258     else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
00005e  6a1c              LDR      r4,[r3,#0x20]
000060  07e4              LSLS     r4,r4,#31
000062  d001              BEQ      |L8.104|
;;;1259     {
;;;1260       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
000064  6101              STR      r1,[r0,#0x10]
000066  e000              B        |L8.106|
                  |L8.104|
;;;1261     }
;;;1262     else
;;;1263     {
;;;1264       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
000068  6102              STR      r2,[r0,#0x10]
                  |L8.106|
;;;1265     }
;;;1266   
;;;1267     /* Get the LSI configuration -----------------------------------------------*/
;;;1268     if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
00006a  6a5c              LDR      r4,[r3,#0x24]
00006c  07e4              LSLS     r4,r4,#31
00006e  d001              BEQ      |L8.116|
;;;1269     {
;;;1270       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
000070  61c1              STR      r1,[r0,#0x1c]
000072  e000              B        |L8.118|
                  |L8.116|
;;;1271     }
;;;1272     else
;;;1273     {
;;;1274       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
000074  61c2              STR      r2,[r0,#0x1c]
                  |L8.118|
;;;1275     }
;;;1276   
;;;1277   
;;;1278     /* Get the PLL configuration -----------------------------------------------*/
;;;1279     if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
000076  681a              LDR      r2,[r3,#0]
000078  01d4              LSLS     r4,r2,#7
;;;1280     {
;;;1281       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
00007a  f04f0202          MOV      r2,#2
00007e  d501              BPL      |L8.132|
000080  6202              STR      r2,[r0,#0x20]
000082  e000              B        |L8.134|
                  |L8.132|
;;;1282     }
;;;1283     else
;;;1284     {
;;;1285       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
000084  6201              STR      r1,[r0,#0x20]
                  |L8.134|
;;;1286     }
;;;1287     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
000086  685c              LDR      r4,[r3,#4]
000088  f4043480          AND      r4,r4,#0x10000
00008c  6244              STR      r4,[r0,#0x24]
;;;1288     RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
00008e  685c              LDR      r4,[r3,#4]
000090  f4041470          AND      r4,r4,#0x3c0000
000094  6284              STR      r4,[r0,#0x28]
;;;1289   #if defined(RCC_CR_PLL2ON)
;;;1290     /* Get the PLL2 configuration -----------------------------------------------*/
;;;1291     if ((RCC->CR & RCC_CR_PLL2ON) == RCC_CR_PLL2ON)
000096  681c              LDR      r4,[r3,#0]
000098  0164              LSLS     r4,r4,#5
00009a  d501              BPL      |L8.160|
;;;1292     {
;;;1293       RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_ON;
00009c  62c2              STR      r2,[r0,#0x2c]
00009e  e000              B        |L8.162|
                  |L8.160|
;;;1294     }
;;;1295     else
;;;1296     {
;;;1297       RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
0000a0  62c1              STR      r1,[r0,#0x2c]
                  |L8.162|
;;;1298     }
;;;1299     RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
0000a2  6ad9              LDR      r1,[r3,#0x2c]
0000a4  f00101f0          AND      r1,r1,#0xf0
0000a8  6341              STR      r1,[r0,#0x34]
;;;1300     RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
0000aa  6ad9              LDR      r1,[r3,#0x2c]
0000ac  f4016170          AND      r1,r1,#0xf00
0000b0  6301              STR      r1,[r0,#0x30]
;;;1301   #endif /* RCC_CR_PLL2ON */
;;;1302   }
0000b2  bd10              POP      {r4,pc}
;;;1303   
                          ENDP

                  |L8.180|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;1186     */
;;;1187   uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  b500              PUSH     {lr}
;;;1188   {
;;;1189     /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;1190     return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L9.24|
000008  6849              LDR      r1,[r1,#4]
00000a  4a04              LDR      r2,|L9.28|
00000c  f3c12102          UBFX     r1,r1,#8,#3
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;1191   }
000014  bd00              POP      {pc}
;;;1192   
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40021000
                  |L9.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetPCLK2Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK2Freq PROC
;;;1198     */
;;;1199   uint32_t HAL_RCC_GetPCLK2Freq(void)
000000  b500              PUSH     {lr}
;;;1200   {
;;;1201     /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;1202     return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L10.24|
000008  6849              LDR      r1,[r1,#4]
00000a  4a04              LDR      r2,|L10.28|
00000c  f3c121c2          UBFX     r1,r1,#11,#3
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;1203   }
000014  bd00              POP      {pc}
;;;1204   
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      0x40021000
                  |L10.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;1081     */
;;;1082   uint32_t HAL_RCC_GetSysClockFreq(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1083   {
000002  b089              SUB      sp,sp,#0x24
;;;1084   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1085     const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
000004  a027              ADR      r0,|L11.164|
000006  ac05              ADD      r4,sp,#0x14
000008  e890000e          LDM      r0,{r1-r3}
00000c  68c0              LDR      r0,[r0,#0xc]
00000e  c40e              STM      r4!,{r1-r3}
000010  9008              STR      r0,[sp,#0x20]
;;;1086     const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
000012  a028              ADR      r0,|L11.180|
000014  e9d03200          LDRD     r3,r2,[r0,#0]
000018  e9d01002          LDRD     r1,r0,[r0,#8]
00001c  e9cd3201          STRD     r3,r2,[sp,#4]
000020  e9cd1003          STRD     r1,r0,[sp,#0xc]
;;;1087   #else
;;;1088     const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
;;;1089   #if defined(RCC_CFGR2_PREDIV1)
;;;1090     const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
;;;1091   #else
;;;1092     const uint8_t aPredivFactorTable[2] = {1, 2};
;;;1093   #endif /*RCC_CFGR2_PREDIV1*/
;;;1094   
;;;1095   #endif
;;;1096     uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
;;;1097     uint32_t sysclockfreq = 0U;
;;;1098   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1099     uint32_t prediv2 = 0U, pll2mul = 0U;
;;;1100   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1101   
;;;1102     tmpreg = RCC->CFGR;
000024  4b27              LDR      r3,|L11.196|
000026  6858              LDR      r0,[r3,#4]
;;;1103   
;;;1104     /* Get SYSCLK source -------------------------------------------------------*/
;;;1105     switch (tmpreg & RCC_CFGR_SWS)
000028  f000010c          AND      r1,r0,#0xc
00002c  2904              CMP      r1,#4
00002e  d004              BEQ      |L11.58|
000030  2908              CMP      r1,#8
000032  d004              BEQ      |L11.62|
;;;1106     {
;;;1107       case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
;;;1108       {
;;;1109         sysclockfreq = HSE_VALUE;
;;;1110         break;
;;;1111       }
;;;1112       case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
;;;1113       {
;;;1114         pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
;;;1115         if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
;;;1116         {
;;;1117   #if defined(RCC_CFGR2_PREDIV1)
;;;1118           prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
;;;1119   #else
;;;1120           prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
;;;1121   #endif /*RCC_CFGR2_PREDIV1*/
;;;1122   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1123   
;;;1124           if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
;;;1125           {
;;;1126             /* PLL2 selected as Prediv1 source */
;;;1127             /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
;;;1128             prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
;;;1129             pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
;;;1130             pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
;;;1131           }
;;;1132           else
;;;1133           {
;;;1134             /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;1135             pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
;;;1136           }
;;;1137   
;;;1138           /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
;;;1139           /* In this case need to divide pllclk by 2 */
;;;1140           if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
;;;1141           {
;;;1142             pllclk = pllclk / 2;
;;;1143           }
;;;1144   #else
;;;1145           /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;1146           pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
;;;1147   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1148         }
;;;1149         else
;;;1150         {
;;;1151           /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
;;;1152           pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
;;;1153         }
;;;1154         sysclockfreq = pllclk;
;;;1155         break;
;;;1156       }
;;;1157       case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
;;;1158       default: /* HSI used as system clock */
;;;1159       {
;;;1160         sysclockfreq = HSI_VALUE;
000034  4824              LDR      r0,|L11.200|
                  |L11.54|
;;;1161         break;
;;;1162       }
;;;1163     }
;;;1164     return sysclockfreq;
;;;1165   }
000036  b009              ADD      sp,sp,#0x24
000038  bdf0              POP      {r4-r7,pc}
                  |L11.58|
00003a  4824              LDR      r0,|L11.204|
00003c  e7fb              B        |L11.54|
                  |L11.62|
00003e  a905              ADD      r1,sp,#0x14           ;1114
000040  f3c04283          UBFX     r2,r0,#18,#4          ;1114
000044  5c8c              LDRB     r4,[r1,r2]            ;1114
000046  03c0              LSLS     r0,r0,#15             ;1115
000048  d528              BPL      |L11.156|
00004a  6ad8              LDR      r0,[r3,#0x2c]         ;1118
00004c  a901              ADD      r1,sp,#4              ;1118
00004e  f000000f          AND      r0,r0,#0xf            ;1118
000052  5c08              LDRB     r0,[r1,r0]            ;1118
000054  6ad9              LDR      r1,[r3,#0x2c]         ;1124
000056  03c9              LSLS     r1,r1,#15             ;1124
000058  d516              BPL      |L11.136|
00005a  6ad9              LDR      r1,[r3,#0x2c]         ;1128
00005c  f3c11203          UBFX     r2,r1,#4,#4           ;1128
000060  1c52              ADDS     r2,r2,#1              ;1128
000062  6ad9              LDR      r1,[r3,#0x2c]         ;1129
000064  f3c12103          UBFX     r1,r1,#8,#4           ;1129
000068  1c89              ADDS     r1,r1,#2              ;1129
00006a  fba22300          UMULL    r2,r3,r2,r0           ;1130
00006e  fba11604          UMULL    r1,r6,r1,r4           ;1130
000072  4d16              LDR      r5,|L11.204|
000074  2700              MOVS     r7,#0                 ;1130
000076  fba10c05          UMULL    r0,r12,r1,r5          ;1130
00007a  fb06c505          MLA      r5,r6,r5,r12          ;1130
00007e  fb015107          MLA      r1,r1,r7,r5           ;1130
000082  f7fffffe          BL       __aeabi_uldivmod
000086  e003              B        |L11.144|
                  |L11.136|
000088  4910              LDR      r1,|L11.204|
00008a  4361              MULS     r1,r4,r1              ;1135
00008c  fbb1f0f0          UDIV     r0,r1,r0              ;1135
                  |L11.144|
000090  f89d1021          LDRB     r1,[sp,#0x21]         ;1140
000094  42a1              CMP      r1,r4                 ;1140
000096  d1ce              BNE      |L11.54|
000098  0840              LSRS     r0,r0,#1              ;1142
00009a  e7cc              B        |L11.54|
                  |L11.156|
00009c  480c              LDR      r0,|L11.208|
00009e  4360              MULS     r0,r4,r0              ;1152
0000a0  e7c9              B        |L11.54|
;;;1166   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L11.164|
0000a4  00                DCB      0
0000a5  00                DCB      0
0000a6  04050607          DCB      4,5,6,"\a\b\t",0
0000aa  080900  
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0
0000b0  00                DCB      0
0000b1  0d00              DCB      "\r",0
0000b3  00                DCB      0
                  |L11.180|
0000b4  01020304          DCB      1,2,3,4,5,6,"\a\b\t\n\v\f\r",14,15,16
0000b8  05060708
0000bc  090a0b0c
0000c0  0d0e0f10
                  |L11.196|
                          DCD      0x40021000
                  |L11.200|
                          DCD      0x007a1200
                  |L11.204|
                          DCD      0x017d7840
                  |L11.208|
                          DCD      0x003d0900

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;1001     */
;;;1002   void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b530              PUSH     {r4,r5,lr}
;;;1003   {
000002  b085              SUB      sp,sp,#0x14
000004  460d              MOV      r5,r1
;;;1004     GPIO_InitTypeDef gpio = {0U};
000006  2000              MOVS     r0,#0
000008  9003              STR      r0,[sp,#0xc]
;;;1005   
;;;1006     /* Check the parameters */
;;;1007     assert_param(IS_RCC_MCO(RCC_MCOx));
;;;1008     assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;1009     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;1010   
;;;1011     /* Prevent unused argument(s) compilation warning */
;;;1012     UNUSED(RCC_MCOx);
;;;1013     UNUSED(RCC_MCODiv);
;;;1014   
;;;1015     /* Configure the MCO1 pin in alternate function mode */
;;;1016     gpio.Mode      = GPIO_MODE_AF_PP;
00000a  2002              MOVS     r0,#2
00000c  9002              STR      r0,[sp,#8]
;;;1017     gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
00000e  2003              MOVS     r0,#3
000010  9004              STR      r0,[sp,#0x10]
;;;1018     gpio.Pull      = GPIO_NOPULL;
;;;1019     gpio.Pin       = MCO1_PIN;
000012  f44f7080          MOV      r0,#0x100
000016  9001              STR      r0,[sp,#4]
;;;1020   
;;;1021     /* MCO1 Clock Enable */
;;;1022     MCO1_CLK_ENABLE();
000018  4c09              LDR      r4,|L12.64|
00001a  69a0              LDR      r0,[r4,#0x18]
00001c  f0400004          ORR      r0,r0,#4
000020  61a0              STR      r0,[r4,#0x18]
000022  69a0              LDR      r0,[r4,#0x18]
000024  f0000004          AND      r0,r0,#4
000028  9000              STR      r0,[sp,#0]
;;;1023   
;;;1024     HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
00002a  a901              ADD      r1,sp,#4
00002c  4805              LDR      r0,|L12.68|
00002e  f7fffffe          BL       HAL_GPIO_Init
;;;1025   
;;;1026     /* Configure the MCO clock source */
;;;1027     __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
000032  6860              LDR      r0,[r4,#4]
000034  f0206070          BIC      r0,r0,#0xf000000
000038  4328              ORRS     r0,r0,r5
00003a  6060              STR      r0,[r4,#4]
;;;1028   }
00003c  b005              ADD      sp,sp,#0x14
00003e  bd30              POP      {r4,r5,pc}
;;;1029   
                          ENDP

                  |L12.64|
                          DCD      0x40021000
                  |L12.68|
                          DCD      0x40010800

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1346     */
;;;1347   void HAL_RCC_NMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1348   {
;;;1349     /* Check RCC CSSF flag  */
;;;1350     if (__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  4c04              LDR      r4,|L13.20|
000004  68a0              LDR      r0,[r4,#8]
000006  0600              LSLS     r0,r0,#24
000008  d503              BPL      |L13.18|
;;;1351     {
;;;1352       /* RCC Clock Security System interrupt user callback */
;;;1353       HAL_RCC_CSSCallback();
00000a  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1354   
;;;1355       /* Clear RCC CSS pending bit */
;;;1356       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
00000e  2080              MOVS     r0,#0x80
000010  72a0              STRB     r0,[r4,#0xa]
                  |L13.18|
;;;1357     }
;;;1358   }
000012  bd10              POP      {r4,pc}
;;;1359   
                          ENDP

                  |L13.20|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;346      */
;;;347    HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;348    {
000004  4604              MOV      r4,r0
;;;349      uint32_t tickstart;
;;;350      uint32_t pll_config;
;;;351    
;;;352      /* Check Null pointer */
;;;353      if (RCC_OscInitStruct == NULL)
000006  2c00              CMP      r4,#0
000008  d00e              BEQ      |L14.40|
;;;354      {
;;;355        return HAL_ERROR;
;;;356      }
;;;357    
;;;358      /* Check the parameters */
;;;359      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;360    
;;;361      /*------------------------------- HSE Configuration ------------------------*/
;;;362      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
00000a  7820              LDRB     r0,[r4,#0]
;;;363      {
;;;364        /* Check the parameters */
;;;365        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;366    
;;;367        /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
;;;368        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
00000c  4df8              LDR      r5,|L14.1008|
00000e  07c0              LSLS     r0,r0,#31             ;362
000010  d05e              BEQ      |L14.208|
000012  6868              LDR      r0,[r5,#4]
000014  f3c00081          UBFX     r0,r0,#2,#2
000018  2801              CMP      r0,#1
00001a  d00b              BEQ      |L14.52|
;;;369            || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
00001c  6868              LDR      r0,[r5,#4]
00001e  f3c00081          UBFX     r0,r0,#2,#2
000022  2802              CMP      r0,#2
000024  d003              BEQ      |L14.46|
000026  e00c              B        |L14.66|
                  |L14.40|
000028  2001              MOVS     r0,#1                 ;355
                  |L14.42|
;;;370        {
;;;371          if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
;;;372          {
;;;373            return HAL_ERROR;
;;;374          }
;;;375        }
;;;376        else
;;;377        {
;;;378          /* Set the new HSE configuration ---------------------------------------*/
;;;379          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;380    
;;;381    
;;;382          /* Check the HSE State */
;;;383          if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
;;;384          {
;;;385            /* Get Start Tick */
;;;386            tickstart = HAL_GetTick();
;;;387    
;;;388            /* Wait till HSE is ready */
;;;389            while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;390            {
;;;391              if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;392              {
;;;393                return HAL_TIMEOUT;
;;;394              }
;;;395            }
;;;396          }
;;;397          else
;;;398          {
;;;399            /* Get Start Tick */
;;;400            tickstart = HAL_GetTick();
;;;401    
;;;402            /* Wait till HSE is disabled */
;;;403            while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;404            {
;;;405              if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;406              {
;;;407                return HAL_TIMEOUT;
;;;408              }
;;;409            }
;;;410          }
;;;411        }
;;;412      }
;;;413      /*----------------------------- HSI Configuration --------------------------*/
;;;414      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;415      {
;;;416        /* Check the parameters */
;;;417        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;418        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;419    
;;;420        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
;;;421        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
;;;422            || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
;;;423        {
;;;424          /* When HSI is used as system clock it will not disabled */
;;;425          if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;426          {
;;;427            return HAL_ERROR;
;;;428          }
;;;429          /* Otherwise, just the calibration is allowed */
;;;430          else
;;;431          {
;;;432            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;433            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;434          }
;;;435        }
;;;436        else
;;;437        {
;;;438          /* Check the HSI State */
;;;439          if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
;;;440          {
;;;441            /* Enable the Internal High Speed oscillator (HSI). */
;;;442            __HAL_RCC_HSI_ENABLE();
;;;443    
;;;444            /* Get Start Tick */
;;;445            tickstart = HAL_GetTick();
;;;446    
;;;447            /* Wait till HSI is ready */
;;;448            while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;449            {
;;;450              if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
;;;451              {
;;;452                return HAL_TIMEOUT;
;;;453              }
;;;454            }
;;;455    
;;;456            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;457            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;458          }
;;;459          else
;;;460          {
;;;461            /* Disable the Internal High Speed oscillator (HSI). */
;;;462            __HAL_RCC_HSI_DISABLE();
;;;463    
;;;464            /* Get Start Tick */
;;;465            tickstart = HAL_GetTick();
;;;466    
;;;467            /* Wait till HSI is disabled */
;;;468            while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;469            {
;;;470              if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
;;;471              {
;;;472                return HAL_TIMEOUT;
;;;473              }
;;;474            }
;;;475          }
;;;476        }
;;;477      }
;;;478      /*------------------------------ LSI Configuration -------------------------*/
;;;479      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;480      {
;;;481        /* Check the parameters */
;;;482        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;483    
;;;484        /* Check the LSI State */
;;;485        if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
;;;486        {
;;;487          /* Enable the Internal Low Speed oscillator (LSI). */
;;;488          __HAL_RCC_LSI_ENABLE();
;;;489    
;;;490          /* Get Start Tick */
;;;491          tickstart = HAL_GetTick();
;;;492    
;;;493          /* Wait till LSI is ready */
;;;494          while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;495          {
;;;496            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
;;;497            {
;;;498              return HAL_TIMEOUT;
;;;499            }
;;;500          }
;;;501          /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
;;;502              should be added.*/
;;;503          RCC_Delay(1);
;;;504        }
;;;505        else
;;;506        {
;;;507          /* Disable the Internal Low Speed oscillator (LSI). */
;;;508          __HAL_RCC_LSI_DISABLE();
;;;509    
;;;510          /* Get Start Tick */
;;;511          tickstart = HAL_GetTick();
;;;512    
;;;513          /* Wait till LSI is disabled */
;;;514          while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;515          {
;;;516            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
;;;517            {
;;;518              return HAL_TIMEOUT;
;;;519            }
;;;520          }
;;;521        }
;;;522      }
;;;523      /*------------------------------ LSE Configuration -------------------------*/
;;;524      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;525      {
;;;526        FlagStatus       pwrclkchanged = RESET;
;;;527    
;;;528        /* Check the parameters */
;;;529        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;530    
;;;531        /* Update LSE configuration in Backup Domain control register    */
;;;532        /* Requires to enable write access to Backup Domain of necessary */
;;;533        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
;;;534        {
;;;535          __HAL_RCC_PWR_CLK_ENABLE();
;;;536          pwrclkchanged = SET;
;;;537        }
;;;538    
;;;539        if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;540        {
;;;541          /* Enable write access to Backup domain */
;;;542          SET_BIT(PWR->CR, PWR_CR_DBP);
;;;543    
;;;544          /* Wait for Backup domain Write protection disable */
;;;545          tickstart = HAL_GetTick();
;;;546    
;;;547          while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;548          {
;;;549            if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
;;;550            {
;;;551              return HAL_TIMEOUT;
;;;552            }
;;;553          }
;;;554        }
;;;555    
;;;556        /* Set the new LSE configuration -----------------------------------------*/
;;;557        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;558        /* Check the LSE State */
;;;559        if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
;;;560        {
;;;561          /* Get Start Tick */
;;;562          tickstart = HAL_GetTick();
;;;563    
;;;564          /* Wait till LSE is ready */
;;;565          while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;566          {
;;;567            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
;;;568            {
;;;569              return HAL_TIMEOUT;
;;;570            }
;;;571          }
;;;572        }
;;;573        else
;;;574        {
;;;575          /* Get Start Tick */
;;;576          tickstart = HAL_GetTick();
;;;577    
;;;578          /* Wait till LSE is disabled */
;;;579          while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;580          {
;;;581            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
;;;582            {
;;;583              return HAL_TIMEOUT;
;;;584            }
;;;585          }
;;;586        }
;;;587    
;;;588        /* Require to disable power clock if necessary */
;;;589        if (pwrclkchanged == SET)
;;;590        {
;;;591          __HAL_RCC_PWR_CLK_DISABLE();
;;;592        }
;;;593      }
;;;594    
;;;595    #if defined(RCC_CR_PLL2ON)
;;;596      /*-------------------------------- PLL2 Configuration -----------------------*/
;;;597      /* Check the parameters */
;;;598      assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
;;;599      if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
;;;600      {
;;;601        /* This bit can not be cleared if the PLL2 clock is used indirectly as system
;;;602          clock (i.e. it is used as PLL clock entry that is used as system clock). */
;;;603        if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
;;;604            (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
;;;605            ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
;;;606        {
;;;607          return HAL_ERROR;
;;;608        }
;;;609        else
;;;610        {
;;;611          if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
;;;612          {
;;;613            /* Check the parameters */
;;;614            assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
;;;615            assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));
;;;616    
;;;617            /* Prediv2 can be written only when the PLLI2S is disabled. */
;;;618            /* Return an error only if new value is different from the programmed value */
;;;619            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
;;;620                (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
;;;621            {
;;;622              return HAL_ERROR;
;;;623            }
;;;624    
;;;625            /* Disable the main PLL2. */
;;;626            __HAL_RCC_PLL2_DISABLE();
;;;627    
;;;628            /* Get Start Tick */
;;;629            tickstart = HAL_GetTick();
;;;630    
;;;631            /* Wait till PLL2 is disabled */
;;;632            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
;;;633            {
;;;634              if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;635              {
;;;636                return HAL_TIMEOUT;
;;;637              }
;;;638            }
;;;639    
;;;640            /* Configure the HSE prediv2 factor --------------------------------*/
;;;641            __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
;;;642    
;;;643            /* Configure the main PLL2 multiplication factors. */
;;;644            __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
;;;645    
;;;646            /* Enable the main PLL2. */
;;;647            __HAL_RCC_PLL2_ENABLE();
;;;648    
;;;649            /* Get Start Tick */
;;;650            tickstart = HAL_GetTick();
;;;651    
;;;652            /* Wait till PLL2 is ready */
;;;653            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
;;;654            {
;;;655              if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;656              {
;;;657                return HAL_TIMEOUT;
;;;658              }
;;;659            }
;;;660          }
;;;661          else
;;;662          {
;;;663            /* Set PREDIV1 source to HSE */
;;;664            CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
;;;665    
;;;666            /* Disable the main PLL2. */
;;;667            __HAL_RCC_PLL2_DISABLE();
;;;668    
;;;669            /* Get Start Tick */
;;;670            tickstart = HAL_GetTick();
;;;671    
;;;672            /* Wait till PLL2 is disabled */
;;;673            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
;;;674            {
;;;675              if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;676              {
;;;677                return HAL_TIMEOUT;
;;;678              }
;;;679            }
;;;680          }
;;;681        }
;;;682      }
;;;683    
;;;684    #endif /* RCC_CR_PLL2ON */
;;;685      /*-------------------------------- PLL Configuration -----------------------*/
;;;686      /* Check the parameters */
;;;687      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;688      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;689      {
;;;690        /* Check if the PLL is used as system clock or not */
;;;691        if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;692        {
;;;693          if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;694          {
;;;695            /* Check the parameters */
;;;696            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;697            assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
;;;698    
;;;699            /* Disable the main PLL. */
;;;700            __HAL_RCC_PLL_DISABLE();
;;;701    
;;;702            /* Get Start Tick */
;;;703            tickstart = HAL_GetTick();
;;;704    
;;;705            /* Wait till PLL is disabled */
;;;706            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;707            {
;;;708              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;709              {
;;;710                return HAL_TIMEOUT;
;;;711              }
;;;712            }
;;;713    
;;;714            /* Configure the HSE prediv factor --------------------------------*/
;;;715            /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
;;;716            if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
;;;717            {
;;;718              /* Check the parameter */
;;;719              assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
;;;720    #if defined(RCC_CFGR2_PREDIV1SRC)
;;;721              assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
;;;722    
;;;723              /* Set PREDIV1 source */
;;;724              SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
;;;725    #endif /* RCC_CFGR2_PREDIV1SRC */
;;;726    
;;;727              /* Set PREDIV1 Value */
;;;728              __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
;;;729            }
;;;730    
;;;731            /* Configure the main PLL clock source and multiplication factors. */
;;;732            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
;;;733                                 RCC_OscInitStruct->PLL.PLLMUL);
;;;734            /* Enable the main PLL. */
;;;735            __HAL_RCC_PLL_ENABLE();
;;;736    
;;;737            /* Get Start Tick */
;;;738            tickstart = HAL_GetTick();
;;;739    
;;;740            /* Wait till PLL is ready */
;;;741            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
;;;742            {
;;;743              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;744              {
;;;745                return HAL_TIMEOUT;
;;;746              }
;;;747            }
;;;748          }
;;;749          else
;;;750          {
;;;751            /* Disable the main PLL. */
;;;752            __HAL_RCC_PLL_DISABLE();
;;;753    
;;;754            /* Get Start Tick */
;;;755            tickstart = HAL_GetTick();
;;;756    
;;;757            /* Wait till PLL is disabled */
;;;758            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;759            {
;;;760              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;761              {
;;;762                return HAL_TIMEOUT;
;;;763              }
;;;764            }
;;;765          }
;;;766        }
;;;767        else
;;;768        {
;;;769          /* Check if there is a request to disable the PLL used as System clock source */
;;;770          if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
;;;771          {
;;;772            return HAL_ERROR;
;;;773          }
;;;774          else
;;;775          {
;;;776            /* Do not return HAL_ERROR if request repeats the current configuration */
;;;777            pll_config = RCC->CFGR;
;;;778            if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
;;;779                (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
;;;780            {
;;;781              return HAL_ERROR;
;;;782            }
;;;783          }
;;;784        }
;;;785      }
;;;786    
;;;787      return HAL_OK;
;;;788    }
00002a  e8bd8ff8          POP      {r3-r11,pc}
                  |L14.46|
00002e  6868              LDR      r0,[r5,#4]            ;369
000030  03c0              LSLS     r0,r0,#15             ;369
000032  d506              BPL      |L14.66|
                  |L14.52|
000034  6828              LDR      r0,[r5,#0]            ;371
000036  0380              LSLS     r0,r0,#14             ;371
000038  d54a              BPL      |L14.208|
00003a  68a0              LDR      r0,[r4,#8]            ;371
00003c  bba8              CBNZ     r0,|L14.170|
00003e  2001              MOVS     r0,#1                 ;373
000040  e7f3              B        |L14.42|
                  |L14.66|
000042  68a0              LDR      r0,[r4,#8]            ;379
000044  f5b03f80          CMP      r0,#0x10000           ;379
000048  d011              BEQ      |L14.110|
00004a  b1a8              CBZ      r0,|L14.120|
00004c  f5b02fa0          CMP      r0,#0x50000           ;379
000050  d01b              BEQ      |L14.138|
000052  6828              LDR      r0,[r5,#0]            ;379
000054  f4203080          BIC      r0,r0,#0x10000        ;379
000058  6028              STR      r0,[r5,#0]            ;379
00005a  6828              LDR      r0,[r5,#0]            ;379
00005c  f4202080          BIC      r0,r0,#0x40000        ;379
000060  6028              STR      r0,[r5,#0]            ;379
                  |L14.98|
000062  68a0              LDR      r0,[r4,#8]            ;383
000064  b330              CBZ      r0,|L14.180|
000066  f7fffffe          BL       HAL_GetTick
00006a  4606              MOV      r6,r0                 ;386
00006c  e01e              B        |L14.172|
                  |L14.110|
00006e  6828              LDR      r0,[r5,#0]            ;379
000070  f4403080          ORR      r0,r0,#0x10000        ;379
000074  6028              STR      r0,[r5,#0]            ;379
000076  e7f4              B        |L14.98|
                  |L14.120|
000078  6828              LDR      r0,[r5,#0]            ;379
00007a  f4203080          BIC      r0,r0,#0x10000        ;379
00007e  6028              STR      r0,[r5,#0]            ;379
000080  6828              LDR      r0,[r5,#0]            ;379
000082  f4202080          BIC      r0,r0,#0x40000        ;379
000086  6028              STR      r0,[r5,#0]            ;379
000088  e7eb              B        |L14.98|
                  |L14.138|
00008a  6828              LDR      r0,[r5,#0]            ;379
00008c  f4402080          ORR      r0,r0,#0x40000        ;379
000090  6028              STR      r0,[r5,#0]            ;379
000092  6828              LDR      r0,[r5,#0]            ;379
000094  f4403080          ORR      r0,r0,#0x10000        ;379
000098  6028              STR      r0,[r5,#0]            ;379
00009a  e7e2              B        |L14.98|
                  |L14.156|
00009c  f7fffffe          BL       HAL_GetTick
0000a0  1b80              SUBS     r0,r0,r6              ;391
0000a2  2864              CMP      r0,#0x64              ;391
0000a4  d902              BLS      |L14.172|
0000a6  2003              MOVS     r0,#3                 ;393
0000a8  e7bf              B        |L14.42|
                  |L14.170|
0000aa  e011              B        |L14.208|
                  |L14.172|
0000ac  6828              LDR      r0,[r5,#0]            ;389
0000ae  0380              LSLS     r0,r0,#14             ;389
0000b0  d5f4              BPL      |L14.156|
0000b2  e00d              B        |L14.208|
                  |L14.180|
0000b4  f7fffffe          BL       HAL_GetTick
0000b8  4606              MOV      r6,r0                 ;400
0000ba  e006              B        |L14.202|
                  |L14.188|
0000bc  f7fffffe          BL       HAL_GetTick
0000c0  1b80              SUBS     r0,r0,r6              ;405
0000c2  2864              CMP      r0,#0x64              ;405
0000c4  d901              BLS      |L14.202|
0000c6  2003              MOVS     r0,#3                 ;407
0000c8  e7af              B        |L14.42|
                  |L14.202|
0000ca  6828              LDR      r0,[r5,#0]            ;403
0000cc  0380              LSLS     r0,r0,#14             ;403
0000ce  d4f5              BMI      |L14.188|
                  |L14.208|
0000d0  7820              LDRB     r0,[r4,#0]            ;414
0000d2  4ec8              LDR      r6,|L14.1012|
0000d4  0780              LSLS     r0,r0,#30             ;414
0000d6  f04f0a01          MOV      r10,#1                ;355
0000da  f04f0700          MOV      r7,#0                 ;355
0000de  d546              BPL      |L14.366|
0000e0  6868              LDR      r0,[r5,#4]            ;421
0000e2  f0100f0c          TST      r0,#0xc               ;421
0000e6  d007              BEQ      |L14.248|
0000e8  6868              LDR      r0,[r5,#4]            ;422
0000ea  f3c00081          UBFX     r0,r0,#2,#2           ;422
0000ee  2802              CMP      r0,#2                 ;422
0000f0  d112              BNE      |L14.280|
0000f2  6868              LDR      r0,[r5,#4]            ;422
0000f4  03c0              LSLS     r0,r0,#15             ;422
0000f6  d40f              BMI      |L14.280|
                  |L14.248|
0000f8  6828              LDR      r0,[r5,#0]            ;425
0000fa  0780              LSLS     r0,r0,#30             ;425
0000fc  d504              BPL      |L14.264|
0000fe  6960              LDR      r0,[r4,#0x14]         ;425
000100  2801              CMP      r0,#1                 ;425
000102  d001              BEQ      |L14.264|
000104  2001              MOVS     r0,#1                 ;427
000106  e790              B        |L14.42|
                  |L14.264|
000108  6828              LDR      r0,[r5,#0]            ;433
00010a  69a1              LDR      r1,[r4,#0x18]         ;433
00010c  f02000f8          BIC      r0,r0,#0xf8           ;433
000110  ea4000c1          ORR      r0,r0,r1,LSL #3       ;433
000114  6028              STR      r0,[r5,#0]            ;433
000116  e02a              B        |L14.366|
                  |L14.280|
000118  6960              LDR      r0,[r4,#0x14]         ;439
00011a  b1c0              CBZ      r0,|L14.334|
00011c  f8c6a000          STR      r10,[r6,#0]           ;442
000120  f7fffffe          BL       HAL_GetTick
000124  4680              MOV      r8,r0                 ;445
000126  e007              B        |L14.312|
                  |L14.296|
000128  f7fffffe          BL       HAL_GetTick
00012c  eba00008          SUB      r0,r0,r8              ;450
000130  2802              CMP      r0,#2                 ;450
000132  d901              BLS      |L14.312|
000134  2003              MOVS     r0,#3                 ;452
000136  e778              B        |L14.42|
                  |L14.312|
000138  6828              LDR      r0,[r5,#0]            ;448
00013a  0780              LSLS     r0,r0,#30             ;448
00013c  d5f4              BPL      |L14.296|
00013e  6828              LDR      r0,[r5,#0]            ;457
000140  69a1              LDR      r1,[r4,#0x18]         ;457
000142  f02000f8          BIC      r0,r0,#0xf8           ;457
000146  ea4000c1          ORR      r0,r0,r1,LSL #3       ;457
00014a  6028              STR      r0,[r5,#0]            ;457
00014c  e00f              B        |L14.366|
                  |L14.334|
00014e  6037              STR      r7,[r6,#0]            ;462
000150  f7fffffe          BL       HAL_GetTick
000154  4680              MOV      r8,r0                 ;465
000156  e007              B        |L14.360|
                  |L14.344|
000158  f7fffffe          BL       HAL_GetTick
00015c  eba00008          SUB      r0,r0,r8              ;470
000160  2802              CMP      r0,#2                 ;470
000162  d901              BLS      |L14.360|
000164  2003              MOVS     r0,#3                 ;472
000166  e760              B        |L14.42|
                  |L14.360|
000168  6828              LDR      r0,[r5,#0]            ;468
00016a  0780              LSLS     r0,r0,#30             ;468
00016c  d4f4              BMI      |L14.344|
                  |L14.366|
00016e  7820              LDRB     r0,[r4,#0]            ;479
000170  0700              LSLS     r0,r0,#28             ;479
000172  d527              BPL      |L14.452|
000174  48a0              LDR      r0,|L14.1016|
000176  69e1              LDR      r1,[r4,#0x1c]         ;485
000178  b1a1              CBZ      r1,|L14.420|
00017a  f8c0a000          STR      r10,[r0,#0]           ;488
00017e  f7fffffe          BL       HAL_GetTick
000182  4680              MOV      r8,r0                 ;491
000184  e007              B        |L14.406|
                  |L14.390|
000186  f7fffffe          BL       HAL_GetTick
00018a  eba00008          SUB      r0,r0,r8              ;496
00018e  2802              CMP      r0,#2                 ;496
000190  d901              BLS      |L14.406|
000192  2003              MOVS     r0,#3                 ;498
000194  e749              B        |L14.42|
                  |L14.406|
000196  6a68              LDR      r0,[r5,#0x24]         ;494
000198  0780              LSLS     r0,r0,#30             ;494
00019a  d5f4              BPL      |L14.390|
00019c  2001              MOVS     r0,#1                 ;503
00019e  f7fffffe          BL       RCC_Delay
0001a2  e00f              B        |L14.452|
                  |L14.420|
0001a4  6007              STR      r7,[r0,#0]            ;508
0001a6  f7fffffe          BL       HAL_GetTick
0001aa  4680              MOV      r8,r0                 ;511
0001ac  e007              B        |L14.446|
                  |L14.430|
0001ae  f7fffffe          BL       HAL_GetTick
0001b2  eba00008          SUB      r0,r0,r8              ;516
0001b6  2802              CMP      r0,#2                 ;516
0001b8  d901              BLS      |L14.446|
0001ba  2003              MOVS     r0,#3                 ;518
0001bc  e735              B        |L14.42|
                  |L14.446|
0001be  6a68              LDR      r0,[r5,#0x24]         ;514
0001c0  0780              LSLS     r0,r0,#30             ;514
0001c2  d4f4              BMI      |L14.430|
                  |L14.452|
0001c4  7820              LDRB     r0,[r4,#0]            ;524
0001c6  0740              LSLS     r0,r0,#29             ;524
0001c8  d57a              BPL      |L14.704|
0001ca  f04f0800          MOV      r8,#0                 ;526
0001ce  69e8              LDR      r0,[r5,#0x1c]         ;533
0001d0  00c0              LSLS     r0,r0,#3              ;533
0001d2  d409              BMI      |L14.488|
0001d4  69e8              LDR      r0,[r5,#0x1c]         ;535
0001d6  f0405080          ORR      r0,r0,#0x10000000     ;535
0001da  61e8              STR      r0,[r5,#0x1c]         ;535
0001dc  69e8              LDR      r0,[r5,#0x1c]         ;535
0001de  f0005080          AND      r0,r0,#0x10000000     ;535
0001e2  9000              STR      r0,[sp,#0]            ;535
0001e4  f04f0801          MOV      r8,#1                 ;536
                  |L14.488|
0001e8  f8dfb210          LDR      r11,|L14.1020|
0001ec  f8db0000          LDR      r0,[r11,#0]           ;539
0001f0  05c0              LSLS     r0,r0,#23             ;539
0001f2  d415              BMI      |L14.544|
0001f4  f8db0000          LDR      r0,[r11,#0]           ;542
0001f8  f4407080          ORR      r0,r0,#0x100          ;542
0001fc  f8cb0000          STR      r0,[r11,#0]           ;542
000200  f7fffffe          BL       HAL_GetTick
000204  4681              MOV      r9,r0                 ;545
000206  e007              B        |L14.536|
                  |L14.520|
000208  f7fffffe          BL       HAL_GetTick
00020c  eba00009          SUB      r0,r0,r9              ;549
000210  2864              CMP      r0,#0x64              ;549
000212  d901              BLS      |L14.536|
000214  2003              MOVS     r0,#3                 ;551
000216  e708              B        |L14.42|
                  |L14.536|
000218  f8db0000          LDR      r0,[r11,#0]           ;547
00021c  05c0              LSLS     r0,r0,#23             ;547
00021e  d5f3              BPL      |L14.520|
                  |L14.544|
000220  6920              LDR      r0,[r4,#0x10]         ;557
000222  2801              CMP      r0,#1                 ;557
000224  d012              BEQ      |L14.588|
000226  b1b0              CBZ      r0,|L14.598|
000228  2805              CMP      r0,#5                 ;557
00022a  d01d              BEQ      |L14.616|
00022c  6a28              LDR      r0,[r5,#0x20]         ;557
00022e  f0200001          BIC      r0,r0,#1              ;557
000232  6228              STR      r0,[r5,#0x20]         ;557
000234  6a28              LDR      r0,[r5,#0x20]         ;557
000236  f0200004          BIC      r0,r0,#4              ;557
00023a  6228              STR      r0,[r5,#0x20]         ;557
                  |L14.572|
00023c  6920              LDR      r0,[r4,#0x10]         ;559
00023e  f2413b88          MOV      r11,#0x1388           ;567
000242  b330              CBZ      r0,|L14.658|
000244  f7fffffe          BL       HAL_GetTick
000248  4681              MOV      r9,r0                 ;562
00024a  e01e              B        |L14.650|
                  |L14.588|
00024c  6a28              LDR      r0,[r5,#0x20]         ;557
00024e  f0400001          ORR      r0,r0,#1              ;557
000252  6228              STR      r0,[r5,#0x20]         ;557
000254  e7f2              B        |L14.572|
                  |L14.598|
000256  6a28              LDR      r0,[r5,#0x20]         ;557
000258  f0200001          BIC      r0,r0,#1              ;557
00025c  6228              STR      r0,[r5,#0x20]         ;557
00025e  6a28              LDR      r0,[r5,#0x20]         ;557
000260  f0200004          BIC      r0,r0,#4              ;557
000264  6228              STR      r0,[r5,#0x20]         ;557
000266  e7e9              B        |L14.572|
                  |L14.616|
000268  6a28              LDR      r0,[r5,#0x20]         ;557
00026a  f0400004          ORR      r0,r0,#4              ;557
00026e  6228              STR      r0,[r5,#0x20]         ;557
000270  6a28              LDR      r0,[r5,#0x20]         ;557
000272  f0400001          ORR      r0,r0,#1              ;557
000276  6228              STR      r0,[r5,#0x20]         ;557
000278  e7e0              B        |L14.572|
                  |L14.634|
00027a  f7fffffe          BL       HAL_GetTick
00027e  eba00009          SUB      r0,r0,r9              ;567
000282  4558              CMP      r0,r11                ;567
000284  d901              BLS      |L14.650|
000286  2003              MOVS     r0,#3                 ;569
000288  e6cf              B        |L14.42|
                  |L14.650|
00028a  6a28              LDR      r0,[r5,#0x20]         ;565
00028c  0780              LSLS     r0,r0,#30             ;565
00028e  d5f4              BPL      |L14.634|
000290  e00f              B        |L14.690|
                  |L14.658|
000292  f7fffffe          BL       HAL_GetTick
000296  4681              MOV      r9,r0                 ;576
000298  e008              B        |L14.684|
                  |L14.666|
00029a  f7fffffe          BL       HAL_GetTick
00029e  eba00009          SUB      r0,r0,r9              ;581
0002a2  4558              CMP      r0,r11                ;581
0002a4  d902              BLS      |L14.684|
0002a6  2003              MOVS     r0,#3                 ;583
0002a8  e6bf              B        |L14.42|
0002aa  e009              B        |L14.704|
                  |L14.684|
0002ac  6a28              LDR      r0,[r5,#0x20]         ;579
0002ae  0780              LSLS     r0,r0,#30             ;579
0002b0  d4f3              BMI      |L14.666|
                  |L14.690|
0002b2  f1b80f01          CMP      r8,#1                 ;589
0002b6  d103              BNE      |L14.704|
0002b8  69e8              LDR      r0,[r5,#0x1c]         ;591
0002ba  f0205080          BIC      r0,r0,#0x10000000     ;591
0002be  61e8              STR      r0,[r5,#0x1c]         ;591
                  |L14.704|
0002c0  6ae0              LDR      r0,[r4,#0x2c]         ;599
0002c2  b378              CBZ      r0,|L14.804|
0002c4  6869              LDR      r1,[r5,#4]            ;603
0002c6  03c9              LSLS     r1,r1,#15             ;603
0002c8  d509              BPL      |L14.734|
0002ca  6869              LDR      r1,[r5,#4]            ;604
0002cc  f3c10181          UBFX     r1,r1,#2,#2           ;604
0002d0  2902              CMP      r1,#2                 ;604
0002d2  d104              BNE      |L14.734|
0002d4  6ae9              LDR      r1,[r5,#0x2c]         ;605
0002d6  03c9              LSLS     r1,r1,#15             ;605
0002d8  d501              BPL      |L14.734|
0002da  2001              MOVS     r0,#1                 ;607
0002dc  e6a5              B        |L14.42|
                  |L14.734|
0002de  2802              CMP      r0,#2                 ;611
0002e0  d008              BEQ      |L14.756|
0002e2  6ae8              LDR      r0,[r5,#0x2c]         ;664
0002e4  f4203080          BIC      r0,r0,#0x10000        ;664
0002e8  62e8              STR      r0,[r5,#0x2c]         ;664
0002ea  66b7              STR      r7,[r6,#0x68]         ;667
0002ec  f7fffffe          BL       HAL_GetTick
0002f0  4680              MOV      r8,r0                 ;670
0002f2  e041              B        |L14.888|
                  |L14.756|
0002f4  6828              LDR      r0,[r5,#0]            ;619
0002f6  00c0              LSLS     r0,r0,#3              ;619
0002f8  d507              BPL      |L14.778|
0002fa  6ae8              LDR      r0,[r5,#0x2c]         ;620
0002fc  6b61              LDR      r1,[r4,#0x34]         ;620
0002fe  f00000f0          AND      r0,r0,#0xf0           ;620
000302  4288              CMP      r0,r1                 ;620
000304  d001              BEQ      |L14.778|
000306  2001              MOVS     r0,#1                 ;622
000308  e68f              B        |L14.42|
                  |L14.778|
00030a  66b7              STR      r7,[r6,#0x68]         ;626
00030c  f7fffffe          BL       HAL_GetTick
000310  4680              MOV      r8,r0                 ;629
000312  e008              B        |L14.806|
                  |L14.788|
000314  f7fffffe          BL       HAL_GetTick
000318  eba00008          SUB      r0,r0,r8              ;634
00031c  2864              CMP      r0,#0x64              ;634
00031e  d902              BLS      |L14.806|
000320  2003              MOVS     r0,#3                 ;636
000322  e682              B        |L14.42|
                  |L14.804|
000324  e02b              B        |L14.894|
                  |L14.806|
000326  6828              LDR      r0,[r5,#0]            ;632
000328  0100              LSLS     r0,r0,#4              ;632
00032a  d4f3              BMI      |L14.788|
00032c  6ae8              LDR      r0,[r5,#0x2c]         ;641
00032e  6b61              LDR      r1,[r4,#0x34]         ;641
000330  f02000f0          BIC      r0,r0,#0xf0           ;641
000334  4308              ORRS     r0,r0,r1              ;641
000336  62e8              STR      r0,[r5,#0x2c]         ;641
000338  6ae8              LDR      r0,[r5,#0x2c]         ;644
00033a  6b21              LDR      r1,[r4,#0x30]         ;644
00033c  f4206070          BIC      r0,r0,#0xf00          ;644
000340  4308              ORRS     r0,r0,r1              ;644
000342  62e8              STR      r0,[r5,#0x2c]         ;644
000344  f8c6a068          STR      r10,[r6,#0x68]        ;647
000348  f7fffffe          BL       HAL_GetTick
00034c  4680              MOV      r8,r0                 ;650
00034e  e007              B        |L14.864|
                  |L14.848|
000350  f7fffffe          BL       HAL_GetTick
000354  eba00008          SUB      r0,r0,r8              ;655
000358  2864              CMP      r0,#0x64              ;655
00035a  d901              BLS      |L14.864|
00035c  2003              MOVS     r0,#3                 ;657
00035e  e664              B        |L14.42|
                  |L14.864|
000360  6828              LDR      r0,[r5,#0]            ;653
000362  0100              LSLS     r0,r0,#4              ;653
000364  d5f4              BPL      |L14.848|
000366  e00a              B        |L14.894|
                  |L14.872|
000368  f7fffffe          BL       HAL_GetTick
00036c  eba00008          SUB      r0,r0,r8              ;675
000370  2864              CMP      r0,#0x64              ;675
000372  d901              BLS      |L14.888|
000374  2003              MOVS     r0,#3                 ;677
000376  e658              B        |L14.42|
                  |L14.888|
000378  6828              LDR      r0,[r5,#0]            ;673
00037a  0100              LSLS     r0,r0,#4              ;673
00037c  d4f4              BMI      |L14.872|
                  |L14.894|
00037e  6a20              LDR      r0,[r4,#0x20]         ;688
000380  b3f0              CBZ      r0,|L14.1024|
000382  6869              LDR      r1,[r5,#4]            ;691
000384  f3c10181          UBFX     r1,r1,#2,#2           ;691
000388  2902              CMP      r1,#2                 ;691
00038a  d050              BEQ      |L14.1070|
00038c  2802              CMP      r0,#2                 ;693
00038e  d004              BEQ      |L14.922|
000390  6637              STR      r7,[r6,#0x60]         ;752
000392  f7fffffe          BL       HAL_GetTick
000396  4604              MOV      r4,r0                 ;755
000398  e045              B        |L14.1062|
                  |L14.922|
00039a  6637              STR      r7,[r6,#0x60]         ;700
00039c  f7fffffe          BL       HAL_GetTick
0003a0  4607              MOV      r7,r0                 ;703
0003a2  e006              B        |L14.946|
                  |L14.932|
0003a4  f7fffffe          BL       HAL_GetTick
0003a8  1bc0              SUBS     r0,r0,r7              ;708
0003aa  2802              CMP      r0,#2                 ;708
0003ac  d901              BLS      |L14.946|
0003ae  2003              MOVS     r0,#3                 ;710
0003b0  e63b              B        |L14.42|
                  |L14.946|
0003b2  6828              LDR      r0,[r5,#0]            ;706
0003b4  0180              LSLS     r0,r0,#6              ;706
0003b6  d4f5              BMI      |L14.932|
0003b8  6a60              LDR      r0,[r4,#0x24]         ;716
0003ba  f5b03f80          CMP      r0,#0x10000           ;716
0003be  d109              BNE      |L14.980|
0003c0  6ae8              LDR      r0,[r5,#0x2c]         ;724
0003c2  6861              LDR      r1,[r4,#4]            ;724
0003c4  4308              ORRS     r0,r0,r1              ;724
0003c6  62e8              STR      r0,[r5,#0x2c]         ;724
0003c8  6ae8              LDR      r0,[r5,#0x2c]         ;728
0003ca  68e1              LDR      r1,[r4,#0xc]          ;728
0003cc  f020000f          BIC      r0,r0,#0xf            ;728
0003d0  4308              ORRS     r0,r0,r1              ;728
0003d2  62e8              STR      r0,[r5,#0x2c]         ;728
                  |L14.980|
0003d4  e9d40109          LDRD     r0,r1,[r4,#0x24]      ;732
0003d8  4308              ORRS     r0,r0,r1              ;732
0003da  6869              LDR      r1,[r5,#4]            ;732
0003dc  f4211174          BIC      r1,r1,#0x3d0000       ;732
0003e0  4308              ORRS     r0,r0,r1              ;732
0003e2  6068              STR      r0,[r5,#4]            ;732
0003e4  f8c6a060          STR      r10,[r6,#0x60]        ;735
0003e8  f7fffffe          BL       HAL_GetTick
0003ec  4604              MOV      r4,r0                 ;738
0003ee  e00f              B        |L14.1040|
                  |L14.1008|
                          DCD      0x40021000
                  |L14.1012|
                          DCD      0x42420000
                  |L14.1016|
                          DCD      0x42420480
                  |L14.1020|
                          DCD      0x40007000
                  |L14.1024|
000400  e026              B        |L14.1104|
                  |L14.1026|
000402  f7fffffe          BL       HAL_GetTick
000406  1b00              SUBS     r0,r0,r4              ;743
000408  2802              CMP      r0,#2                 ;743
00040a  d901              BLS      |L14.1040|
00040c  2003              MOVS     r0,#3                 ;745
00040e  e60c              B        |L14.42|
                  |L14.1040|
000410  6828              LDR      r0,[r5,#0]            ;741
000412  0180              LSLS     r0,r0,#6              ;741
000414  d5f5              BPL      |L14.1026|
000416  e01b              B        |L14.1104|
                  |L14.1048|
000418  f7fffffe          BL       HAL_GetTick
00041c  1b00              SUBS     r0,r0,r4              ;760
00041e  2802              CMP      r0,#2                 ;760
000420  d901              BLS      |L14.1062|
000422  2003              MOVS     r0,#3                 ;762
000424  e601              B        |L14.42|
                  |L14.1062|
000426  6828              LDR      r0,[r5,#0]            ;758
000428  0180              LSLS     r0,r0,#6              ;758
00042a  d4f5              BMI      |L14.1048|
00042c  e010              B        |L14.1104|
                  |L14.1070|
00042e  2801              CMP      r0,#1                 ;770
000430  d00c              BEQ      |L14.1100|
000432  6868              LDR      r0,[r5,#4]            ;777
000434  6a62              LDR      r2,[r4,#0x24]         ;778
000436  f4003180          AND      r1,r0,#0x10000        ;778
00043a  4291              CMP      r1,r2                 ;778
00043c  d104              BNE      |L14.1096|
00043e  6aa1              LDR      r1,[r4,#0x28]         ;779
000440  f4001070          AND      r0,r0,#0x3c0000       ;779
000444  4288              CMP      r0,r1                 ;779
000446  d003              BEQ      |L14.1104|
                  |L14.1096|
000448  2001              MOVS     r0,#1                 ;781
00044a  e5ee              B        |L14.42|
                  |L14.1100|
00044c  2001              MOVS     r0,#1                 ;772
00044e  e5ec              B        |L14.42|
                  |L14.1104|
000450  2000              MOVS     r0,#0                 ;787
000452  e5ea              B        |L14.42|
;;;789    
                          ENDP


                          AREA ||i.RCC_Delay||, CODE, READONLY, ALIGN=2

                  RCC_Delay PROC
;;;1364     */
;;;1365   static void RCC_Delay(uint32_t mdelay)
000000  b508              PUSH     {r3,lr}
;;;1366   {
;;;1367     __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
000002  4907              LDR      r1,|L15.32|
000004  f44f52fa          MOV      r2,#0x1f40
000008  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
00000a  fbb1f1f2          UDIV     r1,r1,r2
00000e  4341              MULS     r1,r0,r1
000010  9100              STR      r1,[sp,#0]
                  |L15.18|
;;;1368     do
;;;1369     {
;;;1370       __NOP();
000012  bf00              NOP      
;;;1371     }
;;;1372     while (Delay --);
000014  9800              LDR      r0,[sp,#0]
000016  1e41              SUBS     r1,r0,#1
000018  9100              STR      r1,[sp,#0]
00001a  d2fa              BCS      |L15.18|
;;;1373   }
00001c  bd08              POP      {r3,pc}
;;;1374   
                          ENDP

00001e  0000              DCW      0x0000
                  |L15.32|
                          DCD      SystemCoreClock

;*** Start embedded assembler ***

#line 1 "..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REV16|
#line 463 "..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REVSH|
#line 478
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____RRX|
#line 665
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
