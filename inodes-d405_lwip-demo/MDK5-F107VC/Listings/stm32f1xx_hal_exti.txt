; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\stm32f1xx_hal_exti.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_exti.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\CMSIS\Device -I..\Drivers\CMSIS\Include -I..\Middlewares\Third_Party\LwIP\src\include -I..\Middlewares\Third_Party\LwIP\system -I..\Middlewares\Third_Party\LwIP\src\include\netif\ppp -I..\Middlewares\Third_Party\LwIP\src\include\lwip -I..\Middlewares\Third_Party\LwIP\src\include\lwip\apps -I..\Middlewares\Third_Party\LwIP\src\include\lwip\priv -I..\Middlewares\Third_Party\LwIP\src\include\lwip\prot -I..\Middlewares\Third_Party\LwIP\src\include\netif -I..\Middlewares\Third_Party\LwIP\src\include\posix -I..\Middlewares\Third_Party\LwIP\src\include\posix\sys -I..\Middlewares\Third_Party\LwIP\system\arch -I..\App -I..\Middlewares\Third_Party\LwIP\system -I.\RTE\_f107vc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_CL -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F107xC --omf_browse=.\objects\stm32f1xx_hal_exti.crf ..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_exti.c]
                          THUMB

                          AREA ||i.HAL_EXTI_ClearConfigLine||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_ClearConfigLine PROC
;;;326      */
;;;327    HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
000000  b510              PUSH     {r4,lr}
;;;328    {
;;;329      uint32_t regval;
;;;330      uint32_t linepos;
;;;331      uint32_t maskline;
;;;332    
;;;333      /* Check null pointer */
;;;334      if (hexti == NULL)
000002  2800              CMP      r0,#0
000004  d01e              BEQ      |L1.68|
;;;335      {
;;;336        return HAL_ERROR;
;;;337      }
;;;338    
;;;339      /* Check the parameter */
;;;340      assert_param(IS_EXTI_LINE(hexti->Line));
;;;341    
;;;342      /* compute line mask */
;;;343      linepos = (hexti->Line & EXTI_PIN_MASK);
000006  7801              LDRB     r1,[r0,#0]
000008  f001021f          AND      r2,r1,#0x1f
;;;344      maskline = (1uL << linepos);
00000c  2101              MOVS     r1,#1
00000e  4091              LSLS     r1,r1,r2
;;;345    
;;;346      /* 1] Clear interrupt mode */
;;;347      EXTI->IMR = (EXTI->IMR & ~maskline);
000010  4b14              LDR      r3,|L1.100|
000012  681c              LDR      r4,[r3,#0]
000014  438c              BICS     r4,r4,r1
000016  601c              STR      r4,[r3,#0]
;;;348    
;;;349      /* 2] Clear event mode */
;;;350      EXTI->EMR = (EXTI->EMR & ~maskline);
000018  1d1b              ADDS     r3,r3,#4
00001a  681c              LDR      r4,[r3,#0]
00001c  438c              BICS     r4,r4,r1
00001e  601c              STR      r4,[r3,#0]
;;;351    
;;;352      /* 3] Clear triggers in case of configurable lines */
;;;353      if ((hexti->Line & EXTI_CONFIG) != 0x00u)
000020  6803              LDR      r3,[r0,#0]
000022  019b              LSLS     r3,r3,#6
000024  d51b              BPL      |L1.94|
;;;354      {
;;;355        EXTI->RTSR = (EXTI->RTSR & ~maskline);
000026  4b0f              LDR      r3,|L1.100|
000028  3308              ADDS     r3,r3,#8
00002a  681c              LDR      r4,[r3,#0]
00002c  438c              BICS     r4,r4,r1
00002e  601c              STR      r4,[r3,#0]
;;;356        EXTI->FTSR = (EXTI->FTSR & ~maskline);
000030  1d1b              ADDS     r3,r3,#4
000032  681c              LDR      r4,[r3,#0]
000034  438c              BICS     r4,r4,r1
000036  601c              STR      r4,[r3,#0]
;;;357    
;;;358        /* Get Gpio port selection for gpio lines */
;;;359        if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
000038  6800              LDR      r0,[r0,#0]
00003a  f3c06041          UBFX     r0,r0,#25,#2
00003e  2803              CMP      r0,#3
000040  d002              BEQ      |L1.72|
000042  e00c              B        |L1.94|
                  |L1.68|
000044  2001              MOVS     r0,#1                 ;336
;;;360        {
;;;361          assert_param(IS_EXTI_GPIO_PIN(linepos));
;;;362    
;;;363          regval = AFIO->EXTICR[linepos >> 2u];
;;;364          regval &= ~(AFIO_EXTICR1_EXTI0 << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
;;;365          AFIO->EXTICR[linepos >> 2u] = regval;
;;;366        }
;;;367      }
;;;368    
;;;369      return HAL_OK;
;;;370    }
000046  bd10              POP      {r4,pc}
                  |L1.72|
000048  4807              LDR      r0,|L1.104|
00004a  f0220103          BIC      r1,r2,#3              ;363
00004e  4408              ADD      r0,r0,r1              ;363
000050  6881              LDR      r1,[r0,#8]            ;363
000052  0792              LSLS     r2,r2,#30             ;364
000054  0f13              LSRS     r3,r2,#28             ;364
000056  220f              MOVS     r2,#0xf               ;364
000058  409a              LSLS     r2,r2,r3              ;364
00005a  4391              BICS     r1,r1,r2              ;364
00005c  6081              STR      r1,[r0,#8]            ;365
                  |L1.94|
00005e  2000              MOVS     r0,#0                 ;369
000060  bd10              POP      {r4,pc}
;;;371    
                          ENDP

000062  0000              DCW      0x0000
                  |L1.100|
                          DCD      0x40010400
                  |L1.104|
                          DCD      0x40010000

                          AREA ||i.HAL_EXTI_ClearPending||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_ClearPending PROC
;;;505      */
;;;506    void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
000000  7800              LDRB     r0,[r0,#0]
;;;507    {
;;;508      uint32_t maskline;
;;;509    
;;;510      /* Check parameters */
;;;511      assert_param(IS_EXTI_LINE(hexti->Line));
;;;512      assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
;;;513      assert_param(IS_EXTI_PENDING_EDGE(Edge));
;;;514    
;;;515      /* Compute line mask */
;;;516      maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
000002  f000011f          AND      r1,r0,#0x1f
000006  2001              MOVS     r0,#1
000008  4088              LSLS     r0,r0,r1
;;;517    
;;;518      /* Clear Pending bit */
;;;519      EXTI->PR =  maskline;
00000a  4901              LDR      r1,|L2.16|
00000c  6008              STR      r0,[r1,#0]
;;;520    }
00000e  4770              BX       lr
;;;521    
                          ENDP

                  |L2.16|
                          DCD      0x40010414

                          AREA ||i.HAL_EXTI_GenerateSWI||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_GenerateSWI PROC
;;;526      */
;;;527    void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
000000  7800              LDRB     r0,[r0,#0]
;;;528    {
;;;529      uint32_t maskline;
;;;530    
;;;531      /* Check parameters */
;;;532      assert_param(IS_EXTI_LINE(hexti->Line));
;;;533      assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
;;;534    
;;;535      /* Compute line mask */
;;;536      maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
000002  f000011f          AND      r1,r0,#0x1f
000006  2001              MOVS     r0,#1
000008  4088              LSLS     r0,r0,r1
;;;537    
;;;538      /* Generate Software interrupt */
;;;539      EXTI->SWIER = maskline;
00000a  4901              LDR      r1,|L3.16|
00000c  6008              STR      r0,[r1,#0]
;;;540    }
00000e  4770              BX       lr
;;;541    
                          ENDP

                  |L3.16|
                          DCD      0x40010410

                          AREA ||i.HAL_EXTI_GetConfigLine||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_GetConfigLine PROC
;;;237      */
;;;238    HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;239    {
;;;240      uint32_t regval;
;;;241      uint32_t linepos;
;;;242      uint32_t maskline;
;;;243    
;;;244      /* Check null pointer */
;;;245      if ((hexti == NULL) || (pExtiConfig == NULL))
000002  2800              CMP      r0,#0
000004  d00f              BEQ      |L4.38|
000006  b171              CBZ      r1,|L4.38|
;;;246      {
;;;247        return HAL_ERROR;
;;;248      }
;;;249    
;;;250      /* Check the parameter */
;;;251      assert_param(IS_EXTI_LINE(hexti->Line));
;;;252    
;;;253      /* Store handle line number to configuration structure */
;;;254      pExtiConfig->Line = hexti->Line;
000008  6803              LDR      r3,[r0,#0]
00000a  600b              STR      r3,[r1,#0]
;;;255    
;;;256      /* Compute line mask */
;;;257      linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
00000c  f003021f          AND      r2,r3,#0x1f
;;;258      maskline = (1uL << linepos);
000010  2501              MOVS     r5,#1
000012  fa05f002          LSL      r0,r5,r2
;;;259    
;;;260      /* 1] Get core mode : interrupt */
;;;261    
;;;262      /* Check if selected line is enable */
;;;263      if ((EXTI->IMR & maskline) != 0x00u)
000016  4c1f              LDR      r4,|L4.148|
000018  6826              LDR      r6,[r4,#0]
00001a  f04f0400          MOV      r4,#0
00001e  4206              TST      r6,r0
000020  d003              BEQ      |L4.42|
;;;264      {
;;;265        pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
000022  604d              STR      r5,[r1,#4]
000024  e002              B        |L4.44|
                  |L4.38|
000026  2001              MOVS     r0,#1                 ;247
;;;266      }
;;;267      else
;;;268      {
;;;269        pExtiConfig->Mode = EXTI_MODE_NONE;
;;;270      }
;;;271    
;;;272      /* Get event mode */
;;;273      /* Check if selected line is enable */
;;;274      if ((EXTI->EMR & maskline) != 0x00u)
;;;275      {
;;;276        pExtiConfig->Mode |= EXTI_MODE_EVENT;
;;;277      }
;;;278    
;;;279      /* 2] Get trigger for configurable lines : rising */
;;;280      if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
;;;281      {
;;;282        /* Check if configuration of selected line is enable */
;;;283        if ((EXTI->RTSR & maskline) != 0x00u)
;;;284        {
;;;285          pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
;;;286        }
;;;287        else
;;;288        {
;;;289          pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
;;;290        }
;;;291    
;;;292        /* Get falling configuration */
;;;293        /* Check if configuration of selected line is enable */
;;;294        if ((EXTI->FTSR & maskline) != 0x00u)
;;;295        {
;;;296          pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
;;;297        }
;;;298    
;;;299        /* Get Gpio port selection for gpio lines */
;;;300        if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
;;;301        {
;;;302          assert_param(IS_EXTI_GPIO_PIN(linepos));
;;;303    
;;;304          regval = AFIO->EXTICR[linepos >> 2u];
;;;305          pExtiConfig->GPIOSel = ((regval << (AFIO_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
;;;306        }
;;;307        else
;;;308        {
;;;309          pExtiConfig->GPIOSel = 0x00u;
;;;310        }
;;;311      }
;;;312      else
;;;313      {
;;;314        /* No Trigger selected */
;;;315        pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
;;;316        pExtiConfig->GPIOSel = 0x00u;
;;;317      }
;;;318    
;;;319      return HAL_OK;
;;;320    }
000028  bd70              POP      {r4-r6,pc}
                  |L4.42|
00002a  604c              STR      r4,[r1,#4]            ;269
                  |L4.44|
00002c  4e19              LDR      r6,|L4.148|
00002e  1d36              ADDS     r6,r6,#4              ;274
000030  6836              LDR      r6,[r6,#0]            ;274
000032  4206              TST      r6,r0                 ;274
000034  d003              BEQ      |L4.62|
000036  684e              LDR      r6,[r1,#4]            ;276
000038  f0460602          ORR      r6,r6,#2              ;276
00003c  604e              STR      r6,[r1,#4]            ;276
                  |L4.62|
00003e  019e              LSLS     r6,r3,#6              ;280
000040  d524              BPL      |L4.140|
000042  4e14              LDR      r6,|L4.148|
000044  3608              ADDS     r6,r6,#8              ;283
000046  6836              LDR      r6,[r6,#0]            ;283
000048  4206              TST      r6,r0                 ;283
00004a  d001              BEQ      |L4.80|
00004c  608d              STR      r5,[r1,#8]            ;285
00004e  e000              B        |L4.82|
                  |L4.80|
000050  608c              STR      r4,[r1,#8]            ;289
                  |L4.82|
000052  4d10              LDR      r5,|L4.148|
000054  350c              ADDS     r5,r5,#0xc            ;294
000056  682d              LDR      r5,[r5,#0]            ;294
000058  4205              TST      r5,r0                 ;294
00005a  d003              BEQ      |L4.100|
00005c  6888              LDR      r0,[r1,#8]            ;296
00005e  f0400002          ORR      r0,r0,#2              ;296
000062  6088              STR      r0,[r1,#8]            ;296
                  |L4.100|
000064  f3c36041          UBFX     r0,r3,#25,#2          ;300
000068  2803              CMP      r0,#3                 ;300
00006a  d001              BEQ      |L4.112|
00006c  60cc              STR      r4,[r1,#0xc]          ;309
00006e  e00f              B        |L4.144|
                  |L4.112|
000070  4b09              LDR      r3,|L4.152|
000072  f0220003          BIC      r0,r2,#3              ;304
000076  4418              ADD      r0,r0,r3              ;304
000078  6880              LDR      r0,[r0,#8]            ;304
00007a  f0020203          AND      r2,r2,#3              ;305
00007e  f1c20203          RSB      r2,r2,#3              ;305
000082  0092              LSLS     r2,r2,#2              ;305
000084  4090              LSLS     r0,r0,r2              ;305
000086  0e00              LSRS     r0,r0,#24             ;305
000088  60c8              STR      r0,[r1,#0xc]          ;305
00008a  e001              B        |L4.144|
                  |L4.140|
00008c  608c              STR      r4,[r1,#8]            ;315
00008e  60cc              STR      r4,[r1,#0xc]          ;316
                  |L4.144|
000090  2000              MOVS     r0,#0                 ;319
000092  bd70              POP      {r4-r6,pc}
;;;321    
                          ENDP

                  |L4.148|
                          DCD      0x40010400
                  |L4.152|
                          DCD      0x40010000

                          AREA ||i.HAL_EXTI_GetHandle||, CODE, READONLY, ALIGN=1

                  HAL_EXTI_GetHandle PROC
;;;404      */
;;;405    HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
000000  2800              CMP      r0,#0
;;;406    {
000002  d002              BEQ      |L5.10|
;;;407      /* Check the parameters */
;;;408      assert_param(IS_EXTI_LINE(ExtiLine));
;;;409    
;;;410      /* Check null pointer */
;;;411      if (hexti == NULL)
;;;412      {
;;;413        return HAL_ERROR;
;;;414      }
;;;415      else
;;;416      {
;;;417        /* Store line number as handle private field */
;;;418        hexti->Line = ExtiLine;
000004  6001              STR      r1,[r0,#0]
;;;419    
;;;420        return HAL_OK;
000006  2000              MOVS     r0,#0
;;;421      }
;;;422    }
000008  4770              BX       lr
                  |L5.10|
00000a  2001              MOVS     r0,#1                 ;413
00000c  4770              BX       lr
;;;423    
                          ENDP


                          AREA ||i.HAL_EXTI_GetPending||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_GetPending PROC
;;;476      */
;;;477    uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
000000  7800              LDRB     r0,[r0,#0]
;;;478    {
;;;479      uint32_t regval;
;;;480      uint32_t maskline;
;;;481      uint32_t linepos;
;;;482    
;;;483      /* Check parameters */
;;;484      assert_param(IS_EXTI_LINE(hexti->Line));
;;;485      assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
;;;486      assert_param(IS_EXTI_PENDING_EDGE(Edge));
;;;487    
;;;488      /* Compute line mask */
;;;489      linepos = (hexti->Line & EXTI_PIN_MASK);
000002  f000011f          AND      r1,r0,#0x1f
;;;490      maskline = (1uL << linepos);
000006  2201              MOVS     r2,#1
000008  408a              LSLS     r2,r2,r1
;;;491    
;;;492      /* return 1 if bit is set else 0 */
;;;493      regval = ((EXTI->PR & maskline) >> linepos);
00000a  4802              LDR      r0,|L6.20|
00000c  6800              LDR      r0,[r0,#0]
00000e  4010              ANDS     r0,r0,r2
000010  40c8              LSRS     r0,r0,r1
;;;494      return regval;
;;;495    }
000012  4770              BX       lr
;;;496    
                          ENDP

                  |L6.20|
                          DCD      0x40010414

                          AREA ||i.HAL_EXTI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_IRQHandler PROC
;;;444      */
;;;445    void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
000000  7801              LDRB     r1,[r0,#0]
;;;446    {
;;;447      uint32_t regval;
;;;448      uint32_t maskline;
;;;449    
;;;450      /* Compute line mask */
;;;451      maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
000002  f001021f          AND      r2,r1,#0x1f
000006  2101              MOVS     r1,#1
000008  4091              LSLS     r1,r1,r2
;;;452    
;;;453      /* Get pending bit  */
;;;454      regval = (EXTI->PR & maskline);
00000a  4b05              LDR      r3,|L7.32|
00000c  681a              LDR      r2,[r3,#0]
00000e  400a              ANDS     r2,r2,r1
;;;455      if (regval != 0x00u)
000010  2a00              CMP      r2,#0
000012  d004              BEQ      |L7.30|
;;;456      {
;;;457        /* Clear pending bit */
;;;458        EXTI->PR = maskline;
000014  6019              STR      r1,[r3,#0]
;;;459    
;;;460        /* Call callback */
;;;461        if (hexti->PendingCallback != NULL)
000016  6840              LDR      r0,[r0,#4]
000018  2800              CMP      r0,#0
00001a  d000              BEQ      |L7.30|
;;;462        {
;;;463          hexti->PendingCallback();
00001c  4700              BX       r0
                  |L7.30|
;;;464        }
;;;465      }
;;;466    }
00001e  4770              BX       lr
;;;467    
                          ENDP

                  |L7.32|
                          DCD      0x40010414

                          AREA ||i.HAL_EXTI_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_EXTI_RegisterCallback PROC
;;;379      */
;;;380    HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
000000  4603              MOV      r3,r0
;;;381    {
;;;382      HAL_StatusTypeDef status = HAL_OK;
000002  2000              MOVS     r0,#0
;;;383    
;;;384      switch (CallbackID)
000004  2900              CMP      r1,#0
000006  d001              BEQ      |L8.12|
;;;385      {
;;;386        case  HAL_EXTI_COMMON_CB_ID:
;;;387          hexti->PendingCallback = pPendingCbfn;
;;;388          break;
;;;389    
;;;390        default:
;;;391          status = HAL_ERROR;
000008  2001              MOVS     r0,#1
;;;392          break;
;;;393      }
;;;394    
;;;395      return status;
;;;396    }
00000a  4770              BX       lr
                  |L8.12|
00000c  605a              STR      r2,[r3,#4]            ;387
00000e  4770              BX       lr
;;;397    
                          ENDP


                          AREA ||i.HAL_EXTI_SetConfigLine||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_SetConfigLine PROC
;;;142      */
;;;143    HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
000000  b530              PUSH     {r4,r5,lr}
;;;144    {
;;;145      uint32_t regval;
;;;146      uint32_t linepos;
;;;147      uint32_t maskline;
;;;148    
;;;149      /* Check null pointer */
;;;150      if ((hexti == NULL) || (pExtiConfig == NULL))
000002  2800              CMP      r0,#0
000004  d011              BEQ      |L9.42|
000006  b181              CBZ      r1,|L9.42|
;;;151      {
;;;152        return HAL_ERROR;
;;;153      }
;;;154    
;;;155      /* Check parameters */
;;;156      assert_param(IS_EXTI_LINE(pExtiConfig->Line));
;;;157      assert_param(IS_EXTI_MODE(pExtiConfig->Mode));
;;;158    
;;;159      /* Assign line number to handle */
;;;160      hexti->Line = pExtiConfig->Line;
000008  680a              LDR      r2,[r1,#0]
00000a  6002              STR      r2,[r0,#0]
;;;161    
;;;162      /* Compute line mask */
;;;163      linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
00000c  680b              LDR      r3,[r1,#0]
00000e  f003021f          AND      r2,r3,#0x1f
;;;164      maskline = (1uL << linepos);
000012  2001              MOVS     r0,#1
000014  4090              LSLS     r0,r0,r2
;;;165    
;;;166      /* Configure triggers for configurable lines */
;;;167      if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
000016  019b              LSLS     r3,r3,#6
000018  d52a              BPL      |L9.112|
;;;168      {
;;;169        assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));
;;;170    
;;;171        /* Configure rising trigger */
;;;172        /* Mask or set line */
;;;173        if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
00001a  7a0b              LDRB     r3,[r1,#8]
00001c  07dc              LSLS     r4,r3,#31
;;;174        {
;;;175          EXTI->RTSR |= maskline;
00001e  4b20              LDR      r3,|L9.160|
000020  d005              BEQ      |L9.46|
000022  681c              LDR      r4,[r3,#0]
000024  4304              ORRS     r4,r4,r0
000026  601c              STR      r4,[r3,#0]
000028  e004              B        |L9.52|
                  |L9.42|
00002a  2001              MOVS     r0,#1                 ;152
;;;176        }
;;;177        else
;;;178        {
;;;179          EXTI->RTSR &= ~maskline;
;;;180        }
;;;181    
;;;182        /* Configure falling trigger */
;;;183        /* Mask or set line */
;;;184        if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
;;;185        {
;;;186          EXTI->FTSR |= maskline;
;;;187        }
;;;188        else
;;;189        {
;;;190          EXTI->FTSR &= ~maskline;
;;;191        }
;;;192    
;;;193    
;;;194        /* Configure gpio port selection in case of gpio exti line */
;;;195        if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
;;;196        {
;;;197          assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
;;;198          assert_param(IS_EXTI_GPIO_PIN(linepos));
;;;199          
;;;200          regval = AFIO->EXTICR[linepos >> 2u];
;;;201          regval &= ~(AFIO_EXTICR1_EXTI0 << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
;;;202          regval |= (pExtiConfig->GPIOSel << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
;;;203          AFIO->EXTICR[linepos >> 2u] = regval;
;;;204        }
;;;205      }
;;;206    
;;;207      /* Configure interrupt mode : read current mode */
;;;208      /* Mask or set line */
;;;209      if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
;;;210      {
;;;211        EXTI->IMR |= maskline;
;;;212      }
;;;213      else
;;;214      {
;;;215        EXTI->IMR &= ~maskline;
;;;216      }
;;;217    
;;;218      /* Configure event mode : read current mode */
;;;219      /* Mask or set line */
;;;220      if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
;;;221      {
;;;222        EXTI->EMR |= maskline;
;;;223      }
;;;224      else
;;;225      {
;;;226        EXTI->EMR &= ~maskline;
;;;227      }
;;;228    
;;;229      return HAL_OK;
;;;230    }
00002c  bd30              POP      {r4,r5,pc}
                  |L9.46|
00002e  681c              LDR      r4,[r3,#0]            ;179
000030  4384              BICS     r4,r4,r0              ;179
000032  601c              STR      r4,[r3,#0]            ;179
                  |L9.52|
000034  7a0b              LDRB     r3,[r1,#8]            ;184
000036  079c              LSLS     r4,r3,#30             ;184
000038  4b1a              LDR      r3,|L9.164|
00003a  d503              BPL      |L9.68|
00003c  681c              LDR      r4,[r3,#0]            ;186
00003e  4304              ORRS     r4,r4,r0              ;186
000040  601c              STR      r4,[r3,#0]            ;186
000042  e002              B        |L9.74|
                  |L9.68|
000044  681c              LDR      r4,[r3,#0]            ;190
000046  4384              BICS     r4,r4,r0              ;190
000048  601c              STR      r4,[r3,#0]            ;190
                  |L9.74|
00004a  680b              LDR      r3,[r1,#0]            ;195
00004c  f3c36341          UBFX     r3,r3,#25,#2          ;195
000050  2b03              CMP      r3,#3                 ;195
000052  d10d              BNE      |L9.112|
000054  4b14              LDR      r3,|L9.168|
000056  f0220403          BIC      r4,r2,#3              ;200
00005a  4423              ADD      r3,r3,r4              ;200
00005c  689c              LDR      r4,[r3,#8]            ;200
00005e  0792              LSLS     r2,r2,#30             ;201
000060  0f12              LSRS     r2,r2,#28             ;201
000062  250f              MOVS     r5,#0xf               ;201
000064  4095              LSLS     r5,r5,r2              ;201
000066  43ac              BICS     r4,r4,r5              ;201
000068  68cd              LDR      r5,[r1,#0xc]          ;202
00006a  4095              LSLS     r5,r5,r2              ;202
00006c  4325              ORRS     r5,r5,r4              ;202
00006e  609d              STR      r5,[r3,#8]            ;203
                  |L9.112|
000070  790a              LDRB     r2,[r1,#4]            ;209
000072  07d3              LSLS     r3,r2,#31             ;209
000074  4a0d              LDR      r2,|L9.172|
000076  d003              BEQ      |L9.128|
000078  6813              LDR      r3,[r2,#0]            ;211
00007a  4303              ORRS     r3,r3,r0              ;211
00007c  6013              STR      r3,[r2,#0]            ;211
00007e  e002              B        |L9.134|
                  |L9.128|
000080  6813              LDR      r3,[r2,#0]            ;215
000082  4383              BICS     r3,r3,r0              ;215
000084  6013              STR      r3,[r2,#0]            ;215
                  |L9.134|
000086  7909              LDRB     r1,[r1,#4]            ;220
000088  078a              LSLS     r2,r1,#30             ;220
00008a  4909              LDR      r1,|L9.176|
00008c  d503              BPL      |L9.150|
00008e  680a              LDR      r2,[r1,#0]            ;222
000090  4302              ORRS     r2,r2,r0              ;222
000092  600a              STR      r2,[r1,#0]            ;222
000094  e002              B        |L9.156|
                  |L9.150|
000096  680a              LDR      r2,[r1,#0]            ;226
000098  4382              BICS     r2,r2,r0              ;226
00009a  600a              STR      r2,[r1,#0]            ;226
                  |L9.156|
00009c  2000              MOVS     r0,#0                 ;229
00009e  bd30              POP      {r4,r5,pc}
;;;231    
                          ENDP

                  |L9.160|
                          DCD      0x40010408
                  |L9.164|
                          DCD      0x4001040c
                  |L9.168|
                          DCD      0x40010000
                  |L9.172|
                          DCD      0x40010400
                  |L9.176|
                          DCD      0x40010404

;*** Start embedded assembler ***

#line 1 "..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_exti.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_exti_c_ad9bfa1e____REV16|
#line 463 "..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f1xx_hal_exti_c_ad9bfa1e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_exti_c_ad9bfa1e____REVSH|
#line 478
|__asm___20_stm32f1xx_hal_exti_c_ad9bfa1e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_exti_c_ad9bfa1e____RRX|
#line 665
|__asm___20_stm32f1xx_hal_exti_c_ad9bfa1e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
