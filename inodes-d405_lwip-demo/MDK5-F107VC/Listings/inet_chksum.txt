; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\inet_chksum.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\inet_chksum.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device -I..\Drivers\CMSIS\Include -I..\Middlewares\Third_Party\LwIP\src\include\lwip\apps -I..\Middlewares\Third_Party\LwIP\src\include\lwip\priv -I..\Middlewares\Third_Party\LwIP\src\include\lwip\prot -I..\Middlewares\Third_Party\LwIP\src\include\netif\ppp -I..\Middlewares\Third_Party\LwIP\src\include\netif -I..\Middlewares\Third_Party\LwIP\src\include\posix\sys -I..\Middlewares\Third_Party\LwIP\src\include\posix -I..\Middlewares\Third_Party\LwIP\system\arch -I..\Middlewares\Third_Party\LwIP\src\include\lwip -I..\Inc -I..\Middlewares\Third_Party\LwIP\src\include -I.\RTE\_f107vc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_CL -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F107xC --omf_browse=.\objects\inet_chksum.crf ..\Middlewares\Third_Party\LwIP\src\core\inet_chksum.c]
                          THUMB

                          AREA ||i.inet_chksum||, CODE, READONLY, ALIGN=1

                  inet_chksum PROC
;;;554    u16_t
;;;555    inet_chksum(const void *dataptr, u16_t len)
000000  b500              PUSH     {lr}
;;;556    {
;;;557      return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
000002  f7fffffe          BL       lwip_standard_chksum
000006  43c0              MVNS     r0,r0
000008  b280              UXTH     r0,r0
;;;558    }
00000a  bd00              POP      {pc}
;;;559    
                          ENDP


                          AREA ||i.inet_chksum_pbuf||, CODE, READONLY, ALIGN=1

                  inet_chksum_pbuf PROC
;;;567    u16_t
;;;568    inet_chksum_pbuf(struct pbuf *p)
000000  b570              PUSH     {r4-r6,lr}
;;;569    {
000002  4605              MOV      r5,r0
;;;570      u32_t acc;
;;;571      struct pbuf *q;
;;;572      u8_t swapped;
;;;573    
;;;574      acc = 0;
000004  2400              MOVS     r4,#0
;;;575      swapped = 0;
000006  2600              MOVS     r6,#0
000008  e013              B        |L2.50|
                  |L2.10|
;;;576      for (q = p; q != NULL; q = q->next) {
;;;577        acc += LWIP_CHKSUM(q->payload, q->len);
00000a  8969              LDRH     r1,[r5,#0xa]
00000c  6868              LDR      r0,[r5,#4]
00000e  f7fffffe          BL       lwip_standard_chksum
000012  4420              ADD      r0,r0,r4
;;;578        acc = FOLD_U32T(acc);
000014  b281              UXTH     r1,r0
000016  eb014410          ADD      r4,r1,r0,LSR #16
;;;579        if (q->len % 2 != 0) {
00001a  7aa8              LDRB     r0,[r5,#0xa]
00001c  07c0              LSLS     r0,r0,#31
00001e  d007              BEQ      |L2.48|
;;;580          swapped = 1 - swapped;
000020  f1c60001          RSB      r0,r6,#1
000024  b2c6              UXTB     r6,r0
;;;581          acc = SWAP_BYTES_IN_WORD(acc);
000026  b2e0              UXTB     r0,r4
000028  f3c42107          UBFX     r1,r4,#8,#8
00002c  ea412400          ORR      r4,r1,r0,LSL #8
                  |L2.48|
000030  682d              LDR      r5,[r5,#0]            ;576
                  |L2.50|
000032  2d00              CMP      r5,#0                 ;576
000034  d1e9              BNE      |L2.10|
;;;582        }
;;;583      }
;;;584    
;;;585      if (swapped) {
000036  b126              CBZ      r6,|L2.66|
;;;586        acc = SWAP_BYTES_IN_WORD(acc);
000038  b2e0              UXTB     r0,r4
00003a  f3c42107          UBFX     r1,r4,#8,#8
00003e  ea412400          ORR      r4,r1,r0,LSL #8
                  |L2.66|
;;;587      }
;;;588      return (u16_t)~(acc & 0xffffUL);
000042  43e0              MVNS     r0,r4
000044  b280              UXTH     r0,r0
;;;589    }
000046  bd70              POP      {r4-r6,pc}
;;;590    
                          ENDP


                          AREA ||i.inet_chksum_pseudo||, CODE, READONLY, ALIGN=1

                  inet_chksum_pseudo PROC
;;;309    u16_t
;;;310    inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
000000  b430              PUSH     {r4,r5}
;;;311           const ip4_addr_t *src, const ip4_addr_t *dest)
;;;312    {
000002  9d02              LDR      r5,[sp,#8]
;;;313      u32_t acc;
;;;314      u32_t addr;
;;;315    
;;;316      addr = ip4_addr_get_u32(src);
000004  681b              LDR      r3,[r3,#0]
;;;317      acc = (addr & 0xffffUL);
000006  b29c              UXTH     r4,r3
;;;318      acc += ((addr >> 16) & 0xffffUL);
000008  eb044413          ADD      r4,r4,r3,LSR #16
;;;319      addr = ip4_addr_get_u32(dest);
00000c  682b              LDR      r3,[r5,#0]
;;;320      acc += (addr & 0xffffUL);
00000e  b29d              UXTH     r5,r3
000010  442c              ADD      r4,r4,r5
;;;321      acc += ((addr >> 16) & 0xffffUL);
000012  eb044313          ADD      r3,r4,r3,LSR #16
;;;322      /* fold down to 16 bits */
;;;323      acc = FOLD_U32T(acc);
000016  b29c              UXTH     r4,r3
000018  eb044313          ADD      r3,r4,r3,LSR #16
;;;324      acc = FOLD_U32T(acc);
00001c  b29c              UXTH     r4,r3
00001e  eb044313          ADD      r3,r4,r3,LSR #16
;;;325    
;;;326      return inet_cksum_pseudo_base(p, proto, proto_len, acc);
000022  bc30              POP      {r4,r5}
000024  f7ffbffe          B.W      inet_cksum_pseudo_base
;;;327    }
;;;328    #endif /* LWIP_IPV4 */
                          ENDP


                          AREA ||i.inet_chksum_pseudo_partial||, CODE, READONLY, ALIGN=1

                  inet_chksum_pseudo_partial PROC
;;;455    u16_t
;;;456    inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
000000  b5f8              PUSH     {r3-r7,lr}
;;;457           u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
;;;458    {
000002  e9dd4606          LDRD     r4,r6,[sp,#0x18]
;;;459      u32_t acc;
;;;460      u32_t addr;
;;;461    
;;;462      addr = ip4_addr_get_u32(src);
000006  6824              LDR      r4,[r4,#0]
;;;463      acc = (addr & 0xffffUL);
000008  b2a5              UXTH     r5,r4
;;;464      acc += ((addr >> 16) & 0xffffUL);
00000a  eb054514          ADD      r5,r5,r4,LSR #16
;;;465      addr = ip4_addr_get_u32(dest);
00000e  6834              LDR      r4,[r6,#0]
;;;466      acc += (addr & 0xffffUL);
000010  b2a6              UXTH     r6,r4
000012  4435              ADD      r5,r5,r6
;;;467      acc += ((addr >> 16) & 0xffffUL);
000014  eb054414          ADD      r4,r5,r4,LSR #16
;;;468      /* fold down to 16 bits */
;;;469      acc = FOLD_U32T(acc);
000018  b2a5              UXTH     r5,r4
00001a  eb054414          ADD      r4,r5,r4,LSR #16
;;;470      acc = FOLD_U32T(acc);
00001e  b2a5              UXTH     r5,r4
000020  eb054414          ADD      r4,r5,r4,LSR #16
;;;471    
;;;472      return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
000024  9400              STR      r4,[sp,#0]
000026  f7fffffe          BL       inet_cksum_pseudo_partial_base
;;;473    }
00002a  bdf8              POP      {r3-r7,pc}
;;;474    #endif /* LWIP_IPV4 */
                          ENDP


                          AREA ||i.inet_cksum_pseudo_base||, CODE, READONLY, ALIGN=1

                  inet_cksum_pseudo_base PROC
;;;259    static u16_t
;;;260    inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;261    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
;;;262      struct pbuf *q;
;;;263      u8_t swapped = 0;
00000c  2600              MOVS     r6,#0
00000e  e013              B        |L5.56|
                  |L5.16|
;;;264    
;;;265      /* iterate through all pbuf in chain */
;;;266      for (q = p; q != NULL; q = q->next) {
;;;267        LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
;;;268          (void *)q, (void *)q->next));
;;;269        acc += LWIP_CHKSUM(q->payload, q->len);
000010  8969              LDRH     r1,[r5,#0xa]
000012  6868              LDR      r0,[r5,#4]
000014  f7fffffe          BL       lwip_standard_chksum
000018  4420              ADD      r0,r0,r4
;;;270        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;271        /* just executing this next line is probably faster that the if statement needed
;;;272           to check whether we really need to execute it, and does no harm */
;;;273        acc = FOLD_U32T(acc);
00001a  b281              UXTH     r1,r0
00001c  eb014410          ADD      r4,r1,r0,LSR #16
;;;274        if (q->len % 2 != 0) {
000020  7aa8              LDRB     r0,[r5,#0xa]
000022  07c0              LSLS     r0,r0,#31
000024  d007              BEQ      |L5.54|
;;;275          swapped = 1 - swapped;
000026  f1c60001          RSB      r0,r6,#1
00002a  b2c6              UXTB     r6,r0
;;;276          acc = SWAP_BYTES_IN_WORD(acc);
00002c  b2e0              UXTB     r0,r4
00002e  f3c42107          UBFX     r1,r4,#8,#8
000032  ea412400          ORR      r4,r1,r0,LSL #8
                  |L5.54|
000036  682d              LDR      r5,[r5,#0]            ;266
                  |L5.56|
000038  2d00              CMP      r5,#0                 ;266
00003a  d1e9              BNE      |L5.16|
;;;277        }
;;;278        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;279      }
;;;280    
;;;281      if (swapped) {
00003c  b126              CBZ      r6,|L5.72|
;;;282        acc = SWAP_BYTES_IN_WORD(acc);
00003e  b2e0              UXTB     r0,r4
000040  f3c42107          UBFX     r1,r4,#8,#8
000044  ea412400          ORR      r4,r1,r0,LSL #8
                  |L5.72|
;;;283      }
;;;284    
;;;285      acc += (u32_t)lwip_htons((u16_t)proto);
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       lwip_htons
00004e  4404              ADD      r4,r4,r0
;;;286      acc += (u32_t)lwip_htons(proto_len);
000050  4640              MOV      r0,r8
000052  f7fffffe          BL       lwip_htons
000056  4420              ADD      r0,r0,r4
;;;287    
;;;288      /* Fold 32-bit sum to 16 bits
;;;289         calling this twice is probably faster than if statements... */
;;;290      acc = FOLD_U32T(acc);
000058  b281              UXTH     r1,r0
00005a  eb014010          ADD      r0,r1,r0,LSR #16
;;;291      acc = FOLD_U32T(acc);
00005e  eb004010          ADD      r0,r0,r0,LSR #16
;;;292      LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
;;;293      return (u16_t)~(acc & 0xffffUL);
000062  43c0              MVNS     r0,r0
000064  b280              UXTH     r0,r0
;;;294    }
000066  e8bd81f0          POP      {r4-r8,pc}
;;;295    
                          ENDP


                          AREA ||i.inet_cksum_pseudo_partial_base||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  inet_cksum_pseudo_partial_base PROC
;;;398    static u16_t
;;;399    inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;400           u16_t chksum_len, u32_t acc)
;;;401    {
000004  9c08              LDR      r4,[sp,#0x20]
000006  4605              MOV      r5,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  461e              MOV      r6,r3
;;;402      struct pbuf *q;
;;;403      u8_t swapped = 0;
00000e  f04f0800          MOV      r8,#0
000012  e025              B        |L6.96|
                  |L6.20|
;;;404      u16_t chklen;
;;;405    
;;;406      /* iterate through all pbuf in chain */
;;;407      for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
;;;408        LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
;;;409          (void *)q, (void *)q->next));
;;;410        chklen = q->len;
000014  896f              LDRH     r7,[r5,#0xa]
;;;411        if (chklen > chksum_len) {
000016  42b7              CMP      r7,r6
000018  d900              BLS      |L6.28|
;;;412          chklen = chksum_len;
00001a  4637              MOV      r7,r6
                  |L6.28|
;;;413        }
;;;414        acc += LWIP_CHKSUM(q->payload, chklen);
00001c  4639              MOV      r1,r7
00001e  6868              LDR      r0,[r5,#4]
000020  f7fffffe          BL       lwip_standard_chksum
000024  4404              ADD      r4,r4,r0
;;;415        chksum_len -= chklen;
000026  1bf0              SUBS     r0,r6,r7
000028  b286              UXTH     r6,r0
;;;416        LWIP_ASSERT("delete me", chksum_len < 0x7fff);
00002a  f64770ff          MOV      r0,#0x7fff
00002e  4286              CMP      r6,r0
000030  d306              BCC      |L6.64|
000032  a319              ADR      r3,|L6.152|
000034  f44f72d0          MOV      r2,#0x1a0
000038  a125              ADR      r1,|L6.208|
00003a  a028              ADR      r0,|L6.220|
00003c  f7fffffe          BL       __2printf
                  |L6.64|
;;;417        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;418        /* fold the upper bit down */
;;;419        acc = FOLD_U32T(acc);
000040  b2a0              UXTH     r0,r4
000042  eb004414          ADD      r4,r0,r4,LSR #16
;;;420        if (q->len % 2 != 0) {
000046  7aa8              LDRB     r0,[r5,#0xa]
000048  07c0              LSLS     r0,r0,#31
00004a  d008              BEQ      |L6.94|
;;;421          swapped = 1 - swapped;
00004c  f1c80001          RSB      r0,r8,#1
000050  f00008ff          AND      r8,r0,#0xff
;;;422          acc = SWAP_BYTES_IN_WORD(acc);
000054  b2e0              UXTB     r0,r4
000056  f3c42107          UBFX     r1,r4,#8,#8
00005a  ea412400          ORR      r4,r1,r0,LSL #8
                  |L6.94|
00005e  682d              LDR      r5,[r5,#0]            ;407
                  |L6.96|
000060  b10d              CBZ      r5,|L6.102|
000062  2e00              CMP      r6,#0                 ;407
000064  d1d6              BNE      |L6.20|
                  |L6.102|
;;;423        }
;;;424        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;425      }
;;;426    
;;;427      if (swapped) {
000066  f1b80f00          CMP      r8,#0
00006a  d004              BEQ      |L6.118|
;;;428        acc = SWAP_BYTES_IN_WORD(acc);
00006c  b2e0              UXTB     r0,r4
00006e  f3c42107          UBFX     r1,r4,#8,#8
000072  ea412400          ORR      r4,r1,r0,LSL #8
                  |L6.118|
;;;429      }
;;;430    
;;;431      acc += (u32_t)lwip_htons((u16_t)proto);
000076  4648              MOV      r0,r9
000078  f7fffffe          BL       lwip_htons
00007c  4404              ADD      r4,r4,r0
;;;432      acc += (u32_t)lwip_htons(proto_len);
00007e  4650              MOV      r0,r10
000080  f7fffffe          BL       lwip_htons
000084  4420              ADD      r0,r0,r4
;;;433    
;;;434      /* Fold 32-bit sum to 16 bits
;;;435         calling this twice is probably faster than if statements... */
;;;436      acc = FOLD_U32T(acc);
000086  b281              UXTH     r1,r0
000088  eb014010          ADD      r0,r1,r0,LSR #16
;;;437      acc = FOLD_U32T(acc);
00008c  eb004010          ADD      r0,r0,r0,LSR #16
;;;438      LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
;;;439      return (u16_t)~(acc & 0xffffUL);
000090  43c0              MVNS     r0,r0
000092  b280              UXTH     r0,r0
;;;440    }
000094  e8bd87f0          POP      {r4-r10,pc}
;;;441    
                          ENDP

                  |L6.152|
000098  2e2e5c4d          DCB      "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\inet_chk"
00009c  6964646c
0000a0  65776172
0000a4  65735c54
0000a8  68697264
0000ac  5f506172
0000b0  74795c4c
0000b4  7749505c
0000b8  7372635c
0000bc  636f7265
0000c0  5c696e65
0000c4  745f6368
0000c8  6b      
0000c9  73756d2e          DCB      "sum.c",0
0000cd  6300    
0000cf  00                DCB      0
                  |L6.208|
0000d0  64656c65          DCB      "delete me",0
0000d4  7465206d
0000d8  6500    
0000da  00                DCB      0
0000db  00                DCB      0
                  |L6.220|
0000dc  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000e0  7274696f
0000e4  6e202225
0000e8  73222066
0000ec  61696c65
0000f0  64206174
0000f4  206c696e
0000f8  65202564
0000fc  20696e20
000100  25730a00

                          AREA ||i.ip_chksum_pseudo||, CODE, READONLY, ALIGN=1

                  ip_chksum_pseudo PROC
;;;378    u16_t
;;;379    ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
000000  b538              PUSH     {r3-r5,lr}
;;;380           const ip_addr_t *src, const ip_addr_t *dest)
;;;381    {
000002  9c04              LDR      r4,[sp,#0x10]
;;;382    #if LWIP_IPV6
;;;383      if (IP_IS_V6(dest)) {
;;;384        return ip6_chksum_pseudo(p, proto, proto_len, ip_2_ip6(src), ip_2_ip6(dest));
;;;385      }
;;;386    #endif /* LWIP_IPV6 */
;;;387    #if LWIP_IPV4 && LWIP_IPV6
;;;388      else
;;;389    #endif /* LWIP_IPV4 && LWIP_IPV6 */
;;;390    #if LWIP_IPV4
;;;391      {
;;;392        return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
000004  9400              STR      r4,[sp,#0]
000006  f7fffffe          BL       inet_chksum_pseudo
;;;393      }
;;;394    #endif /* LWIP_IPV4 */
;;;395    }
00000a  bd38              POP      {r3-r5,pc}
;;;396    
                          ENDP


                          AREA ||i.ip_chksum_pseudo_partial||, CODE, READONLY, ALIGN=1

                  ip_chksum_pseudo_partial PROC
;;;525    u16_t
;;;526    ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
000000  b57c              PUSH     {r2-r6,lr}
;;;527           u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
;;;528    {
000002  e9dd5406          LDRD     r5,r4,[sp,#0x18]
;;;529    #if LWIP_IPV6
;;;530      if (IP_IS_V6(dest)) {
;;;531        return ip6_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip6(src), ip_2_ip6(dest));
;;;532      }
;;;533    #endif /* LWIP_IPV6 */
;;;534    #if LWIP_IPV4 && LWIP_IPV6
;;;535      else
;;;536    #endif /* LWIP_IPV4 && LWIP_IPV6 */
;;;537    #if LWIP_IPV4
;;;538      {
;;;539        return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest));
000006  e9cd5400          STRD     r5,r4,[sp,#0]
00000a  f7fffffe          BL       inet_chksum_pseudo_partial
;;;540      }
;;;541    #endif /* LWIP_IPV4 */
;;;542    }
00000e  bd7c              POP      {r2-r6,pc}
;;;543    
                          ENDP


                          AREA ||i.lwip_standard_chksum||, CODE, READONLY, ALIGN=1

                  lwip_standard_chksum PROC
;;;132    u16_t
;;;133    lwip_standard_chksum(const void *dataptr, int len)
000000  b518              PUSH     {r3,r4,lr}
;;;134    {
;;;135      const u8_t *pb = (const u8_t *)dataptr;
;;;136      const u16_t *ps;
;;;137      u16_t t = 0;
000002  2200              MOVS     r2,#0
000004  9200              STR      r2,[sp,#0]
;;;138      u32_t sum = 0;
;;;139      int odd = ((mem_ptr_t)pb & 1);
000006  f0000301          AND      r3,r0,#1
;;;140    
;;;141      /* Get aligned to u16_t */
;;;142      if (odd && len > 0) {
00000a  2b00              CMP      r3,#0
00000c  d00b              BEQ      |L9.38|
00000e  2900              CMP      r1,#0
000010  dd09              BLE      |L9.38|
;;;143        ((u8_t *)&t)[1] = *pb++;
000012  f8104b01          LDRB     r4,[r0],#1
000016  f88d4001          STRB     r4,[sp,#1]
;;;144        len--;
00001a  1e49              SUBS     r1,r1,#1
00001c  e003              B        |L9.38|
                  |L9.30|
;;;145      }
;;;146    
;;;147      /* Add the bulk of the data */
;;;148      ps = (const u16_t *)(const void *)pb;
;;;149      while (len > 1) {
;;;150        sum += *ps++;
00001e  f8304b02          LDRH     r4,[r0],#2
000022  4422              ADD      r2,r2,r4
;;;151        len -= 2;
000024  1e89              SUBS     r1,r1,#2
                  |L9.38|
000026  2901              CMP      r1,#1                 ;149
000028  dcf9              BGT      |L9.30|
;;;152      }
;;;153    
;;;154      /* Consume left-over byte, if any */
;;;155      if (len > 0) {
00002a  2900              CMP      r1,#0
00002c  dd02              BLE      |L9.52|
;;;156        ((u8_t *)&t)[0] = *(const u8_t *)ps;
00002e  7800              LDRB     r0,[r0,#0]
000030  f88d0000          STRB     r0,[sp,#0]
                  |L9.52|
;;;157      }
;;;158    
;;;159      /* Add end bytes */
;;;160      sum += t;
000034  f8bd0000          LDRH     r0,[sp,#0]
000038  4410              ADD      r0,r0,r2
;;;161    
;;;162      /* Fold 32-bit sum to 16 bits
;;;163         calling this twice is probably faster than if statements... */
;;;164      sum = FOLD_U32T(sum);
00003a  b281              UXTH     r1,r0
00003c  eb014010          ADD      r0,r1,r0,LSR #16
;;;165      sum = FOLD_U32T(sum);
000040  b281              UXTH     r1,r0
000042  eb014010          ADD      r0,r1,r0,LSR #16
;;;166    
;;;167      /* Swap if alignment was odd */
;;;168      if (odd) {
000046  b123              CBZ      r3,|L9.82|
;;;169        sum = SWAP_BYTES_IN_WORD(sum);
000048  b2c1              UXTB     r1,r0
00004a  f3c02007          UBFX     r0,r0,#8,#8
00004e  ea402001          ORR      r0,r0,r1,LSL #8
                  |L9.82|
;;;170      }
;;;171    
;;;172      return (u16_t)sum;
000052  b280              UXTH     r0,r0
;;;173    }
000054  bd18              POP      {r3,r4,pc}
;;;174    #endif
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Middlewares\\Third_Party\\LwIP\\src\\core\\inet_chksum.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_inet_chksum_c_7784dc4d____REV16|
#line 463 "..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_inet_chksum_c_7784dc4d____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_inet_chksum_c_7784dc4d____REVSH|
#line 478
|__asm___13_inet_chksum_c_7784dc4d____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_inet_chksum_c_7784dc4d____RRX|
#line 665
|__asm___13_inet_chksum_c_7784dc4d____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
