; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\stm32f1xx_hal_dma.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_dma.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\CMSIS\Device -I..\Drivers\CMSIS\Include -I..\Middlewares\Third_Party\LwIP\src\include -I..\Middlewares\Third_Party\LwIP\system -I..\Middlewares\Third_Party\LwIP\src\include\netif\ppp -I..\Middlewares\Third_Party\LwIP\src\include\lwip -I..\Middlewares\Third_Party\LwIP\src\include\lwip\apps -I..\Middlewares\Third_Party\LwIP\src\include\lwip\priv -I..\Middlewares\Third_Party\LwIP\src\include\lwip\prot -I..\Middlewares\Third_Party\LwIP\src\include\netif -I..\Middlewares\Third_Party\LwIP\src\include\posix -I..\Middlewares\Third_Party\LwIP\src\include\posix\sys -I..\Middlewares\Third_Party\LwIP\system\arch -I..\App -I..\Middlewares\Third_Party\LwIP\system -I.\RTE\_f107vc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_CL -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F107xC --omf_browse=.\objects\stm32f1xx_hal_dma.crf ..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c]
                          THUMB

                          AREA ||i.DMA_SetConfig||, CODE, READONLY, ALIGN=1

                  DMA_SetConfig PROC
;;;857      */
;;;858    static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b530              PUSH     {r4,r5,lr}
;;;859    {
;;;860      /* Clear all flags */
;;;861      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
000002  f8905040          LDRB     r5,[r0,#0x40]
000006  2401              MOVS     r4,#1
000008  40ac              LSLS     r4,r4,r5
00000a  6bc5              LDR      r5,[r0,#0x3c]
00000c  606c              STR      r4,[r5,#4]
;;;862    
;;;863      /* Configure DMA Channel data length */
;;;864      hdma->Instance->CNDTR = DataLength;
00000e  6804              LDR      r4,[r0,#0]
000010  6063              STR      r3,[r4,#4]
;;;865    
;;;866      /* Memory to Peripheral */
;;;867      if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
000012  6843              LDR      r3,[r0,#4]
000014  2b10              CMP      r3,#0x10
000016  d004              BEQ      |L1.34|
;;;868      {
;;;869        /* Configure DMA Channel destination address */
;;;870        hdma->Instance->CPAR = DstAddress;
;;;871    
;;;872        /* Configure DMA Channel source address */
;;;873        hdma->Instance->CMAR = SrcAddress;
;;;874      }
;;;875      /* Peripheral to Memory */
;;;876      else
;;;877      {
;;;878        /* Configure DMA Channel source address */
;;;879        hdma->Instance->CPAR = SrcAddress;
000018  6803              LDR      r3,[r0,#0]
00001a  6099              STR      r1,[r3,#8]
;;;880    
;;;881        /* Configure DMA Channel destination address */
;;;882        hdma->Instance->CMAR = DstAddress;
00001c  6800              LDR      r0,[r0,#0]
00001e  60c2              STR      r2,[r0,#0xc]
;;;883      }
;;;884    }
000020  bd30              POP      {r4,r5,pc}
                  |L1.34|
000022  6803              LDR      r3,[r0,#0]            ;870
000024  609a              STR      r2,[r3,#8]            ;870
000026  6800              LDR      r0,[r0,#0]            ;873
000028  60c1              STR      r1,[r0,#0xc]          ;873
00002a  bd30              POP      {r4,r5,pc}
;;;885    
                          ENDP


                          AREA ||i.HAL_DMA_Abort||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort PROC
;;;415      */
;;;416    HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;417    {
;;;418      HAL_StatusTypeDef status = HAL_OK;
;;;419      
;;;420      if(hdma->State != HAL_DMA_STATE_BUSY)
000002  f8901021          LDRB     r1,[r0,#0x21]
000006  2200              MOVS     r2,#0
000008  2902              CMP      r1,#2
00000a  d005              BEQ      |L2.24|
;;;421      {
;;;422        /* no transfer ongoing */
;;;423        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00000c  2104              MOVS     r1,#4
00000e  6381              STR      r1,[r0,#0x38]
;;;424        
;;;425        /* Process Unlocked */
;;;426        __HAL_UNLOCK(hdma);
000010  f8802020          STRB     r2,[r0,#0x20]
;;;427        
;;;428        return HAL_ERROR;
000014  2001              MOVS     r0,#1
;;;429      }
;;;430      else
;;;431    
;;;432      {
;;;433        /* Disable DMA IT */
;;;434        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
;;;435          
;;;436        /* Disable the channel */
;;;437        __HAL_DMA_DISABLE(hdma);
;;;438          
;;;439        /* Clear all flags */
;;;440        hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
;;;441      }
;;;442      /* Change the DMA state */
;;;443      hdma->State = HAL_DMA_STATE_READY;
;;;444    
;;;445      /* Process Unlocked */
;;;446      __HAL_UNLOCK(hdma);      
;;;447      
;;;448      return status; 
;;;449    }
000016  bd10              POP      {r4,pc}
                  |L2.24|
000018  6801              LDR      r1,[r0,#0]            ;434
00001a  680b              LDR      r3,[r1,#0]            ;434
00001c  f023030e          BIC      r3,r3,#0xe            ;434
000020  600b              STR      r3,[r1,#0]            ;434
000022  6801              LDR      r1,[r0,#0]            ;437
000024  680b              LDR      r3,[r1,#0]            ;437
000026  f0230301          BIC      r3,r3,#1              ;437
00002a  600b              STR      r3,[r1,#0]            ;437
00002c  f8903040          LDRB     r3,[r0,#0x40]         ;440
000030  6bc4              LDR      r4,[r0,#0x3c]         ;440
000032  2101              MOVS     r1,#1                 ;440
000034  fa01f303          LSL      r3,r1,r3              ;440
000038  6063              STR      r3,[r4,#4]            ;440
00003a  f8801021          STRB     r1,[r0,#0x21]         ;443
00003e  f8802020          STRB     r2,[r0,#0x20]         ;446
000042  4610              MOV      r0,r2                 ;448
000044  bd10              POP      {r4,pc}
;;;450    
                          ENDP


                          AREA ||i.HAL_DMA_Abort_IT||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Abort_IT PROC
;;;456      */
;;;457    HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;458    {  
;;;459      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;460      
;;;461      if(HAL_DMA_STATE_BUSY != hdma->State)
000006  f8901021          LDRB     r1,[r0,#0x21]
00000a  2902              CMP      r1,#2
00000c  d003              BEQ      |L3.22|
;;;462      {
;;;463        /* no transfer ongoing */
;;;464        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00000e  2104              MOVS     r1,#4
000010  6381              STR      r1,[r0,#0x38]
;;;465            
;;;466        status = HAL_ERROR;
000012  2501              MOVS     r5,#1
000014  e095              B        |L3.322|
                  |L3.22|
;;;467      }
;;;468      else
;;;469      { 
;;;470        /* Disable DMA IT */
;;;471        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
000016  6801              LDR      r1,[r0,#0]
000018  680a              LDR      r2,[r1,#0]
00001a  f022020e          BIC      r2,r2,#0xe
00001e  600a              STR      r2,[r1,#0]
;;;472    
;;;473        /* Disable the channel */
;;;474        __HAL_DMA_DISABLE(hdma);
000020  6801              LDR      r1,[r0,#0]
000022  680a              LDR      r2,[r1,#0]
000024  f0220201          BIC      r2,r2,#1
000028  600a              STR      r2,[r1,#0]
;;;475    
;;;476        /* Clear all flags */
;;;477        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
00002a  4e47              LDR      r6,|L3.328|
00002c  4f46              LDR      r7,|L3.328|
00002e  15b2              ASRS     r2,r6,#22
000030  f8dfc114          LDR      r12,|L3.328|
000034  f8df8110          LDR      r8,|L3.328|
000038  f8df910c          LDR      r9,|L3.328|
00003c  f8dfa108          LDR      r10,|L3.328|
000040  f8dfb104          LDR      r11,|L3.328|
000044  6801              LDR      r1,[r0,#0]
000046  3f78              SUBS     r7,r7,#0x78
000048  0113              LSLS     r3,r2,#4
00004a  0214              LSLS     r4,r2,#8
00004c  f1ac0c64          SUB      r12,r12,#0x64
000050  f1a80850          SUB      r8,r8,#0x50
000054  f1a9093c          SUB      r9,r9,#0x3c
000058  f1aa0a28          SUB      r10,r10,#0x28
00005c  f1ab0b14          SUB      r11,r11,#0x14
000060  f44f1e80          MOV      lr,#0x100000
000064  42b1              CMP      r1,r6
000066  d92f              BLS      |L3.200|
000068  42b9              CMP      r1,r7
00006a  d101              BNE      |L3.112|
00006c  2201              MOVS     r2,#1
00006e  e027              B        |L3.192|
                  |L3.112|
000070  4561              CMP      r1,r12
000072  d101              BNE      |L3.120|
000074  2210              MOVS     r2,#0x10
000076  e023              B        |L3.192|
                  |L3.120|
000078  4541              CMP      r1,r8
00007a  d021              BEQ      |L3.192|
00007c  4549              CMP      r1,r9
00007e  d101              BNE      |L3.132|
000080  461a              MOV      r2,r3
000082  e01d              B        |L3.192|
                  |L3.132|
000084  4551              CMP      r1,r10
000086  d101              BNE      |L3.140|
000088  4622              MOV      r2,r4
00008a  e019              B        |L3.192|
                  |L3.140|
00008c  4559              CMP      r1,r11
00008e  d101              BNE      |L3.148|
000090  4672              MOV      r2,lr
000092  e015              B        |L3.192|
                  |L3.148|
000094  4e2d              LDR      r6,|L3.332|
000096  42b1              CMP      r1,r6
000098  d101              BNE      |L3.158|
00009a  2201              MOVS     r2,#1
00009c  e010              B        |L3.192|
                  |L3.158|
00009e  4e2b              LDR      r6,|L3.332|
0000a0  3614              ADDS     r6,r6,#0x14
0000a2  42b1              CMP      r1,r6
0000a4  d101              BNE      |L3.170|
0000a6  2210              MOVS     r2,#0x10
0000a8  e00a              B        |L3.192|
                  |L3.170|
0000aa  4e28              LDR      r6,|L3.332|
0000ac  3628              ADDS     r6,r6,#0x28
0000ae  42b1              CMP      r1,r6
0000b0  d006              BEQ      |L3.192|
0000b2  4a26              LDR      r2,|L3.332|
0000b4  323c              ADDS     r2,r2,#0x3c
0000b6  4291              CMP      r1,r2
0000b8  d101              BNE      |L3.190|
0000ba  461a              MOV      r2,r3
0000bc  e000              B        |L3.192|
                  |L3.190|
0000be  4622              MOV      r2,r4
                  |L3.192|
0000c0  4922              LDR      r1,|L3.332|
0000c2  1f09              SUBS     r1,r1,#4
0000c4  600a              STR      r2,[r1,#0]
0000c6  e033              B        |L3.304|
                  |L3.200|
0000c8  42b9              CMP      r1,r7
0000ca  d101              BNE      |L3.208|
0000cc  2201              MOVS     r2,#1
0000ce  e02c              B        |L3.298|
                  |L3.208|
0000d0  4561              CMP      r1,r12
0000d2  d101              BNE      |L3.216|
0000d4  2210              MOVS     r2,#0x10
0000d6  e028              B        |L3.298|
                  |L3.216|
0000d8  4541              CMP      r1,r8
0000da  d026              BEQ      |L3.298|
0000dc  4549              CMP      r1,r9
0000de  d101              BNE      |L3.228|
0000e0  461a              MOV      r2,r3
0000e2  e022              B        |L3.298|
                  |L3.228|
0000e4  4551              CMP      r1,r10
0000e6  d101              BNE      |L3.236|
0000e8  4622              MOV      r2,r4
0000ea  e01e              B        |L3.298|
                  |L3.236|
0000ec  4559              CMP      r1,r11
0000ee  d101              BNE      |L3.244|
0000f0  4672              MOV      r2,lr
0000f2  e01a              B        |L3.298|
                  |L3.244|
0000f4  42b1              CMP      r1,r6
0000f6  d102              BNE      |L3.254|
0000f8  f04f7280          MOV      r2,#0x1000000
0000fc  e015              B        |L3.298|
                  |L3.254|
0000fe  4e13              LDR      r6,|L3.332|
000100  42b1              CMP      r1,r6
000102  d101              BNE      |L3.264|
000104  2201              MOVS     r2,#1
000106  e010              B        |L3.298|
                  |L3.264|
000108  4e10              LDR      r6,|L3.332|
00010a  3614              ADDS     r6,r6,#0x14
00010c  42b1              CMP      r1,r6
00010e  d101              BNE      |L3.276|
000110  2210              MOVS     r2,#0x10
000112  e00a              B        |L3.298|
                  |L3.276|
000114  4e0d              LDR      r6,|L3.332|
000116  3628              ADDS     r6,r6,#0x28
000118  42b1              CMP      r1,r6
00011a  d006              BEQ      |L3.298|
00011c  4a0b              LDR      r2,|L3.332|
00011e  323c              ADDS     r2,r2,#0x3c
000120  4291              CMP      r1,r2
000122  d101              BNE      |L3.296|
000124  461a              MOV      r2,r3
000126  e000              B        |L3.298|
                  |L3.296|
000128  4622              MOV      r2,r4
                  |L3.298|
00012a  4907              LDR      r1,|L3.328|
00012c  3980              SUBS     r1,r1,#0x80
00012e  604a              STR      r2,[r1,#4]
                  |L3.304|
;;;478    
;;;479        /* Change the DMA state */
;;;480        hdma->State = HAL_DMA_STATE_READY;
000130  2101              MOVS     r1,#1
000132  f8801021          STRB     r1,[r0,#0x21]
;;;481    
;;;482        /* Process Unlocked */
;;;483        __HAL_UNLOCK(hdma);
000136  2100              MOVS     r1,#0
000138  f8801020          STRB     r1,[r0,#0x20]
;;;484    
;;;485        /* Call User Abort callback */
;;;486        if(hdma->XferAbortCallback != NULL)
00013c  6b41              LDR      r1,[r0,#0x34]
00013e  b101              CBZ      r1,|L3.322|
;;;487        {
;;;488          hdma->XferAbortCallback(hdma);
000140  4788              BLX      r1
                  |L3.322|
;;;489        } 
;;;490      }
;;;491      return status;
000142  4628              MOV      r0,r5
;;;492    }
000144  e8bd9ff0          POP      {r4-r12,pc}
;;;493    
                          ENDP

                  |L3.328|
                          DCD      0x40020080
                  |L3.332|
                          DCD      0x40020408

                          AREA ||i.HAL_DMA_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DMA_DeInit PROC
;;;219      */
;;;220    HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;221    {
;;;222      /* Check the DMA handle allocation */
;;;223      if(hdma == NULL)
000002  2800              CMP      r0,#0
000004  d01b              BEQ      |L4.62|
;;;224      {
;;;225        return HAL_ERROR;
;;;226      }
;;;227    
;;;228      /* Check the parameters */
;;;229      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;230    
;;;231      /* Disable the selected DMA Channelx */
;;;232      __HAL_DMA_DISABLE(hdma);
000006  6801              LDR      r1,[r0,#0]
000008  680a              LDR      r2,[r1,#0]
00000a  f0220201          BIC      r2,r2,#1
00000e  600a              STR      r2,[r1,#0]
;;;233    
;;;234      /* Reset DMA Channel control register */
;;;235      hdma->Instance->CCR  = 0U;
000010  6802              LDR      r2,[r0,#0]
000012  2100              MOVS     r1,#0
000014  6011              STR      r1,[r2,#0]
;;;236    
;;;237      /* Reset DMA Channel Number of Data to Transfer register */
;;;238      hdma->Instance->CNDTR = 0U;
000016  6802              LDR      r2,[r0,#0]
000018  6051              STR      r1,[r2,#4]
;;;239    
;;;240      /* Reset DMA Channel peripheral address register */
;;;241      hdma->Instance->CPAR  = 0U;
00001a  6802              LDR      r2,[r0,#0]
00001c  6091              STR      r1,[r2,#8]
;;;242    
;;;243      /* Reset DMA Channel memory address register */
;;;244      hdma->Instance->CMAR = 0U;
00001e  6802              LDR      r2,[r0,#0]
000020  60d1              STR      r1,[r2,#0xc]
;;;245    
;;;246    #if defined (DMA2)
;;;247      /* calculation of the channel index */
;;;248      if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
000022  4c15              LDR      r4,|L4.120|
000024  6802              LDR      r2,[r0,#0]
;;;249      {
;;;250        /* DMA1 */
;;;251        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
000026  2314              MOVS     r3,#0x14
000028  42a2              CMP      r2,r4                 ;248
00002a  d20a              BCS      |L4.66|
00002c  4c13              LDR      r4,|L4.124|
00002e  4422              ADD      r2,r2,r4
000030  fbb2f2f3          UDIV     r2,r2,r3
000034  0092              LSLS     r2,r2,#2
000036  6402              STR      r2,[r0,#0x40]
;;;252        hdma->DmaBaseAddress = DMA1;
000038  4a11              LDR      r2,|L4.128|
00003a  63c2              STR      r2,[r0,#0x3c]
00003c  e00b              B        |L4.86|
                  |L4.62|
00003e  2001              MOVS     r0,#1                 ;225
;;;253      }
;;;254      else
;;;255      {
;;;256        /* DMA2 */
;;;257        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
;;;258        hdma->DmaBaseAddress = DMA2;
;;;259      }
;;;260    #else
;;;261      /* DMA1 */
;;;262      hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;263      hdma->DmaBaseAddress = DMA1;
;;;264    #endif /* DMA2 */
;;;265    
;;;266      /* Clear all flags */
;;;267      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
;;;268    
;;;269      /* Clean all callbacks */
;;;270      hdma->XferCpltCallback = NULL;
;;;271      hdma->XferHalfCpltCallback = NULL;
;;;272      hdma->XferErrorCallback = NULL;
;;;273      hdma->XferAbortCallback = NULL;
;;;274    
;;;275      /* Reset the error code */
;;;276      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;277    
;;;278      /* Reset the DMA state */
;;;279      hdma->State = HAL_DMA_STATE_RESET;
;;;280    
;;;281      /* Release Lock */
;;;282      __HAL_UNLOCK(hdma);
;;;283    
;;;284      return HAL_OK;
;;;285    }
000040  bd10              POP      {r4,pc}
                  |L4.66|
000042  4c0d              LDR      r4,|L4.120|
000044  4264              RSBS     r4,r4,#0              ;257
000046  4422              ADD      r2,r2,r4              ;257
000048  fbb2f2f3          UDIV     r2,r2,r3              ;257
00004c  0092              LSLS     r2,r2,#2              ;257
00004e  6402              STR      r2,[r0,#0x40]         ;257
000050  4a09              LDR      r2,|L4.120|
000052  3a08              SUBS     r2,r2,#8              ;258
000054  63c2              STR      r2,[r0,#0x3c]         ;258
                  |L4.86|
000056  3020              ADDS     r0,r0,#0x20           ;267
000058  2201              MOVS     r2,#1                 ;267
00005a  f8903020          LDRB     r3,[r0,#0x20]         ;267
00005e  409a              LSLS     r2,r2,r3              ;267
000060  69c3              LDR      r3,[r0,#0x1c]         ;267
000062  605a              STR      r2,[r3,#4]            ;267
000064  6081              STR      r1,[r0,#8]            ;270
000066  60c1              STR      r1,[r0,#0xc]          ;271
000068  6101              STR      r1,[r0,#0x10]         ;272
00006a  6141              STR      r1,[r0,#0x14]         ;273
00006c  6181              STR      r1,[r0,#0x18]         ;276
00006e  7041              STRB     r1,[r0,#1]            ;279
000070  7001              STRB     r1,[r0,#0]            ;282
000072  2000              MOVS     r0,#0                 ;284
000074  bd10              POP      {r4,pc}
;;;286    
                          ENDP

000076  0000              DCW      0x0000
                  |L4.120|
                          DCD      0x40020408
                  |L4.124|
                          DCD      0xbffdfff8
                  |L4.128|
                          DCD      0x40020000

                          AREA ||i.HAL_DMA_GetError||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetError PROC
;;;831      */
;;;832    uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
000000  6b80              LDR      r0,[r0,#0x38]
;;;833    {
;;;834      return hdma->ErrorCode;
;;;835    }
000002  4770              BX       lr
;;;836    
                          ENDP


                          AREA ||i.HAL_DMA_GetState||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetState PROC
;;;819      */
;;;820    HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
000000  f8900021          LDRB     r0,[r0,#0x21]
;;;821    {
;;;822      /* Return DMA handle state */
;;;823      return hdma->State;
;;;824    }
000004  4770              BX       lr
;;;825    
                          ENDP


                          AREA ||i.HAL_DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_DMA_IRQHandler PROC
;;;602      */
;;;603    void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;604    {
;;;605      uint32_t flag_it = hdma->DmaBaseAddress->ISR;
000004  6bc1              LDR      r1,[r0,#0x3c]
000006  680a              LDR      r2,[r1,#0]
;;;606      uint32_t source_it = hdma->Instance->CCR;
000008  6801              LDR      r1,[r0,#0]
00000a  680b              LDR      r3,[r1,#0]
;;;607      
;;;608      /* Half Transfer Complete Interrupt management ******************************/
;;;609      if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
00000c  6c04              LDR      r4,[r0,#0x40]
00000e  f04f0e04          MOV      lr,#4
000012  fa0efe04          LSL      lr,lr,r4
;;;610      {
;;;611        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;612        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
;;;613        {
;;;614          /* Disable the half transfer interrupt */
;;;615          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
;;;616        }
;;;617        /* Clear the half transfer complete flag */
;;;618        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
000016  4d9a              LDR      r5,|L7.640|
000018  4e9a              LDR      r6,|L7.644|
00001a  4f9b              LDR      r7,|L7.648|
00001c  f8dfc26c          LDR      r12,|L7.652|
000020  f8df826c          LDR      r8,|L7.656|
000024  f8df926c          LDR      r9,|L7.660|
000028  f8dfa26c          LDR      r10,|L7.664|
00002c  f8dfb26c          LDR      r11,|L7.668|
000030  ea1e0f02          TST      lr,r2                 ;609
000034  d07b              BEQ      |L7.302|
000036  ea5f7e43          LSLS     lr,r3,#29             ;609
00003a  d578              BPL      |L7.302|
00003c  680a              LDR      r2,[r1,#0]            ;612
00003e  0692              LSLS     r2,r2,#26             ;612
000040  d403              BMI      |L7.74|
000042  680a              LDR      r2,[r1,#0]            ;615
000044  f0220204          BIC      r2,r2,#4              ;615
000048  600a              STR      r2,[r1,#0]            ;615
                  |L7.74|
00004a  f8dfe248          LDR      lr,|L7.660|
00004e  f44f6280          MOV      r2,#0x400
000052  6801              LDR      r1,[r0,#0]
000054  f10e0e14          ADD      lr,lr,#0x14
000058  0113              LSLS     r3,r2,#4
00005a  0214              LSLS     r4,r2,#8
00005c  4571              CMP      r1,lr
00005e  d92d              BLS      |L7.188|
000060  42a9              CMP      r1,r5
000062  d101              BNE      |L7.104|
000064  2204              MOVS     r2,#4
000066  e025              B        |L7.180|
                  |L7.104|
000068  42b1              CMP      r1,r6
00006a  d101              BNE      |L7.112|
00006c  2240              MOVS     r2,#0x40
00006e  e021              B        |L7.180|
                  |L7.112|
000070  42b9              CMP      r1,r7
000072  d01f              BEQ      |L7.180|
000074  4561              CMP      r1,r12
000076  d101              BNE      |L7.124|
000078  461a              MOV      r2,r3
00007a  e01b              B        |L7.180|
                  |L7.124|
00007c  4541              CMP      r1,r8
00007e  d101              BNE      |L7.132|
000080  4622              MOV      r2,r4
000082  e017              B        |L7.180|
                  |L7.132|
000084  4549              CMP      r1,r9
000086  d102              BNE      |L7.142|
000088  f44f0280          MOV      r2,#0x400000
00008c  e012              B        |L7.180|
                  |L7.142|
00008e  4551              CMP      r1,r10
000090  d101              BNE      |L7.150|
000092  2204              MOVS     r2,#4
000094  e00e              B        |L7.180|
                  |L7.150|
000096  4559              CMP      r1,r11
000098  d101              BNE      |L7.158|
00009a  2240              MOVS     r2,#0x40
00009c  e00a              B        |L7.180|
                  |L7.158|
00009e  4d7f              LDR      r5,|L7.668|
0000a0  3514              ADDS     r5,r5,#0x14
0000a2  42a9              CMP      r1,r5
0000a4  d006              BEQ      |L7.180|
0000a6  4a7d              LDR      r2,|L7.668|
0000a8  3228              ADDS     r2,r2,#0x28
0000aa  4291              CMP      r1,r2
0000ac  d101              BNE      |L7.178|
0000ae  461a              MOV      r2,r3
0000b0  e000              B        |L7.180|
                  |L7.178|
0000b2  4622              MOV      r2,r4
                  |L7.180|
0000b4  4978              LDR      r1,|L7.664|
0000b6  1f09              SUBS     r1,r1,#4
0000b8  600a              STR      r2,[r1,#0]
0000ba  e032              B        |L7.290|
                  |L7.188|
0000bc  42a9              CMP      r1,r5
0000be  d101              BNE      |L7.196|
0000c0  2204              MOVS     r2,#4
0000c2  e02b              B        |L7.284|
                  |L7.196|
0000c4  42b1              CMP      r1,r6
0000c6  d101              BNE      |L7.204|
0000c8  2240              MOVS     r2,#0x40
0000ca  e027              B        |L7.284|
                  |L7.204|
0000cc  42b9              CMP      r1,r7
0000ce  d025              BEQ      |L7.284|
0000d0  4561              CMP      r1,r12
0000d2  d101              BNE      |L7.216|
0000d4  461a              MOV      r2,r3
0000d6  e021              B        |L7.284|
                  |L7.216|
0000d8  4541              CMP      r1,r8
0000da  d101              BNE      |L7.224|
0000dc  4622              MOV      r2,r4
0000de  e01d              B        |L7.284|
                  |L7.224|
0000e0  4549              CMP      r1,r9
0000e2  d102              BNE      |L7.234|
0000e4  f44f0280          MOV      r2,#0x400000
0000e8  e018              B        |L7.284|
                  |L7.234|
0000ea  4571              CMP      r1,lr
0000ec  d102              BNE      |L7.244|
0000ee  f04f6280          MOV      r2,#0x4000000
0000f2  e013              B        |L7.284|
                  |L7.244|
0000f4  4551              CMP      r1,r10
0000f6  d101              BNE      |L7.252|
0000f8  2204              MOVS     r2,#4
0000fa  e00f              B        |L7.284|
                  |L7.252|
0000fc  4559              CMP      r1,r11
0000fe  d101              BNE      |L7.260|
000100  2240              MOVS     r2,#0x40
000102  e00b              B        |L7.284|
                  |L7.260|
000104  4d65              LDR      r5,|L7.668|
000106  3514              ADDS     r5,r5,#0x14
000108  42a9              CMP      r1,r5
00010a  d007              BEQ      |L7.284|
00010c  4a63              LDR      r2,|L7.668|
00010e  3228              ADDS     r2,r2,#0x28
000110  4291              CMP      r1,r2
000112  d102              BNE      |L7.282|
000114  461a              MOV      r2,r3
000116  e001              B        |L7.284|
000118  e009              B        |L7.302|
                  |L7.282|
00011a  4622              MOV      r2,r4
                  |L7.284|
00011c  4958              LDR      r1,|L7.640|
00011e  3908              SUBS     r1,r1,#8
000120  604a              STR      r2,[r1,#4]
                  |L7.290|
;;;619    
;;;620        /* DMA peripheral state is not updated in Half Transfer */
;;;621        /* but in Transfer Complete case */
;;;622    
;;;623        if(hdma->XferHalfCpltCallback != NULL)
000122  6ac1              LDR      r1,[r0,#0x2c]
000124  2900              CMP      r1,#0
000126  d06f              BEQ      |L7.520|
;;;624        {
;;;625          /* Half transfer callback */
;;;626          hdma->XferHalfCpltCallback(hdma);
000128  e8bd5ff0          POP      {r4-r12,lr}
00012c  4708              BX       r1
                  |L7.302|
;;;627        }
;;;628      }
;;;629    
;;;630      /* Transfer Complete Interrupt management ***********************************/
;;;631      else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
00012e  f04f0e02          MOV      lr,#2
000132  fa0efe04          LSL      lr,lr,r4
000136  ea1e0f02          TST      lr,r2
00013a  d074              BEQ      |L7.550|
00013c  ea5f7e83          LSLS     lr,r3,#30
000140  d57f              BPL      |L7.578|
;;;632      {
;;;633        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
000142  680a              LDR      r2,[r1,#0]
000144  0692              LSLS     r2,r2,#26
000146  d406              BMI      |L7.342|
;;;634        {
;;;635          /* Disable the transfer complete and error interrupt */
;;;636          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
000148  680a              LDR      r2,[r1,#0]
00014a  f022020a          BIC      r2,r2,#0xa
00014e  600a              STR      r2,[r1,#0]
;;;637    
;;;638          /* Change the DMA state */
;;;639          hdma->State = HAL_DMA_STATE_READY;
000150  2101              MOVS     r1,#1
000152  f8801021          STRB     r1,[r0,#0x21]
                  |L7.342|
;;;640        }
;;;641        /* Clear the transfer complete flag */
;;;642          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
000156  f8dfe13c          LDR      lr,|L7.660|
00015a  f44f7200          MOV      r2,#0x200
00015e  6801              LDR      r1,[r0,#0]
000160  f10e0e14          ADD      lr,lr,#0x14
000164  0113              LSLS     r3,r2,#4
000166  0214              LSLS     r4,r2,#8
000168  4571              CMP      r1,lr
00016a  d92d              BLS      |L7.456|
00016c  42a9              CMP      r1,r5
00016e  d101              BNE      |L7.372|
000170  2202              MOVS     r2,#2
000172  e025              B        |L7.448|
                  |L7.372|
000174  42b1              CMP      r1,r6
000176  d101              BNE      |L7.380|
000178  2220              MOVS     r2,#0x20
00017a  e021              B        |L7.448|
                  |L7.380|
00017c  42b9              CMP      r1,r7
00017e  d01f              BEQ      |L7.448|
000180  4561              CMP      r1,r12
000182  d101              BNE      |L7.392|
000184  461a              MOV      r2,r3
000186  e01b              B        |L7.448|
                  |L7.392|
000188  4541              CMP      r1,r8
00018a  d101              BNE      |L7.400|
00018c  4622              MOV      r2,r4
00018e  e017              B        |L7.448|
                  |L7.400|
000190  4549              CMP      r1,r9
000192  d102              BNE      |L7.410|
000194  f44f1200          MOV      r2,#0x200000
000198  e012              B        |L7.448|
                  |L7.410|
00019a  4551              CMP      r1,r10
00019c  d101              BNE      |L7.418|
00019e  2202              MOVS     r2,#2
0001a0  e00e              B        |L7.448|
                  |L7.418|
0001a2  4559              CMP      r1,r11
0001a4  d101              BNE      |L7.426|
0001a6  2220              MOVS     r2,#0x20
0001a8  e00a              B        |L7.448|
                  |L7.426|
0001aa  4d3c              LDR      r5,|L7.668|
0001ac  3514              ADDS     r5,r5,#0x14
0001ae  42a9              CMP      r1,r5
0001b0  d006              BEQ      |L7.448|
0001b2  4a3a              LDR      r2,|L7.668|
0001b4  3228              ADDS     r2,r2,#0x28
0001b6  4291              CMP      r1,r2
0001b8  d101              BNE      |L7.446|
0001ba  461a              MOV      r2,r3
0001bc  e000              B        |L7.448|
                  |L7.446|
0001be  4622              MOV      r2,r4
                  |L7.448|
0001c0  4935              LDR      r1,|L7.664|
0001c2  1f09              SUBS     r1,r1,#4
0001c4  600a              STR      r2,[r1,#0]
0001c6  e033              B        |L7.560|
                  |L7.456|
0001c8  42a9              CMP      r1,r5
0001ca  d101              BNE      |L7.464|
0001cc  2202              MOVS     r2,#2
0001ce  e02c              B        |L7.554|
                  |L7.464|
0001d0  42b1              CMP      r1,r6
0001d2  d101              BNE      |L7.472|
0001d4  2220              MOVS     r2,#0x20
0001d6  e028              B        |L7.554|
                  |L7.472|
0001d8  42b9              CMP      r1,r7
0001da  d026              BEQ      |L7.554|
0001dc  4561              CMP      r1,r12
0001de  d101              BNE      |L7.484|
0001e0  461a              MOV      r2,r3
0001e2  e022              B        |L7.554|
                  |L7.484|
0001e4  4541              CMP      r1,r8
0001e6  d101              BNE      |L7.492|
0001e8  4622              MOV      r2,r4
0001ea  e01e              B        |L7.554|
                  |L7.492|
0001ec  4549              CMP      r1,r9
0001ee  d102              BNE      |L7.502|
0001f0  f44f1200          MOV      r2,#0x200000
0001f4  e019              B        |L7.554|
                  |L7.502|
0001f6  4571              CMP      r1,lr
0001f8  d102              BNE      |L7.512|
0001fa  f04f7200          MOV      r2,#0x2000000
0001fe  e014              B        |L7.554|
                  |L7.512|
000200  4551              CMP      r1,r10
000202  d102              BNE      |L7.522|
000204  2202              MOVS     r2,#2
000206  e010              B        |L7.554|
                  |L7.520|
000208  e038              B        |L7.636|
                  |L7.522|
00020a  4559              CMP      r1,r11
00020c  d101              BNE      |L7.530|
00020e  2220              MOVS     r2,#0x20
000210  e00b              B        |L7.554|
                  |L7.530|
000212  4d22              LDR      r5,|L7.668|
000214  3514              ADDS     r5,r5,#0x14
000216  42a9              CMP      r1,r5
000218  d007              BEQ      |L7.554|
00021a  4a20              LDR      r2,|L7.668|
00021c  3228              ADDS     r2,r2,#0x28
00021e  4291              CMP      r1,r2
000220  d102              BNE      |L7.552|
000222  461a              MOV      r2,r3
000224  e001              B        |L7.554|
                  |L7.550|
000226  e00c              B        |L7.578|
                  |L7.552|
000228  4622              MOV      r2,r4
                  |L7.554|
00022a  4915              LDR      r1,|L7.640|
00022c  3908              SUBS     r1,r1,#8
00022e  604a              STR      r2,[r1,#4]
                  |L7.560|
;;;643    
;;;644        /* Process Unlocked */
;;;645        __HAL_UNLOCK(hdma);
000230  2100              MOVS     r1,#0
000232  f8801020          STRB     r1,[r0,#0x20]
;;;646    
;;;647        if(hdma->XferCpltCallback != NULL)
000236  6a81              LDR      r1,[r0,#0x28]
000238  2900              CMP      r1,#0
00023a  d01f              BEQ      |L7.636|
;;;648        {
;;;649          /* Transfer complete callback */
;;;650          hdma->XferCpltCallback(hdma);
00023c  e8bd5ff0          POP      {r4-r12,lr}
000240  4708              BX       r1
                  |L7.578|
;;;651        }
;;;652      }
;;;653    
;;;654      /* Transfer Error Interrupt management **************************************/
;;;655      else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
000242  2508              MOVS     r5,#8
000244  40a5              LSLS     r5,r5,r4
000246  4215              TST      r5,r2
000248  d018              BEQ      |L7.636|
00024a  071a              LSLS     r2,r3,#28
00024c  d516              BPL      |L7.636|
;;;656      {
;;;657        /* When a DMA transfer error occurs */
;;;658        /* A hardware clear of its EN bits is performed */
;;;659        /* Disable ALL DMA IT */
;;;660        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
00024e  680a              LDR      r2,[r1,#0]
000250  f022020e          BIC      r2,r2,#0xe
000254  600a              STR      r2,[r1,#0]
;;;661    
;;;662        /* Clear all flags */
;;;663        hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
000256  f8902040          LDRB     r2,[r0,#0x40]
00025a  6bc3              LDR      r3,[r0,#0x3c]
00025c  2101              MOVS     r1,#1
00025e  fa01f202          LSL      r2,r1,r2
000262  605a              STR      r2,[r3,#4]
;;;664    
;;;665        /* Update error code */
;;;666        hdma->ErrorCode = HAL_DMA_ERROR_TE;
000264  6381              STR      r1,[r0,#0x38]
;;;667    
;;;668        /* Change the DMA state */
;;;669        hdma->State = HAL_DMA_STATE_READY;
000266  f8801021          STRB     r1,[r0,#0x21]
;;;670    
;;;671        /* Process Unlocked */
;;;672        __HAL_UNLOCK(hdma);
00026a  2100              MOVS     r1,#0
00026c  f8801020          STRB     r1,[r0,#0x20]
;;;673    
;;;674        if (hdma->XferErrorCallback != NULL)
000270  6b01              LDR      r1,[r0,#0x30]
000272  2900              CMP      r1,#0
000274  d002              BEQ      |L7.636|
;;;675        {
;;;676          /* Transfer error callback */
;;;677          hdma->XferErrorCallback(hdma);
000276  e8bd5ff0          POP      {r4-r12,lr}
00027a  4708              BX       r1
                  |L7.636|
;;;678        }
;;;679      }
;;;680      return;
;;;681    }
00027c  e8bd9ff0          POP      {r4-r12,pc}
;;;682    
                          ENDP

                  |L7.640|
                          DCD      0x40020008
                  |L7.644|
                          DCD      0x4002001c
                  |L7.648|
                          DCD      0x40020030
                  |L7.652|
                          DCD      0x40020044
                  |L7.656|
                          DCD      0x40020058
                  |L7.660|
                          DCD      0x4002006c
                  |L7.664|
                          DCD      0x40020408
                  |L7.668|
                          DCD      0x4002041c

                          AREA ||i.HAL_DMA_Init||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Init PROC
;;;142      */
;;;143    HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
000000  b530              PUSH     {r4,r5,lr}
;;;144    {
;;;145      uint32_t tmp = 0U;
;;;146    
;;;147      /* Check the DMA handle allocation */
;;;148      if(hdma == NULL)
000002  2800              CMP      r0,#0
000004  d00d              BEQ      |L8.34|
;;;149      {
;;;150        return HAL_ERROR;
;;;151      }
;;;152    
;;;153      /* Check the parameters */
;;;154      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;155      assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
;;;156      assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
;;;157      assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
;;;158      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
;;;159      assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
;;;160      assert_param(IS_DMA_MODE(hdma->Init.Mode));
;;;161      assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
;;;162    
;;;163    #if defined (DMA2)
;;;164      /* calculation of the channel index */
;;;165      if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
000006  4b1b              LDR      r3,|L8.116|
000008  6801              LDR      r1,[r0,#0]
;;;166      {
;;;167        /* DMA1 */
;;;168        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
00000a  2214              MOVS     r2,#0x14
00000c  4299              CMP      r1,r3                 ;165
00000e  d20a              BCS      |L8.38|
000010  4b19              LDR      r3,|L8.120|
000012  440b              ADD      r3,r3,r1
000014  fbb3f2f2          UDIV     r2,r3,r2
000018  0092              LSLS     r2,r2,#2
00001a  6402              STR      r2,[r0,#0x40]
;;;169        hdma->DmaBaseAddress = DMA1;
00001c  4a17              LDR      r2,|L8.124|
00001e  63c2              STR      r2,[r0,#0x3c]
000020  e00b              B        |L8.58|
                  |L8.34|
000022  2001              MOVS     r0,#1                 ;150
;;;170      }
;;;171      else 
;;;172      {
;;;173        /* DMA2 */
;;;174        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
;;;175        hdma->DmaBaseAddress = DMA2;
;;;176      }
;;;177    #else
;;;178      /* DMA1 */
;;;179      hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;180      hdma->DmaBaseAddress = DMA1;
;;;181    #endif /* DMA2 */
;;;182    
;;;183      /* Change DMA peripheral state */
;;;184      hdma->State = HAL_DMA_STATE_BUSY;
;;;185    
;;;186      /* Get the CR register value */
;;;187      tmp = hdma->Instance->CCR;
;;;188    
;;;189      /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;190      tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
;;;191                          DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
;;;192                          DMA_CCR_DIR));
;;;193    
;;;194      /* Prepare the DMA Channel configuration */
;;;195      tmp |=  hdma->Init.Direction        |
;;;196              hdma->Init.PeriphInc           | hdma->Init.MemInc           |
;;;197              hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
;;;198              hdma->Init.Mode                | hdma->Init.Priority;
;;;199    
;;;200      /* Write to DMA Channel CR register */
;;;201      hdma->Instance->CCR = tmp;
;;;202    
;;;203      /* Initialise the error code */
;;;204      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;205    
;;;206      /* Initialize the DMA state*/
;;;207      hdma->State = HAL_DMA_STATE_READY;
;;;208      /* Allocate lock resource and initialize it */
;;;209      hdma->Lock = HAL_UNLOCKED;
;;;210    
;;;211      return HAL_OK;
;;;212    }
000024  bd30              POP      {r4,r5,pc}
                  |L8.38|
000026  4b13              LDR      r3,|L8.116|
000028  425b              RSBS     r3,r3,#0              ;174
00002a  440b              ADD      r3,r3,r1              ;174
00002c  fbb3f2f2          UDIV     r2,r3,r2              ;174
000030  0092              LSLS     r2,r2,#2              ;174
000032  6402              STR      r2,[r0,#0x40]         ;174
000034  4a0f              LDR      r2,|L8.116|
000036  3a08              SUBS     r2,r2,#8              ;175
000038  63c2              STR      r2,[r0,#0x3c]         ;175
                  |L8.58|
00003a  2202              MOVS     r2,#2                 ;184
00003c  1d00              ADDS     r0,r0,#4              ;184
00003e  7742              STRB     r2,[r0,#0x1d]         ;184
000040  680a              LDR      r2,[r1,#0]            ;187
000042  f64373f0          MOV      r3,#0x3ff0            ;190
000046  439a              BICS     r2,r2,r3              ;190
000048  e9d03400          LDRD     r3,r4,[r0,#0]         ;195
00004c  4323              ORRS     r3,r3,r4              ;195
00004e  e9d04502          LDRD     r4,r5,[r0,#8]         ;195
000052  432c              ORRS     r4,r4,r5              ;195
000054  4323              ORRS     r3,r3,r4              ;195
000056  6904              LDR      r4,[r0,#0x10]         ;195
000058  4323              ORRS     r3,r3,r4              ;195
00005a  6944              LDR      r4,[r0,#0x14]         ;195
00005c  4323              ORRS     r3,r3,r4              ;195
00005e  6984              LDR      r4,[r0,#0x18]         ;195
000060  4323              ORRS     r3,r3,r4              ;195
000062  4313              ORRS     r3,r3,r2              ;195
000064  600b              STR      r3,[r1,#0]            ;201
000066  2100              MOVS     r1,#0                 ;204
000068  6341              STR      r1,[r0,#0x34]         ;204
00006a  2201              MOVS     r2,#1                 ;207
00006c  7742              STRB     r2,[r0,#0x1d]         ;207
00006e  7701              STRB     r1,[r0,#0x1c]         ;209
000070  2000              MOVS     r0,#0                 ;211
000072  bd30              POP      {r4,r5,pc}
;;;213    
                          ENDP

                  |L8.116|
                          DCD      0x40020408
                  |L8.120|
                          DCD      0xbffdfff8
                  |L8.124|
                          DCD      0x40020000

                          AREA ||i.HAL_DMA_PollForTransfer||, CODE, READONLY, ALIGN=2

                  HAL_DMA_PollForTransfer PROC
;;;501      */
;;;502    HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;503    {
000004  b082              SUB      sp,sp,#8
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
;;;504      uint32_t temp;
;;;505      uint32_t tickstart = 0U;
;;;506    
;;;507      if(HAL_DMA_STATE_BUSY != hdma->State)
00000a  f8940021          LDRB     r0,[r4,#0x21]
00000e  2802              CMP      r0,#2
000010  d008              BEQ      |L9.36|
;;;508      {
;;;509        /* no transfer ongoing */
;;;510        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
000012  2004              MOVS     r0,#4
000014  63a0              STR      r0,[r4,#0x38]
;;;511        __HAL_UNLOCK(hdma);
000016  2000              MOVS     r0,#0
000018  f8840020          STRB     r0,[r4,#0x20]
;;;512        return HAL_ERROR;
00001c  2001              MOVS     r0,#1
                  |L9.30|
;;;513      }
;;;514    
;;;515      /* Polling mode not supported in circular mode */
;;;516      if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
;;;517      {
;;;518        hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
;;;519        return HAL_ERROR;
;;;520      }
;;;521      
;;;522      /* Get the level transfer complete flag */
;;;523      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;524      {
;;;525        /* Transfer Complete flag */
;;;526        temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
;;;527      }
;;;528      else
;;;529      {
;;;530        /* Half Transfer Complete flag */
;;;531        temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
;;;532      }
;;;533    
;;;534      /* Get tick */
;;;535      tickstart = HAL_GetTick();
;;;536    
;;;537      while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
;;;538      {
;;;539        if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
;;;540        {
;;;541          /* When a DMA transfer error occurs */
;;;542          /* A hardware clear of its EN bits is performed */
;;;543          /* Clear all flags */
;;;544          hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
;;;545    
;;;546          /* Update error code */
;;;547          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
;;;548    
;;;549          /* Change the DMA state */
;;;550          hdma->State= HAL_DMA_STATE_READY;
;;;551    
;;;552          /* Process Unlocked */
;;;553          __HAL_UNLOCK(hdma);
;;;554    
;;;555          return HAL_ERROR;
;;;556        }
;;;557        /* Check for the Timeout */
;;;558        if(Timeout != HAL_MAX_DELAY)
;;;559        {
;;;560          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
;;;561          {
;;;562            /* Update error code */
;;;563            SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
;;;564    
;;;565            /* Change the DMA state */
;;;566            hdma->State = HAL_DMA_STATE_READY;
;;;567    
;;;568            /* Process Unlocked */
;;;569            __HAL_UNLOCK(hdma);
;;;570    
;;;571            return HAL_ERROR;
;;;572          }
;;;573        }
;;;574      }
;;;575    
;;;576      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;577      {
;;;578        /* Clear the transfer complete flag */
;;;579        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
;;;580    
;;;581        /* The selected Channelx EN bit is cleared (DMA is disabled and
;;;582        all transfers are complete) */
;;;583        hdma->State = HAL_DMA_STATE_READY;
;;;584      }
;;;585      else
;;;586      {
;;;587        /* Clear the half transfer complete flag */
;;;588        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
;;;589      }
;;;590      
;;;591      /* Process unlocked */
;;;592      __HAL_UNLOCK(hdma);
;;;593    
;;;594      return HAL_OK;
;;;595    }
00001e  b005              ADD      sp,sp,#0x14
000020  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.36|
000024  6820              LDR      r0,[r4,#0]            ;516
000026  6801              LDR      r1,[r0,#0]            ;516
000028  0689              LSLS     r1,r1,#26             ;516
00002a  d504              BPL      |L9.54|
00002c  f44f7080          MOV      r0,#0x100             ;518
000030  63a0              STR      r0,[r4,#0x38]         ;518
000032  2001              MOVS     r0,#1                 ;519
000034  e7f3              B        |L9.30|
                  |L9.54|
000036  f8df83e4          LDR      r8,|L9.1052|
00003a  f8df93e0          LDR      r9,|L9.1052|
00003e  f8dfa3dc          LDR      r10,|L9.1052|
000042  f8dfb3d8          LDR      r11,|L9.1052|
000046  4ff5              LDR      r7,|L9.1052|
000048  9903              LDR      r1,[sp,#0xc]          ;523
00004a  f1080814          ADD      r8,r8,#0x14           ;526
00004e  f1090928          ADD      r9,r9,#0x28           ;526
000052  f10a0a3c          ADD      r10,r10,#0x3c         ;526
000056  f10b0b50          ADD      r11,r11,#0x50         ;526
00005a  b129              CBZ      r1,|L9.104|
00005c  49ef              LDR      r1,|L9.1052|
00005e  3914              SUBS     r1,r1,#0x14           ;531
000060  4288              CMP      r0,r1                 ;531
000062  d140              BNE      |L9.230|
000064  2604              MOVS     r6,#4                 ;531
000066  e076              B        |L9.342|
                  |L9.104|
000068  49ec              LDR      r1,|L9.1052|
00006a  3914              SUBS     r1,r1,#0x14           ;526
00006c  4288              CMP      r0,r1                 ;526
00006e  d101              BNE      |L9.116|
000070  2602              MOVS     r6,#2                 ;526
000072  e070              B        |L9.342|
                  |L9.116|
000074  42b8              CMP      r0,r7                 ;526
000076  d101              BNE      |L9.124|
000078  2620              MOVS     r6,#0x20              ;526
00007a  e06c              B        |L9.342|
                  |L9.124|
00007c  4540              CMP      r0,r8                 ;526
00007e  d102              BNE      |L9.134|
000080  f44f7600          MOV      r6,#0x200             ;526
000084  e067              B        |L9.342|
                  |L9.134|
000086  4548              CMP      r0,r9                 ;526
000088  d102              BNE      |L9.144|
00008a  f44f5600          MOV      r6,#0x2000            ;526
00008e  e062              B        |L9.342|
                  |L9.144|
000090  4550              CMP      r0,r10                ;526
000092  d102              BNE      |L9.154|
000094  f44f3600          MOV      r6,#0x20000           ;526
000098  e05d              B        |L9.342|
                  |L9.154|
00009a  4558              CMP      r0,r11                ;526
00009c  d102              BNE      |L9.164|
00009e  f44f1600          MOV      r6,#0x200000          ;526
0000a2  e058              B        |L9.342|
                  |L9.164|
0000a4  49dd              LDR      r1,|L9.1052|
0000a6  3164              ADDS     r1,r1,#0x64           ;526
0000a8  4288              CMP      r0,r1                 ;526
0000aa  d101              BNE      |L9.176|
0000ac  0486              LSLS     r6,r0,#18             ;526
0000ae  e052              B        |L9.342|
                  |L9.176|
0000b0  49db              LDR      r1,|L9.1056|
0000b2  4288              CMP      r0,r1                 ;526
0000b4  d101              BNE      |L9.186|
0000b6  2602              MOVS     r6,#2                 ;526
0000b8  e04d              B        |L9.342|
                  |L9.186|
0000ba  49d9              LDR      r1,|L9.1056|
0000bc  3114              ADDS     r1,r1,#0x14           ;526
0000be  4288              CMP      r0,r1                 ;526
0000c0  d101              BNE      |L9.198|
0000c2  2620              MOVS     r6,#0x20              ;526
0000c4  e047              B        |L9.342|
                  |L9.198|
0000c6  49d6              LDR      r1,|L9.1056|
0000c8  3128              ADDS     r1,r1,#0x28           ;526
0000ca  4288              CMP      r0,r1                 ;526
0000cc  d101              BNE      |L9.210|
0000ce  1546              ASRS     r6,r0,#21             ;526
0000d0  e041              B        |L9.342|
                  |L9.210|
0000d2  49d3              LDR      r1,|L9.1056|
0000d4  313c              ADDS     r1,r1,#0x3c           ;526
0000d6  4288              CMP      r0,r1                 ;526
0000d8  d102              BNE      |L9.224|
0000da  f44f5600          MOV      r6,#0x2000            ;526
0000de  e03a              B        |L9.342|
                  |L9.224|
0000e0  f44f3600          MOV      r6,#0x20000           ;526
0000e4  e037              B        |L9.342|
                  |L9.230|
0000e6  42b8              CMP      r0,r7                 ;531
0000e8  d101              BNE      |L9.238|
0000ea  2640              MOVS     r6,#0x40              ;531
0000ec  e033              B        |L9.342|
                  |L9.238|
0000ee  4540              CMP      r0,r8                 ;531
0000f0  d102              BNE      |L9.248|
0000f2  f44f6680          MOV      r6,#0x400             ;531
0000f6  e02e              B        |L9.342|
                  |L9.248|
0000f8  4548              CMP      r0,r9                 ;531
0000fa  d102              BNE      |L9.258|
0000fc  f44f4680          MOV      r6,#0x4000            ;531
000100  e029              B        |L9.342|
                  |L9.258|
000102  4550              CMP      r0,r10                ;531
000104  d102              BNE      |L9.268|
000106  f44f2680          MOV      r6,#0x40000           ;531
00010a  e024              B        |L9.342|
                  |L9.268|
00010c  4558              CMP      r0,r11                ;531
00010e  d102              BNE      |L9.278|
000110  f44f0680          MOV      r6,#0x400000          ;531
000114  e01f              B        |L9.342|
                  |L9.278|
000116  49c1              LDR      r1,|L9.1052|
000118  3164              ADDS     r1,r1,#0x64           ;531
00011a  4288              CMP      r0,r1                 ;531
00011c  d101              BNE      |L9.290|
00011e  04c6              LSLS     r6,r0,#19             ;531
000120  e019              B        |L9.342|
                  |L9.290|
000122  49bf              LDR      r1,|L9.1056|
000124  4288              CMP      r0,r1                 ;531
000126  d101              BNE      |L9.300|
000128  2604              MOVS     r6,#4                 ;531
00012a  e014              B        |L9.342|
                  |L9.300|
00012c  49bc              LDR      r1,|L9.1056|
00012e  3114              ADDS     r1,r1,#0x14           ;531
000130  4288              CMP      r0,r1                 ;531
000132  d101              BNE      |L9.312|
000134  2640              MOVS     r6,#0x40              ;531
000136  e00e              B        |L9.342|
                  |L9.312|
000138  49b9              LDR      r1,|L9.1056|
00013a  3128              ADDS     r1,r1,#0x28           ;531
00013c  4288              CMP      r0,r1                 ;531
00013e  d101              BNE      |L9.324|
000140  1506              ASRS     r6,r0,#20             ;531
000142  e008              B        |L9.342|
                  |L9.324|
000144  49b6              LDR      r1,|L9.1056|
000146  313c              ADDS     r1,r1,#0x3c           ;531
000148  4288              CMP      r0,r1                 ;531
00014a  d102              BNE      |L9.338|
00014c  f44f4680          MOV      r6,#0x4000            ;531
000150  e001              B        |L9.342|
                  |L9.338|
000152  f44f2680          MOV      r6,#0x40000           ;531
                  |L9.342|
000156  f7fffffe          BL       HAL_GetTick
00015a  9001              STR      r0,[sp,#4]            ;535
00015c  e0a5              B        |L9.682|
                  |L9.350|
00015e  4290              CMP      r0,r2                 ;539
000160  d93c              BLS      |L9.476|
000162  49af              LDR      r1,|L9.1056|
000164  3908              SUBS     r1,r1,#8              ;539
000166  6809              LDR      r1,[r1,#0]            ;539
000168  4aac              LDR      r2,|L9.1052|
00016a  3a14              SUBS     r2,r2,#0x14           ;539
00016c  4290              CMP      r0,r2                 ;539
00016e  d101              BNE      |L9.372|
000170  2008              MOVS     r0,#8                 ;539
000172  e031              B        |L9.472|
                  |L9.372|
000174  42b8              CMP      r0,r7                 ;539
000176  d101              BNE      |L9.380|
000178  2080              MOVS     r0,#0x80              ;539
00017a  e02d              B        |L9.472|
                  |L9.380|
00017c  4540              CMP      r0,r8                 ;539
00017e  d102              BNE      |L9.390|
000180  f44f6000          MOV      r0,#0x800             ;539
000184  e028              B        |L9.472|
                  |L9.390|
000186  4548              CMP      r0,r9                 ;539
000188  d102              BNE      |L9.400|
00018a  f44f4000          MOV      r0,#0x8000            ;539
00018e  e023              B        |L9.472|
                  |L9.400|
000190  4550              CMP      r0,r10                ;539
000192  d102              BNE      |L9.410|
000194  f44f2000          MOV      r0,#0x80000           ;539
000198  e01e              B        |L9.472|
                  |L9.410|
00019a  4558              CMP      r0,r11                ;539
00019c  d102              BNE      |L9.420|
00019e  f44f0000          MOV      r0,#0x800000          ;539
0001a2  e019              B        |L9.472|
                  |L9.420|
0001a4  4a9e              LDR      r2,|L9.1056|
0001a6  4290              CMP      r0,r2                 ;539
0001a8  d101              BNE      |L9.430|
0001aa  2008              MOVS     r0,#8                 ;539
0001ac  e014              B        |L9.472|
                  |L9.430|
0001ae  4a9c              LDR      r2,|L9.1056|
0001b0  3214              ADDS     r2,r2,#0x14           ;539
0001b2  4290              CMP      r0,r2                 ;539
0001b4  d101              BNE      |L9.442|
0001b6  2080              MOVS     r0,#0x80              ;539
0001b8  e00e              B        |L9.472|
                  |L9.442|
0001ba  4a99              LDR      r2,|L9.1056|
0001bc  3228              ADDS     r2,r2,#0x28           ;539
0001be  4290              CMP      r0,r2                 ;539
0001c0  d101              BNE      |L9.454|
0001c2  14c0              ASRS     r0,r0,#19             ;539
0001c4  e008              B        |L9.472|
                  |L9.454|
0001c6  4a96              LDR      r2,|L9.1056|
0001c8  323c              ADDS     r2,r2,#0x3c           ;539
0001ca  4290              CMP      r0,r2                 ;539
0001cc  d102              BNE      |L9.468|
0001ce  f44f4000          MOV      r0,#0x8000            ;539
0001d2  e001              B        |L9.472|
                  |L9.468|
0001d4  f44f2000          MOV      r0,#0x80000           ;539
                  |L9.472|
0001d8  4001              ANDS     r1,r1,r0              ;539
0001da  e040              B        |L9.606|
                  |L9.476|
0001dc  498f              LDR      r1,|L9.1052|
0001de  391c              SUBS     r1,r1,#0x1c           ;539
0001e0  6809              LDR      r1,[r1,#0]            ;539
0001e2  4b8e              LDR      r3,|L9.1052|
0001e4  3b14              SUBS     r3,r3,#0x14           ;539
0001e6  4298              CMP      r0,r3                 ;539
0001e8  d101              BNE      |L9.494|
0001ea  2008              MOVS     r0,#8                 ;539
0001ec  e036              B        |L9.604|
                  |L9.494|
0001ee  42b8              CMP      r0,r7                 ;539
0001f0  d101              BNE      |L9.502|
0001f2  2080              MOVS     r0,#0x80              ;539
0001f4  e032              B        |L9.604|
                  |L9.502|
0001f6  4540              CMP      r0,r8                 ;539
0001f8  d102              BNE      |L9.512|
0001fa  f44f6000          MOV      r0,#0x800             ;539
0001fe  e02d              B        |L9.604|
                  |L9.512|
000200  4548              CMP      r0,r9                 ;539
000202  d102              BNE      |L9.522|
000204  f44f4000          MOV      r0,#0x8000            ;539
000208  e028              B        |L9.604|
                  |L9.522|
00020a  4550              CMP      r0,r10                ;539
00020c  d102              BNE      |L9.532|
00020e  f44f2000          MOV      r0,#0x80000           ;539
000212  e023              B        |L9.604|
                  |L9.532|
000214  4558              CMP      r0,r11                ;539
000216  d102              BNE      |L9.542|
000218  f44f0000          MOV      r0,#0x800000          ;539
00021c  e01e              B        |L9.604|
                  |L9.542|
00021e  4290              CMP      r0,r2                 ;539
000220  d102              BNE      |L9.552|
000222  f04f6000          MOV      r0,#0x8000000         ;539
000226  e019              B        |L9.604|
                  |L9.552|
000228  4a7d              LDR      r2,|L9.1056|
00022a  4290              CMP      r0,r2                 ;539
00022c  d101              BNE      |L9.562|
00022e  2008              MOVS     r0,#8                 ;539
000230  e014              B        |L9.604|
                  |L9.562|
000232  4a7b              LDR      r2,|L9.1056|
000234  3214              ADDS     r2,r2,#0x14           ;539
000236  4290              CMP      r0,r2                 ;539
000238  d101              BNE      |L9.574|
00023a  2080              MOVS     r0,#0x80              ;539
00023c  e00e              B        |L9.604|
                  |L9.574|
00023e  4a78              LDR      r2,|L9.1056|
000240  3228              ADDS     r2,r2,#0x28           ;539
000242  4290              CMP      r0,r2                 ;539
000244  d101              BNE      |L9.586|
000246  14c0              ASRS     r0,r0,#19             ;539
000248  e008              B        |L9.604|
                  |L9.586|
00024a  4a75              LDR      r2,|L9.1056|
00024c  323c              ADDS     r2,r2,#0x3c           ;539
00024e  4290              CMP      r0,r2                 ;539
000250  d102              BNE      |L9.600|
000252  f44f4000          MOV      r0,#0x8000            ;539
000256  e001              B        |L9.604|
                  |L9.600|
000258  f44f2000          MOV      r0,#0x80000           ;539
                  |L9.604|
00025c  4001              ANDS     r1,r1,r0              ;539
                  |L9.606|
00025e  b181              CBZ      r1,|L9.642|
000260  3420              ADDS     r4,r4,#0x20           ;544
000262  2201              MOVS     r2,#1                 ;544
000264  f8941020          LDRB     r1,[r4,#0x20]         ;544
000268  fa02f001          LSL      r0,r2,r1              ;544
00026c  69e1              LDR      r1,[r4,#0x1c]         ;544
00026e  6048              STR      r0,[r1,#4]            ;544
000270  69a1              LDR      r1,[r4,#0x18]         ;547
000272  f0410101          ORR      r1,r1,#1              ;547
000276  61a1              STR      r1,[r4,#0x18]         ;547
000278  7062              STRB     r2,[r4,#1]            ;550
00027a  2000              MOVS     r0,#0                 ;553
00027c  7020              STRB     r0,[r4,#0]            ;553
00027e  2001              MOVS     r0,#1                 ;555
000280  e6cd              B        |L9.30|
                  |L9.642|
000282  1c68              ADDS     r0,r5,#1              ;558
000284  d011              BEQ      |L9.682|
000286  b12d              CBZ      r5,|L9.660|
000288  f7fffffe          BL       HAL_GetTick
00028c  9901              LDR      r1,[sp,#4]            ;560
00028e  1a40              SUBS     r0,r0,r1              ;560
000290  42a8              CMP      r0,r5                 ;560
000292  d90a              BLS      |L9.682|
                  |L9.660|
000294  3420              ADDS     r4,r4,#0x20           ;563
000296  69a0              LDR      r0,[r4,#0x18]         ;563
000298  f0400020          ORR      r0,r0,#0x20           ;563
00029c  61a0              STR      r0,[r4,#0x18]         ;563
00029e  2001              MOVS     r0,#1                 ;566
0002a0  7060              STRB     r0,[r4,#1]            ;566
0002a2  2000              MOVS     r0,#0                 ;569
0002a4  7020              STRB     r0,[r4,#0]            ;569
0002a6  2001              MOVS     r0,#1                 ;571
0002a8  e6b9              B        |L9.30|
                  |L9.682|
0002aa  4a5c              LDR      r2,|L9.1052|
0002ac  6820              LDR      r0,[r4,#0]            ;537
0002ae  3264              ADDS     r2,r2,#0x64           ;537
0002b0  4290              CMP      r0,r2                 ;537
0002b2  d904              BLS      |L9.702|
0002b4  495a              LDR      r1,|L9.1056|
0002b6  3908              SUBS     r1,r1,#8              ;537
0002b8  6809              LDR      r1,[r1,#0]            ;537
0002ba  4031              ANDS     r1,r1,r6              ;537
0002bc  e003              B        |L9.710|
                  |L9.702|
0002be  4957              LDR      r1,|L9.1052|
0002c0  391c              SUBS     r1,r1,#0x1c           ;537
0002c2  6809              LDR      r1,[r1,#0]            ;537
0002c4  4031              ANDS     r1,r1,r6              ;537
                  |L9.710|
0002c6  2900              CMP      r1,#0                 ;537
0002c8  f43faf49          BEQ      |L9.350|
0002cc  4b54              LDR      r3,|L9.1056|
0002ce  9903              LDR      r1,[sp,#0xc]          ;576
0002d0  1f1b              SUBS     r3,r3,#4              ;579
0002d2  b151              CBZ      r1,|L9.746|
0002d4  4a51              LDR      r2,|L9.1052|
0002d6  6821              LDR      r1,[r4,#0]            ;588
0002d8  3264              ADDS     r2,r2,#0x64           ;588
0002da  4291              CMP      r1,r2                 ;588
0002dc  d972              BLS      |L9.964|
0002de  494f              LDR      r1,|L9.1052|
0002e0  3914              SUBS     r1,r1,#0x14           ;588
0002e2  4288              CMP      r0,r1                 ;588
0002e4  d16f              BNE      |L9.966|
0002e6  2004              MOVS     r0,#4                 ;588
0002e8  e0bb              B        |L9.1122|
                  |L9.746|
0002ea  494c              LDR      r1,|L9.1052|
0002ec  6822              LDR      r2,[r4,#0]            ;579
0002ee  3164              ADDS     r1,r1,#0x64           ;579
0002f0  428a              CMP      r2,r1                 ;579
0002f2  d939              BLS      |L9.872|
0002f4  4949              LDR      r1,|L9.1052|
0002f6  3914              SUBS     r1,r1,#0x14           ;579
0002f8  4288              CMP      r0,r1                 ;579
0002fa  d101              BNE      |L9.768|
0002fc  2002              MOVS     r0,#2                 ;579
0002fe  e031              B        |L9.868|
                  |L9.768|
000300  42b8              CMP      r0,r7                 ;579
000302  d101              BNE      |L9.776|
000304  2020              MOVS     r0,#0x20              ;579
000306  e02d              B        |L9.868|
                  |L9.776|
000308  4540              CMP      r0,r8                 ;579
00030a  d102              BNE      |L9.786|
00030c  f44f7000          MOV      r0,#0x200             ;579
000310  e028              B        |L9.868|
                  |L9.786|
000312  4548              CMP      r0,r9                 ;579
000314  d102              BNE      |L9.796|
000316  f44f5000          MOV      r0,#0x2000            ;579
00031a  e023              B        |L9.868|
                  |L9.796|
00031c  4550              CMP      r0,r10                ;579
00031e  d102              BNE      |L9.806|
000320  f44f3000          MOV      r0,#0x20000           ;579
000324  e01e              B        |L9.868|
                  |L9.806|
000326  4558              CMP      r0,r11                ;579
000328  d102              BNE      |L9.816|
00032a  f44f1000          MOV      r0,#0x200000          ;579
00032e  e019              B        |L9.868|
                  |L9.816|
000330  493b              LDR      r1,|L9.1056|
000332  4288              CMP      r0,r1                 ;579
000334  d101              BNE      |L9.826|
000336  2002              MOVS     r0,#2                 ;579
000338  e014              B        |L9.868|
                  |L9.826|
00033a  4939              LDR      r1,|L9.1056|
00033c  3114              ADDS     r1,r1,#0x14           ;579
00033e  4288              CMP      r0,r1                 ;579
000340  d101              BNE      |L9.838|
000342  2020              MOVS     r0,#0x20              ;579
000344  e00e              B        |L9.868|
                  |L9.838|
000346  4936              LDR      r1,|L9.1056|
000348  3128              ADDS     r1,r1,#0x28           ;579
00034a  4288              CMP      r0,r1                 ;579
00034c  d101              BNE      |L9.850|
00034e  1540              ASRS     r0,r0,#21             ;579
000350  e008              B        |L9.868|
                  |L9.850|
000352  4933              LDR      r1,|L9.1056|
000354  313c              ADDS     r1,r1,#0x3c           ;579
000356  4288              CMP      r0,r1                 ;579
000358  d102              BNE      |L9.864|
00035a  f44f5000          MOV      r0,#0x2000            ;579
00035e  e001              B        |L9.868|
                  |L9.864|
000360  f44f3000          MOV      r0,#0x20000           ;579
                  |L9.868|
000364  6018              STR      r0,[r3,#0]            ;579
000366  e041              B        |L9.1004|
                  |L9.872|
000368  4a2c              LDR      r2,|L9.1052|
00036a  3a14              SUBS     r2,r2,#0x14           ;579
00036c  4290              CMP      r0,r2                 ;579
00036e  d101              BNE      |L9.884|
000370  2002              MOVS     r0,#2                 ;579
000372  e038              B        |L9.998|
                  |L9.884|
000374  42b8              CMP      r0,r7                 ;579
000376  d101              BNE      |L9.892|
000378  2020              MOVS     r0,#0x20              ;579
00037a  e034              B        |L9.998|
                  |L9.892|
00037c  4540              CMP      r0,r8                 ;579
00037e  d102              BNE      |L9.902|
000380  f44f7000          MOV      r0,#0x200             ;579
000384  e02f              B        |L9.998|
                  |L9.902|
000386  4548              CMP      r0,r9                 ;579
000388  d102              BNE      |L9.912|
00038a  f44f5000          MOV      r0,#0x2000            ;579
00038e  e02a              B        |L9.998|
                  |L9.912|
000390  4550              CMP      r0,r10                ;579
000392  d102              BNE      |L9.922|
000394  f44f3000          MOV      r0,#0x20000           ;579
000398  e025              B        |L9.998|
                  |L9.922|
00039a  4558              CMP      r0,r11                ;579
00039c  d102              BNE      |L9.932|
00039e  f44f1000          MOV      r0,#0x200000          ;579
0003a2  e020              B        |L9.998|
                  |L9.932|
0003a4  4288              CMP      r0,r1                 ;579
0003a6  d102              BNE      |L9.942|
0003a8  f04f7000          MOV      r0,#0x2000000         ;579
0003ac  e01b              B        |L9.998|
                  |L9.942|
0003ae  491c              LDR      r1,|L9.1056|
0003b0  4288              CMP      r0,r1                 ;579
0003b2  d101              BNE      |L9.952|
0003b4  2002              MOVS     r0,#2                 ;579
0003b6  e016              B        |L9.998|
                  |L9.952|
0003b8  4919              LDR      r1,|L9.1056|
0003ba  3114              ADDS     r1,r1,#0x14           ;579
0003bc  4288              CMP      r0,r1                 ;579
0003be  d103              BNE      |L9.968|
0003c0  2020              MOVS     r0,#0x20              ;579
0003c2  e010              B        |L9.998|
                  |L9.964|
0003c4  e04f              B        |L9.1126|
                  |L9.966|
0003c6  e015              B        |L9.1012|
                  |L9.968|
0003c8  4915              LDR      r1,|L9.1056|
0003ca  3128              ADDS     r1,r1,#0x28           ;579
0003cc  4288              CMP      r0,r1                 ;579
0003ce  d101              BNE      |L9.980|
0003d0  1540              ASRS     r0,r0,#21             ;579
0003d2  e008              B        |L9.998|
                  |L9.980|
0003d4  4912              LDR      r1,|L9.1056|
0003d6  313c              ADDS     r1,r1,#0x3c           ;579
0003d8  4288              CMP      r0,r1                 ;579
0003da  d102              BNE      |L9.994|
0003dc  f44f5000          MOV      r0,#0x2000            ;579
0003e0  e001              B        |L9.998|
                  |L9.994|
0003e2  f44f3000          MOV      r0,#0x20000           ;579
                  |L9.998|
0003e6  490d              LDR      r1,|L9.1052|
0003e8  391c              SUBS     r1,r1,#0x1c           ;579
0003ea  6048              STR      r0,[r1,#4]            ;579
                  |L9.1004|
0003ec  2001              MOVS     r0,#1                 ;583
0003ee  f8840021          STRB     r0,[r4,#0x21]         ;583
0003f2  e077              B        |L9.1252|
                  |L9.1012|
0003f4  42b8              CMP      r0,r7                 ;588
0003f6  d101              BNE      |L9.1020|
0003f8  2040              MOVS     r0,#0x40              ;588
0003fa  e032              B        |L9.1122|
                  |L9.1020|
0003fc  4540              CMP      r0,r8                 ;588
0003fe  d102              BNE      |L9.1030|
000400  f44f6080          MOV      r0,#0x400             ;588
000404  e02d              B        |L9.1122|
                  |L9.1030|
000406  4548              CMP      r0,r9                 ;588
000408  d102              BNE      |L9.1040|
00040a  f44f4080          MOV      r0,#0x4000            ;588
00040e  e028              B        |L9.1122|
                  |L9.1040|
000410  4550              CMP      r0,r10                ;588
000412  d107              BNE      |L9.1060|
000414  f44f2080          MOV      r0,#0x40000           ;588
000418  e023              B        |L9.1122|
00041a  0000              DCW      0x0000
                  |L9.1052|
                          DCD      0x4002001c
                  |L9.1056|
                          DCD      0x40020408
                  |L9.1060|
000424  4558              CMP      r0,r11                ;588
000426  d102              BNE      |L9.1070|
000428  f44f0080          MOV      r0,#0x400000          ;588
00042c  e019              B        |L9.1122|
                  |L9.1070|
00042e  492f              LDR      r1,|L9.1260|
000430  4288              CMP      r0,r1                 ;588
000432  d101              BNE      |L9.1080|
000434  2004              MOVS     r0,#4                 ;588
000436  e014              B        |L9.1122|
                  |L9.1080|
000438  492c              LDR      r1,|L9.1260|
00043a  3114              ADDS     r1,r1,#0x14           ;588
00043c  4288              CMP      r0,r1                 ;588
00043e  d101              BNE      |L9.1092|
000440  2040              MOVS     r0,#0x40              ;588
000442  e00e              B        |L9.1122|
                  |L9.1092|
000444  4929              LDR      r1,|L9.1260|
000446  3128              ADDS     r1,r1,#0x28           ;588
000448  4288              CMP      r0,r1                 ;588
00044a  d101              BNE      |L9.1104|
00044c  1500              ASRS     r0,r0,#20             ;588
00044e  e008              B        |L9.1122|
                  |L9.1104|
000450  4926              LDR      r1,|L9.1260|
000452  313c              ADDS     r1,r1,#0x3c           ;588
000454  4288              CMP      r0,r1                 ;588
000456  d102              BNE      |L9.1118|
000458  f44f4080          MOV      r0,#0x4000            ;588
00045c  e001              B        |L9.1122|
                  |L9.1118|
00045e  f44f2080          MOV      r0,#0x40000           ;588
                  |L9.1122|
000462  6018              STR      r0,[r3,#0]            ;588
000464  e03e              B        |L9.1252|
                  |L9.1126|
000466  4922              LDR      r1,|L9.1264|
000468  4288              CMP      r0,r1                 ;588
00046a  d101              BNE      |L9.1136|
00046c  2004              MOVS     r0,#4                 ;588
00046e  e036              B        |L9.1246|
                  |L9.1136|
000470  42b8              CMP      r0,r7                 ;588
000472  d101              BNE      |L9.1144|
000474  2040              MOVS     r0,#0x40              ;588
000476  e032              B        |L9.1246|
                  |L9.1144|
000478  4540              CMP      r0,r8                 ;588
00047a  d102              BNE      |L9.1154|
00047c  f44f6080          MOV      r0,#0x400             ;588
000480  e02d              B        |L9.1246|
                  |L9.1154|
000482  4548              CMP      r0,r9                 ;588
000484  d102              BNE      |L9.1164|
000486  f44f4080          MOV      r0,#0x4000            ;588
00048a  e028              B        |L9.1246|
                  |L9.1164|
00048c  4550              CMP      r0,r10                ;588
00048e  d102              BNE      |L9.1174|
000490  f44f2080          MOV      r0,#0x40000           ;588
000494  e023              B        |L9.1246|
                  |L9.1174|
000496  4558              CMP      r0,r11                ;588
000498  d102              BNE      |L9.1184|
00049a  f44f0080          MOV      r0,#0x400000          ;588
00049e  e01e              B        |L9.1246|
                  |L9.1184|
0004a0  4290              CMP      r0,r2                 ;588
0004a2  d102              BNE      |L9.1194|
0004a4  f04f6080          MOV      r0,#0x4000000         ;588
0004a8  e019              B        |L9.1246|
                  |L9.1194|
0004aa  4910              LDR      r1,|L9.1260|
0004ac  4288              CMP      r0,r1                 ;588
0004ae  d101              BNE      |L9.1204|
0004b0  2004              MOVS     r0,#4                 ;588
0004b2  e014              B        |L9.1246|
                  |L9.1204|
0004b4  490d              LDR      r1,|L9.1260|
0004b6  3114              ADDS     r1,r1,#0x14           ;588
0004b8  4288              CMP      r0,r1                 ;588
0004ba  d101              BNE      |L9.1216|
0004bc  2040              MOVS     r0,#0x40              ;588
0004be  e00e              B        |L9.1246|
                  |L9.1216|
0004c0  490a              LDR      r1,|L9.1260|
0004c2  3128              ADDS     r1,r1,#0x28           ;588
0004c4  4288              CMP      r0,r1                 ;588
0004c6  d101              BNE      |L9.1228|
0004c8  1500              ASRS     r0,r0,#20             ;588
0004ca  e008              B        |L9.1246|
                  |L9.1228|
0004cc  4907              LDR      r1,|L9.1260|
0004ce  313c              ADDS     r1,r1,#0x3c           ;588
0004d0  4288              CMP      r0,r1                 ;588
0004d2  d102              BNE      |L9.1242|
0004d4  f44f4080          MOV      r0,#0x4000            ;588
0004d8  e001              B        |L9.1246|
                  |L9.1242|
0004da  f44f2080          MOV      r0,#0x40000           ;588
                  |L9.1246|
0004de  4904              LDR      r1,|L9.1264|
0004e0  3908              SUBS     r1,r1,#8              ;588
0004e2  6048              STR      r0,[r1,#4]            ;588
                  |L9.1252|
0004e4  2000              MOVS     r0,#0                 ;592
0004e6  f8840020          STRB     r0,[r4,#0x20]         ;592
0004ea  e598              B        |L9.30|
;;;596    
                          ENDP

                  |L9.1260|
                          DCD      0x40020408
                  |L9.1264|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_RegisterCallback PROC
;;;692      */                          
;;;693    HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
000000  b510              PUSH     {r4,lr}
;;;694    {
;;;695      HAL_StatusTypeDef status = HAL_OK;
000002  2300              MOVS     r3,#0
;;;696      
;;;697      /* Process locked */
;;;698      __HAL_LOCK(hdma);
000004  f8904020          LDRB     r4,[r0,#0x20]
000008  2c01              CMP      r4,#1
00000a  d00c              BEQ      |L10.38|
00000c  2401              MOVS     r4,#1
00000e  f8804020          STRB     r4,[r0,#0x20]
;;;699      
;;;700      if(HAL_DMA_STATE_READY == hdma->State)
000012  f8904021          LDRB     r4,[r0,#0x21]
000016  2c01              CMP      r4,#1
000018  d007              BEQ      |L10.42|
;;;701      {
;;;702        switch (CallbackID)
;;;703        {
;;;704        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;705          hdma->XferCpltCallback = pCallback;
;;;706          break;
;;;707          
;;;708        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;709          hdma->XferHalfCpltCallback = pCallback;
;;;710          break;         
;;;711    
;;;712        case  HAL_DMA_XFER_ERROR_CB_ID:
;;;713          hdma->XferErrorCallback = pCallback;
;;;714          break;         
;;;715          
;;;716        case  HAL_DMA_XFER_ABORT_CB_ID:
;;;717          hdma->XferAbortCallback = pCallback;
;;;718          break; 
;;;719          
;;;720        default:
;;;721          status = HAL_ERROR;
;;;722          break;                                                            
;;;723        }
;;;724      }
;;;725      else
;;;726      {
;;;727        status = HAL_ERROR;
00001a  2301              MOVS     r3,#1
                  |L10.28|
;;;728      } 
;;;729      
;;;730      /* Release Lock */
;;;731      __HAL_UNLOCK(hdma);
00001c  2100              MOVS     r1,#0
00001e  f8801020          STRB     r1,[r0,#0x20]
;;;732      
;;;733      return status;
000022  4618              MOV      r0,r3
;;;734    }
000024  bd10              POP      {r4,pc}
                  |L10.38|
000026  2002              MOVS     r0,#2                 ;698
000028  bd10              POP      {r4,pc}
                  |L10.42|
00002a  b139              CBZ      r1,|L10.60|
00002c  2901              CMP      r1,#1                 ;702
00002e  d007              BEQ      |L10.64|
000030  2902              CMP      r1,#2                 ;702
000032  d007              BEQ      |L10.68|
000034  2903              CMP      r1,#3                 ;702
000036  d007              BEQ      |L10.72|
000038  2301              MOVS     r3,#1                 ;721
00003a  e7ef              B        |L10.28|
                  |L10.60|
00003c  6282              STR      r2,[r0,#0x28]         ;705
00003e  e7ed              B        |L10.28|
                  |L10.64|
000040  62c2              STR      r2,[r0,#0x2c]         ;709
000042  e7eb              B        |L10.28|
                  |L10.68|
000044  6302              STR      r2,[r0,#0x30]         ;713
000046  e7e9              B        |L10.28|
                  |L10.72|
000048  6342              STR      r2,[r0,#0x34]         ;717
00004a  e7e7              B        |L10.28|
;;;735    
                          ENDP


                          AREA ||i.HAL_DMA_Start||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start PROC
;;;318      */
;;;319    HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;320    {
000002  4604              MOV      r4,r0
;;;321      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;322    
;;;323      /* Check the parameters */
;;;324      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;325    
;;;326      /* Process locked */
;;;327      __HAL_LOCK(hdma);
000006  f8940020          LDRB     r0,[r4,#0x20]
00000a  2801              CMP      r0,#1
00000c  d00c              BEQ      |L11.40|
00000e  2001              MOVS     r0,#1
000010  f8840020          STRB     r0,[r4,#0x20]
;;;328    
;;;329      if(HAL_DMA_STATE_READY == hdma->State)
000014  f8946021          LDRB     r6,[r4,#0x21]
000018  2000              MOVS     r0,#0
00001a  2e01              CMP      r6,#1
00001c  d006              BEQ      |L11.44|
;;;330      {
;;;331        /* Change DMA peripheral state */
;;;332        hdma->State = HAL_DMA_STATE_BUSY;
;;;333        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;334                
;;;335        /* Disable the peripheral */
;;;336        __HAL_DMA_DISABLE(hdma);
;;;337        
;;;338        /* Configure the source, destination address and the data length & clear flags*/
;;;339        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;340        
;;;341        /* Enable the Peripheral */
;;;342        __HAL_DMA_ENABLE(hdma);
;;;343      }
;;;344      else
;;;345      {
;;;346       /* Process Unlocked */
;;;347       __HAL_UNLOCK(hdma);  
00001e  f8840020          STRB     r0,[r4,#0x20]
;;;348       status = HAL_BUSY;
000022  2502              MOVS     r5,#2
                  |L11.36|
;;;349      }  
;;;350      return status;
000024  4628              MOV      r0,r5
;;;351    }
000026  bd70              POP      {r4-r6,pc}
                  |L11.40|
000028  2002              MOVS     r0,#2                 ;327
00002a  bd70              POP      {r4-r6,pc}
                  |L11.44|
00002c  2602              MOVS     r6,#2                 ;332
00002e  f8846021          STRB     r6,[r4,#0x21]         ;332
000032  63a0              STR      r0,[r4,#0x38]         ;333
000034  6820              LDR      r0,[r4,#0]            ;336
000036  6806              LDR      r6,[r0,#0]            ;336
000038  f0260601          BIC      r6,r6,#1              ;336
00003c  6006              STR      r6,[r0,#0]            ;336
00003e  4620              MOV      r0,r4                 ;339
000040  f7fffffe          BL       DMA_SetConfig
000044  6820              LDR      r0,[r4,#0]            ;342
000046  6801              LDR      r1,[r0,#0]            ;342
000048  f0410101          ORR      r1,r1,#1              ;342
00004c  6001              STR      r1,[r0,#0]            ;342
00004e  e7e9              B        |L11.36|
;;;352    
                          ENDP


                          AREA ||i.HAL_DMA_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start_IT PROC
;;;361      */
;;;362    HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;363    {
000002  4604              MOV      r4,r0
;;;364      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;365    
;;;366      /* Check the parameters */
;;;367      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;368    
;;;369      /* Process locked */
;;;370      __HAL_LOCK(hdma);
000006  f8940020          LDRB     r0,[r4,#0x20]
00000a  2801              CMP      r0,#1
00000c  d00c              BEQ      |L12.40|
00000e  2001              MOVS     r0,#1
000010  f8840020          STRB     r0,[r4,#0x20]
;;;371      
;;;372      if(HAL_DMA_STATE_READY == hdma->State)
000014  f8946021          LDRB     r6,[r4,#0x21]
000018  2000              MOVS     r0,#0
00001a  2e01              CMP      r6,#1
00001c  d006              BEQ      |L12.44|
;;;373      {
;;;374        /* Change DMA peripheral state */
;;;375        hdma->State = HAL_DMA_STATE_BUSY;
;;;376        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;377        
;;;378        /* Disable the peripheral */
;;;379        __HAL_DMA_DISABLE(hdma);
;;;380        
;;;381        /* Configure the source, destination address and the data length & clear flags*/
;;;382        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;383        
;;;384        /* Enable the transfer complete interrupt */
;;;385        /* Enable the transfer Error interrupt */
;;;386        if(NULL != hdma->XferHalfCpltCallback)
;;;387        {
;;;388          /* Enable the Half transfer complete interrupt as well */
;;;389          __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
;;;390        }
;;;391        else
;;;392        {
;;;393          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
;;;394          __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
;;;395        }
;;;396        /* Enable the Peripheral */
;;;397        __HAL_DMA_ENABLE(hdma);
;;;398      }
;;;399      else
;;;400      {      
;;;401        /* Process Unlocked */
;;;402        __HAL_UNLOCK(hdma); 
00001e  f8840020          STRB     r0,[r4,#0x20]
;;;403    
;;;404        /* Remain BUSY */
;;;405        status = HAL_BUSY;
000022  2502              MOVS     r5,#2
                  |L12.36|
;;;406      }    
;;;407      return status;
000024  4628              MOV      r0,r5
;;;408    }
000026  bd70              POP      {r4-r6,pc}
                  |L12.40|
000028  2002              MOVS     r0,#2                 ;370
00002a  bd70              POP      {r4-r6,pc}
                  |L12.44|
00002c  2602              MOVS     r6,#2                 ;375
00002e  f8846021          STRB     r6,[r4,#0x21]         ;375
000032  63a0              STR      r0,[r4,#0x38]         ;376
000034  6820              LDR      r0,[r4,#0]            ;379
000036  6806              LDR      r6,[r0,#0]            ;379
000038  f0260601          BIC      r6,r6,#1              ;379
00003c  6006              STR      r6,[r0,#0]            ;379
00003e  4620              MOV      r0,r4                 ;382
000040  f7fffffe          BL       DMA_SetConfig
000044  6ae0              LDR      r0,[r4,#0x2c]         ;386
000046  b128              CBZ      r0,|L12.84|
000048  6820              LDR      r0,[r4,#0]            ;389
00004a  6801              LDR      r1,[r0,#0]            ;389
00004c  f041010e          ORR      r1,r1,#0xe            ;389
000050  6001              STR      r1,[r0,#0]            ;389
000052  e009              B        |L12.104|
                  |L12.84|
000054  6820              LDR      r0,[r4,#0]            ;393
000056  6801              LDR      r1,[r0,#0]            ;393
000058  f0210104          BIC      r1,r1,#4              ;393
00005c  6001              STR      r1,[r0,#0]            ;393
00005e  6820              LDR      r0,[r4,#0]            ;394
000060  6801              LDR      r1,[r0,#0]            ;394
000062  f041010a          ORR      r1,r1,#0xa            ;394
000066  6001              STR      r1,[r0,#0]            ;394
                  |L12.104|
000068  6820              LDR      r0,[r4,#0]            ;397
00006a  6801              LDR      r1,[r0,#0]            ;397
00006c  f0410101          ORR      r1,r1,#1              ;397
000070  6001              STR      r1,[r0,#0]            ;397
000072  e7d7              B        |L12.36|
;;;409    
                          ENDP


                          AREA ||i.HAL_DMA_UnRegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_UnRegisterCallback PROC
;;;743      */              
;;;744    HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
000000  b510              PUSH     {r4,lr}
;;;745    {
;;;746      HAL_StatusTypeDef status = HAL_OK;
000002  2200              MOVS     r2,#0
;;;747    
;;;748      /* Process locked */
;;;749      __HAL_LOCK(hdma);
000004  f8903020          LDRB     r3,[r0,#0x20]
000008  2b01              CMP      r3,#1
00000a  d00c              BEQ      |L13.38|
00000c  2301              MOVS     r3,#1
00000e  f8803020          STRB     r3,[r0,#0x20]
;;;750      
;;;751      if(HAL_DMA_STATE_READY == hdma->State)
000012  f8904021          LDRB     r4,[r0,#0x21]
000016  2300              MOVS     r3,#0
000018  2c01              CMP      r4,#1
00001a  d006              BEQ      |L13.42|
;;;752      {
;;;753        switch (CallbackID)
;;;754        {
;;;755        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;756          hdma->XferCpltCallback = NULL;
;;;757          break;
;;;758    
;;;759        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;760          hdma->XferHalfCpltCallback = NULL;
;;;761          break;         
;;;762    
;;;763        case  HAL_DMA_XFER_ERROR_CB_ID:
;;;764          hdma->XferErrorCallback = NULL;
;;;765          break;         
;;;766    
;;;767        case  HAL_DMA_XFER_ABORT_CB_ID:
;;;768          hdma->XferAbortCallback = NULL;
;;;769          break; 
;;;770    
;;;771        case   HAL_DMA_XFER_ALL_CB_ID:
;;;772          hdma->XferCpltCallback = NULL;
;;;773          hdma->XferHalfCpltCallback = NULL;
;;;774          hdma->XferErrorCallback = NULL;
;;;775          hdma->XferAbortCallback = NULL;
;;;776          break; 
;;;777    
;;;778        default:
;;;779          status = HAL_ERROR;
;;;780          break;
;;;781        }
;;;782      }
;;;783      else
;;;784      {
;;;785        status = HAL_ERROR;
00001c  2201              MOVS     r2,#1
                  |L13.30|
;;;786      } 
;;;787      
;;;788      /* Release Lock */
;;;789      __HAL_UNLOCK(hdma);
00001e  f8803020          STRB     r3,[r0,#0x20]
;;;790      
;;;791      return status;
000022  4610              MOV      r0,r2
;;;792    }
000024  bd10              POP      {r4,pc}
                  |L13.38|
000026  2002              MOVS     r0,#2                 ;749
000028  bd10              POP      {r4,pc}
                  |L13.42|
00002a  2905              CMP      r1,#5                 ;753
00002c  d211              BCS      |L13.82|
00002e  e8dff001          TBB      [pc,r1]               ;753
000032  0305              DCB      0x03,0x05
000034  07090b00          DCB      0x07,0x09,0x0b,0x00
000038  6283              STR      r3,[r0,#0x28]         ;756
00003a  e7f0              B        |L13.30|
00003c  62c3              STR      r3,[r0,#0x2c]         ;760
00003e  e7ee              B        |L13.30|
000040  6303              STR      r3,[r0,#0x30]         ;764
000042  e7ec              B        |L13.30|
000044  6343              STR      r3,[r0,#0x34]         ;768
000046  e7ea              B        |L13.30|
000048  6283              STR      r3,[r0,#0x28]         ;772
00004a  62c3              STR      r3,[r0,#0x2c]         ;773
00004c  6303              STR      r3,[r0,#0x30]         ;774
00004e  6343              STR      r3,[r0,#0x34]         ;775
000050  e7e5              B        |L13.30|
                  |L13.82|
000052  2201              MOVS     r2,#1                 ;779
000054  e7e3              B        |L13.30|
;;;793      
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16|
#line 463 "..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH|
#line 478
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX|
#line 665
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
