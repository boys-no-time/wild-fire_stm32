; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\usart.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\usart.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device -I..\Drivers\CMSIS\Include -I..\Middlewares\Third_Party\LwIP\src\include\lwip\apps -I..\Middlewares\Third_Party\LwIP\src\include\lwip\priv -I..\Middlewares\Third_Party\LwIP\src\include\lwip\prot -I..\Middlewares\Third_Party\LwIP\src\include\netif\ppp -I..\Middlewares\Third_Party\LwIP\src\include\netif -I..\Middlewares\Third_Party\LwIP\src\include\posix\sys -I..\Middlewares\Third_Party\LwIP\src\include\posix -I..\Middlewares\Third_Party\LwIP\system\arch -I..\Middlewares\Third_Party\LwIP\src\include\lwip -I..\Inc -I..\Middlewares\Third_Party\LwIP\src\include -I.\RTE\_f107vc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_CL -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F107xC --omf_browse=.\objects\usart.crf ..\Src\usart.c]
                          THUMB

                          AREA ||i.HAL_UART_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_UART_MspDeInit PROC
;;;188    
;;;189    void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
000000  b510              PUSH     {r4,lr}
;;;190    {
;;;191    
;;;192      if(uartHandle->Instance==USART1)
000002  6800              LDR      r0,[r0,#0]
000004  4a19              LDR      r2,|L1.108|
;;;193      {
;;;194      /* USER CODE BEGIN USART1_MspDeInit 0 */
;;;195    
;;;196      /* USER CODE END USART1_MspDeInit 0 */
;;;197        /* Peripheral clock disable */
;;;198        __HAL_RCC_USART1_CLK_DISABLE();
000006  491a              LDR      r1,|L1.112|
000008  4290              CMP      r0,r2                 ;192
00000a  d10d              BNE      |L1.40|
00000c  6988              LDR      r0,[r1,#0x18]
00000e  f4204080          BIC      r0,r0,#0x4000
000012  6188              STR      r0,[r1,#0x18]
;;;199    
;;;200        /**USART1 GPIO Configuration
;;;201        PA9     ------> USART1_TX
;;;202        PA10     ------> USART1_RX
;;;203        */
;;;204        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
000014  f44f61c0          MOV      r1,#0x600
000018  4816              LDR      r0,|L1.116|
00001a  f7fffffe          BL       HAL_GPIO_DeInit
;;;205    
;;;206        /* USART1 interrupt Deinit */
;;;207        HAL_NVIC_DisableIRQ(USART1_IRQn);
00001e  e8bd4010          POP      {r4,lr}
000022  2025              MOVS     r0,#0x25
000024  f7ffbffe          B.W      HAL_NVIC_DisableIRQ
                  |L1.40|
;;;208      /* USER CODE BEGIN USART1_MspDeInit 1 */
;;;209    
;;;210      /* USER CODE END USART1_MspDeInit 1 */
;;;211      }
;;;212      else if(uartHandle->Instance==USART2)
000028  4a13              LDR      r2,|L1.120|
00002a  4290              CMP      r0,r2
00002c  d10c              BNE      |L1.72|
;;;213      {
;;;214      /* USER CODE BEGIN USART2_MspDeInit 0 */
;;;215    
;;;216      /* USER CODE END USART2_MspDeInit 0 */
;;;217        /* Peripheral clock disable */
;;;218        __HAL_RCC_USART2_CLK_DISABLE();
00002e  69c8              LDR      r0,[r1,#0x1c]
000030  f4203000          BIC      r0,r0,#0x20000
000034  61c8              STR      r0,[r1,#0x1c]
;;;219    
;;;220        /**USART2 GPIO Configuration
;;;221        PD5     ------> USART2_TX
;;;222        PD6     ------> USART2_RX
;;;223        */
;;;224        HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
000036  2160              MOVS     r1,#0x60
000038  4810              LDR      r0,|L1.124|
00003a  f7fffffe          BL       HAL_GPIO_DeInit
;;;225    
;;;226        /* USART2 interrupt Deinit */
;;;227        HAL_NVIC_DisableIRQ(USART2_IRQn);
00003e  e8bd4010          POP      {r4,lr}
000042  2026              MOVS     r0,#0x26
000044  f7ffbffe          B.W      HAL_NVIC_DisableIRQ
                  |L1.72|
;;;228      /* USER CODE BEGIN USART2_MspDeInit 1 */
;;;229    
;;;230      /* USER CODE END USART2_MspDeInit 1 */
;;;231      }
;;;232      else if(uartHandle->Instance==USART3)
000048  4a0d              LDR      r2,|L1.128|
00004a  4290              CMP      r0,r2
00004c  d10d              BNE      |L1.106|
;;;233      {
;;;234      /* USER CODE BEGIN USART3_MspDeInit 0 */
;;;235    
;;;236      /* USER CODE END USART3_MspDeInit 0 */
;;;237        /* Peripheral clock disable */
;;;238        __HAL_RCC_USART3_CLK_DISABLE();
00004e  69c8              LDR      r0,[r1,#0x1c]
000050  f4202080          BIC      r0,r0,#0x40000
000054  61c8              STR      r0,[r1,#0x1c]
;;;239    
;;;240        /**USART3 GPIO Configuration
;;;241        PC10     ------> USART3_TX
;;;242        PC11     ------> USART3_RX
;;;243        */
;;;244        HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
000056  f44f6140          MOV      r1,#0xc00
00005a  480a              LDR      r0,|L1.132|
00005c  f7fffffe          BL       HAL_GPIO_DeInit
;;;245    
;;;246        /* USART3 interrupt Deinit */
;;;247        HAL_NVIC_DisableIRQ(USART3_IRQn);
000060  e8bd4010          POP      {r4,lr}
000064  2027              MOVS     r0,#0x27
000066  f7ffbffe          B.W      HAL_NVIC_DisableIRQ
                  |L1.106|
;;;248      /* USER CODE BEGIN USART3_MspDeInit 1 */
;;;249    
;;;250      /* USER CODE END USART3_MspDeInit 1 */
;;;251      }
;;;252    }
00006a  bd10              POP      {r4,pc}
;;;253    
                          ENDP

                  |L1.108|
                          DCD      0x40013800
                  |L1.112|
                          DCD      0x40021000
                  |L1.116|
                          DCD      0x40010800
                  |L1.120|
                          DCD      0x40004400
                  |L1.124|
                          DCD      0x40011400
                  |L1.128|
                          DCD      0x40004800
                  |L1.132|
                          DCD      0x40011000

                          AREA ||i.HAL_UART_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_UART_MspInit PROC
;;;88     
;;;89     void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
000000  b5f0              PUSH     {r4-r7,lr}
;;;90     {
000002  b085              SUB      sp,sp,#0x14
;;;91     
;;;92       GPIO_InitTypeDef GPIO_InitStruct = {0};
000004  2400              MOVS     r4,#0
000006  9401              STR      r4,[sp,#4]
000008  9402              STR      r4,[sp,#8]
00000a  9403              STR      r4,[sp,#0xc]
00000c  9404              STR      r4,[sp,#0x10]
;;;93       if(uartHandle->Instance==USART1)
;;;94       {
;;;95       /* USER CODE BEGIN USART1_MspInit 0 */
;;;96     
;;;97       /* USER CODE END USART1_MspInit 0 */
;;;98         /* USART1 clock enable */
;;;99         __HAL_RCC_USART1_CLK_ENABLE();
00000e  6801              LDR      r1,[r0,#0]
000010  484d              LDR      r0,|L2.328|
000012  4e4c              LDR      r6,|L2.324|
;;;100    
;;;101        __HAL_RCC_GPIOA_CLK_ENABLE();
;;;102        /**USART1 GPIO Configuration
;;;103        PA9     ------> USART1_TX
;;;104        PA10     ------> USART1_RX
;;;105        */
;;;106        GPIO_InitStruct.Pin = GPIO_PIN_9;
;;;107        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000014  2202              MOVS     r2,#2
;;;108        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
000016  2303              MOVS     r3,#3
;;;109        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
;;;110    
;;;111        GPIO_InitStruct.Pin = GPIO_PIN_10;
000018  1505              ASRS     r5,r0,#20
00001a  42b1              CMP      r1,r6                 ;93
00001c  d129              BNE      |L2.114|
00001e  6981              LDR      r1,[r0,#0x18]         ;99
000020  f4414180          ORR      r1,r1,#0x4000         ;99
000024  6181              STR      r1,[r0,#0x18]         ;99
000026  6981              LDR      r1,[r0,#0x18]         ;99
000028  f4014180          AND      r1,r1,#0x4000         ;99
00002c  9100              STR      r1,[sp,#0]            ;99
00002e  6981              LDR      r1,[r0,#0x18]         ;101
000030  f0410104          ORR      r1,r1,#4              ;101
000034  6181              STR      r1,[r0,#0x18]         ;101
000036  6980              LDR      r0,[r0,#0x18]         ;101
000038  f0000004          AND      r0,r0,#4              ;101
00003c  9000              STR      r0,[sp,#0]            ;101
00003e  0210              LSLS     r0,r2,#8              ;106
000040  9001              STR      r0,[sp,#4]            ;106
000042  9202              STR      r2,[sp,#8]            ;107
000044  9304              STR      r3,[sp,#0x10]         ;108
000046  4e41              LDR      r6,|L2.332|
000048  a901              ADD      r1,sp,#4              ;109
00004a  4630              MOV      r0,r6                 ;109
00004c  f7fffffe          BL       HAL_GPIO_Init
000050  9501              STR      r5,[sp,#4]
;;;112        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
000052  9402              STR      r4,[sp,#8]
;;;113        GPIO_InitStruct.Pull = GPIO_NOPULL;
000054  9403              STR      r4,[sp,#0xc]
;;;114        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
000056  a901              ADD      r1,sp,#4
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       HAL_GPIO_Init
;;;115    
;;;116        /* USART1 interrupt Init */
;;;117        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
00005e  2200              MOVS     r2,#0
000060  4611              MOV      r1,r2
000062  2025              MOVS     r0,#0x25
000064  f7fffffe          BL       HAL_NVIC_SetPriority
;;;118        HAL_NVIC_EnableIRQ(USART1_IRQn);
000068  2025              MOVS     r0,#0x25
00006a  f7fffffe          BL       HAL_NVIC_EnableIRQ
                  |L2.110|
;;;119      /* USER CODE BEGIN USART1_MspInit 1 */
;;;120    
;;;121      /* USER CODE END USART1_MspInit 1 */
;;;122      }
;;;123      else if(uartHandle->Instance==USART2)
;;;124      {
;;;125      /* USER CODE BEGIN USART2_MspInit 0 */
;;;126    
;;;127      /* USER CODE END USART2_MspInit 0 */
;;;128        /* USART2 clock enable */
;;;129        __HAL_RCC_USART2_CLK_ENABLE();
;;;130    
;;;131        __HAL_RCC_GPIOD_CLK_ENABLE();
;;;132        /**USART2 GPIO Configuration
;;;133        PD5     ------> USART2_TX
;;;134        PD6     ------> USART2_RX
;;;135        */
;;;136        GPIO_InitStruct.Pin = GPIO_PIN_5;
;;;137        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;138        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
;;;139        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
;;;140    
;;;141        GPIO_InitStruct.Pin = GPIO_PIN_6;
;;;142        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
;;;143        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;144        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
;;;145    
;;;146        __HAL_AFIO_REMAP_USART2_ENABLE();
;;;147    
;;;148        /* USART2 interrupt Init */
;;;149        HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
;;;150        HAL_NVIC_EnableIRQ(USART2_IRQn);
;;;151      /* USER CODE BEGIN USART2_MspInit 1 */
;;;152    
;;;153      /* USER CODE END USART2_MspInit 1 */
;;;154      }
;;;155      else if(uartHandle->Instance==USART3)
;;;156      {
;;;157      /* USER CODE BEGIN USART3_MspInit 0 */
;;;158    
;;;159      /* USER CODE END USART3_MspInit 0 */
;;;160        /* USART3 clock enable */
;;;161        __HAL_RCC_USART3_CLK_ENABLE();
;;;162    
;;;163        __HAL_RCC_GPIOC_CLK_ENABLE();
;;;164        /**USART3 GPIO Configuration
;;;165        PC10     ------> USART3_TX
;;;166        PC11     ------> USART3_RX
;;;167        */
;;;168        GPIO_InitStruct.Pin = GPIO_PIN_10;
;;;169        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;170        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
;;;171        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
;;;172    
;;;173        GPIO_InitStruct.Pin = GPIO_PIN_11;
;;;174        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
;;;175        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;176        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
;;;177    
;;;178        __HAL_AFIO_REMAP_USART3_PARTIAL();
;;;179    
;;;180        /* USART3 interrupt Init */
;;;181        HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
;;;182        HAL_NVIC_EnableIRQ(USART3_IRQn);
;;;183      /* USER CODE BEGIN USART3_MspInit 1 */
;;;184    
;;;185      /* USER CODE END USART3_MspInit 1 */
;;;186      }
;;;187    }
00006e  b005              ADD      sp,sp,#0x14
000070  bdf0              POP      {r4-r7,pc}
                  |L2.114|
000072  4f37              LDR      r7,|L2.336|
000074  4e37              LDR      r6,|L2.340|
000076  42b9              CMP      r1,r7                 ;123
000078  d12f              BNE      |L2.218|
00007a  69c1              LDR      r1,[r0,#0x1c]         ;129
00007c  f4413100          ORR      r1,r1,#0x20000        ;129
000080  61c1              STR      r1,[r0,#0x1c]         ;129
000082  69c1              LDR      r1,[r0,#0x1c]         ;129
000084  f4013100          AND      r1,r1,#0x20000        ;129
000088  9100              STR      r1,[sp,#0]            ;129
00008a  6981              LDR      r1,[r0,#0x18]         ;131
00008c  f0410120          ORR      r1,r1,#0x20           ;131
000090  6181              STR      r1,[r0,#0x18]         ;131
000092  6980              LDR      r0,[r0,#0x18]         ;131
000094  f0000020          AND      r0,r0,#0x20           ;131
000098  9000              STR      r0,[sp,#0]            ;131
00009a  2020              MOVS     r0,#0x20              ;136
00009c  9001              STR      r0,[sp,#4]            ;136
00009e  9202              STR      r2,[sp,#8]            ;137
0000a0  9304              STR      r3,[sp,#0x10]         ;138
0000a2  4d2d              LDR      r5,|L2.344|
0000a4  a901              ADD      r1,sp,#4              ;139
0000a6  4628              MOV      r0,r5                 ;139
0000a8  f7fffffe          BL       HAL_GPIO_Init
0000ac  2140              MOVS     r1,#0x40              ;141
0000ae  9101              STR      r1,[sp,#4]            ;141
0000b0  9402              STR      r4,[sp,#8]            ;142
0000b2  9403              STR      r4,[sp,#0xc]          ;143
0000b4  a901              ADD      r1,sp,#4              ;144
0000b6  4628              MOV      r0,r5                 ;144
0000b8  f7fffffe          BL       HAL_GPIO_Init
0000bc  6870              LDR      r0,[r6,#4]            ;146
0000be  f04060e0          ORR      r0,r0,#0x7000000      ;146
0000c2  f0400008          ORR      r0,r0,#8              ;146
0000c6  6070              STR      r0,[r6,#4]            ;146
0000c8  2200              MOVS     r2,#0                 ;149
0000ca  4611              MOV      r1,r2                 ;149
0000cc  2026              MOVS     r0,#0x26              ;149
0000ce  f7fffffe          BL       HAL_NVIC_SetPriority
0000d2  2026              MOVS     r0,#0x26              ;150
0000d4  f7fffffe          BL       HAL_NVIC_EnableIRQ
0000d8  e7c9              B        |L2.110|
                  |L2.218|
0000da  4f20              LDR      r7,|L2.348|
0000dc  42b9              CMP      r1,r7                 ;155
0000de  d1c6              BNE      |L2.110|
0000e0  69c1              LDR      r1,[r0,#0x1c]         ;161
0000e2  f4412180          ORR      r1,r1,#0x40000        ;161
0000e6  61c1              STR      r1,[r0,#0x1c]         ;161
0000e8  69c1              LDR      r1,[r0,#0x1c]         ;161
0000ea  f4012180          AND      r1,r1,#0x40000        ;161
0000ee  9100              STR      r1,[sp,#0]            ;161
0000f0  6981              LDR      r1,[r0,#0x18]         ;163
0000f2  f0410110          ORR      r1,r1,#0x10           ;163
0000f6  6181              STR      r1,[r0,#0x18]         ;163
0000f8  6980              LDR      r0,[r0,#0x18]         ;163
0000fa  f0000010          AND      r0,r0,#0x10           ;163
0000fe  9000              STR      r0,[sp,#0]            ;163
000100  9501              STR      r5,[sp,#4]            ;168
000102  9202              STR      r2,[sp,#8]            ;169
000104  9304              STR      r3,[sp,#0x10]         ;170
000106  4d16              LDR      r5,|L2.352|
000108  a901              ADD      r1,sp,#4              ;171
00010a  4628              MOV      r0,r5                 ;171
00010c  f7fffffe          BL       HAL_GPIO_Init
000110  14e9              ASRS     r1,r5,#19             ;173
000112  9101              STR      r1,[sp,#4]            ;173
000114  9402              STR      r4,[sp,#8]            ;174
000116  9403              STR      r4,[sp,#0xc]          ;175
000118  a901              ADD      r1,sp,#4              ;176
00011a  4628              MOV      r0,r5                 ;176
00011c  f7fffffe          BL       HAL_GPIO_Init
000120  6870              LDR      r0,[r6,#4]            ;178
000122  f0200030          BIC      r0,r0,#0x30           ;178
000126  f04060e0          ORR      r0,r0,#0x7000000      ;178
00012a  f0400010          ORR      r0,r0,#0x10           ;178
00012e  6070              STR      r0,[r6,#4]            ;178
000130  2200              MOVS     r2,#0                 ;181
000132  4611              MOV      r1,r2                 ;181
000134  2027              MOVS     r0,#0x27              ;181
000136  f7fffffe          BL       HAL_NVIC_SetPriority
00013a  2027              MOVS     r0,#0x27              ;182
00013c  f7fffffe          BL       HAL_NVIC_EnableIRQ
000140  e795              B        |L2.110|
;;;188    
                          ENDP

000142  0000              DCW      0x0000
                  |L2.324|
                          DCD      0x40013800
                  |L2.328|
                          DCD      0x40021000
                  |L2.332|
                          DCD      0x40010800
                  |L2.336|
                          DCD      0x40004400
                  |L2.340|
                          DCD      0x40010000
                  |L2.344|
                          DCD      0x40011400
                  |L2.348|
                          DCD      0x40004800
                  |L2.352|
                          DCD      0x40011000

                          AREA ||i.MX_USART1_UART_Init||, CODE, READONLY, ALIGN=2

                  MX_USART1_UART_Init PROC
;;;32     
;;;33     void MX_USART1_UART_Init(void)
000000  b510              PUSH     {r4,lr}
;;;34     {
;;;35     
;;;36       huart1.Instance = USART1;
000002  480c              LDR      r0,|L3.52|
000004  490a              LDR      r1,|L3.48|
000006  6001              STR      r1,[r0,#0]  ; huart1
;;;37       huart1.Init.BaudRate = 115200;
000008  f44f31e1          MOV      r1,#0x1c200
00000c  6041              STR      r1,[r0,#4]  ; huart1
;;;38       huart1.Init.WordLength = UART_WORDLENGTH_8B;
00000e  2100              MOVS     r1,#0
000010  6081              STR      r1,[r0,#8]  ; huart1
;;;39       huart1.Init.StopBits = UART_STOPBITS_1;
000012  60c1              STR      r1,[r0,#0xc]  ; huart1
;;;40       huart1.Init.Parity = UART_PARITY_NONE;
000014  6101              STR      r1,[r0,#0x10]  ; huart1
;;;41       huart1.Init.Mode = UART_MODE_TX_RX;
000016  220c              MOVS     r2,#0xc
000018  6142              STR      r2,[r0,#0x14]  ; huart1
;;;42       huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
00001a  6181              STR      r1,[r0,#0x18]  ; huart1
;;;43       huart1.Init.OverSampling = UART_OVERSAMPLING_16;
00001c  61c1              STR      r1,[r0,#0x1c]  ; huart1
;;;44       if (HAL_UART_Init(&huart1) != HAL_OK)
00001e  f7fffffe          BL       HAL_UART_Init
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L3.46|
;;;45       {
;;;46         Error_Handler();
000026  e8bd4010          POP      {r4,lr}
00002a  f7ffbffe          B.W      Error_Handler
                  |L3.46|
;;;47       }
;;;48     
;;;49     }
00002e  bd10              POP      {r4,pc}
;;;50     /* USART2 init function */
                          ENDP

                  |L3.48|
                          DCD      0x40013800
                  |L3.52|
                          DCD      ||.bss||

                          AREA ||i.MX_USART2_UART_Init||, CODE, READONLY, ALIGN=2

                  MX_USART2_UART_Init PROC
;;;51     
;;;52     void MX_USART2_UART_Init(void)
000000  b510              PUSH     {r4,lr}
;;;53     {
;;;54     
;;;55       huart2.Instance = USART2;
000002  480c              LDR      r0,|L4.52|
000004  490a              LDR      r1,|L4.48|
000006  6001              STR      r1,[r0,#0]  ; huart2
;;;56       huart2.Init.BaudRate = 115200;
000008  f44f31e1          MOV      r1,#0x1c200
00000c  6041              STR      r1,[r0,#4]  ; huart2
;;;57       huart2.Init.WordLength = UART_WORDLENGTH_8B;
00000e  2100              MOVS     r1,#0
000010  6081              STR      r1,[r0,#8]  ; huart2
;;;58       huart2.Init.StopBits = UART_STOPBITS_1;
000012  60c1              STR      r1,[r0,#0xc]  ; huart2
;;;59       huart2.Init.Parity = UART_PARITY_NONE;
000014  6101              STR      r1,[r0,#0x10]  ; huart2
;;;60       huart2.Init.Mode = UART_MODE_TX_RX;
000016  220c              MOVS     r2,#0xc
000018  6142              STR      r2,[r0,#0x14]  ; huart2
;;;61       huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
00001a  6181              STR      r1,[r0,#0x18]  ; huart2
;;;62       huart2.Init.OverSampling = UART_OVERSAMPLING_16;
00001c  61c1              STR      r1,[r0,#0x1c]  ; huart2
;;;63       if (HAL_UART_Init(&huart2) != HAL_OK)
00001e  f7fffffe          BL       HAL_UART_Init
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L4.46|
;;;64       {
;;;65         Error_Handler();
000026  e8bd4010          POP      {r4,lr}
00002a  f7ffbffe          B.W      Error_Handler
                  |L4.46|
;;;66       }
;;;67     
;;;68     }
00002e  bd10              POP      {r4,pc}
;;;69     /* USART3 init function */
                          ENDP

                  |L4.48|
                          DCD      0x40004400
                  |L4.52|
                          DCD      ||.bss||+0x40

                          AREA ||i.MX_USART3_UART_Init||, CODE, READONLY, ALIGN=2

                  MX_USART3_UART_Init PROC
;;;70     
;;;71     void MX_USART3_UART_Init(void)
000000  b510              PUSH     {r4,lr}
;;;72     {
;;;73     
;;;74       huart3.Instance = USART3;
000002  480c              LDR      r0,|L5.52|
000004  490a              LDR      r1,|L5.48|
000006  6001              STR      r1,[r0,#0]  ; huart3
;;;75       huart3.Init.BaudRate = 115200;
000008  f44f31e1          MOV      r1,#0x1c200
00000c  6041              STR      r1,[r0,#4]  ; huart3
;;;76       huart3.Init.WordLength = UART_WORDLENGTH_8B;
00000e  2100              MOVS     r1,#0
000010  6081              STR      r1,[r0,#8]  ; huart3
;;;77       huart3.Init.StopBits = UART_STOPBITS_1;
000012  60c1              STR      r1,[r0,#0xc]  ; huart3
;;;78       huart3.Init.Parity = UART_PARITY_NONE;
000014  6101              STR      r1,[r0,#0x10]  ; huart3
;;;79       huart3.Init.Mode = UART_MODE_TX_RX;
000016  220c              MOVS     r2,#0xc
000018  6142              STR      r2,[r0,#0x14]  ; huart3
;;;80       huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
00001a  6181              STR      r1,[r0,#0x18]  ; huart3
;;;81       huart3.Init.OverSampling = UART_OVERSAMPLING_16;
00001c  61c1              STR      r1,[r0,#0x1c]  ; huart3
;;;82       if (HAL_UART_Init(&huart3) != HAL_OK)
00001e  f7fffffe          BL       HAL_UART_Init
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L5.46|
;;;83       {
;;;84         Error_Handler();
000026  e8bd4010          POP      {r4,lr}
00002a  f7ffbffe          B.W      Error_Handler
                  |L5.46|
;;;85       }
;;;86     
;;;87     }
00002e  bd10              POP      {r4,pc}
;;;88     
                          ENDP

                  |L5.48|
                          DCD      0x40004800
                  |L5.52|
                          DCD      ||.bss||+0x80

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  huart1
                          %        64
                  huart2
                          %        64
                  huart3
                          %        64

;*** Start embedded assembler ***

#line 1 "..\\Src\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_aa2567c7____REV16|
#line 463 "..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___7_usart_c_aa2567c7____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_aa2567c7____REVSH|
#line 478
|__asm___7_usart_c_aa2567c7____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_aa2567c7____RRX|
#line 665
|__asm___7_usart_c_aa2567c7____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
