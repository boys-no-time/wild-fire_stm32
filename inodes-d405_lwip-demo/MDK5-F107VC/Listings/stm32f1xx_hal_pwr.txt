; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\stm32f1xx_hal_pwr.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f1xx_hal_pwr.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\CMSIS\Device -I..\Drivers\CMSIS\Include -I..\Middlewares\Third_Party\LwIP\src\include -I..\Middlewares\Third_Party\LwIP\system -I..\Middlewares\Third_Party\LwIP\src\include\netif\ppp -I..\Middlewares\Third_Party\LwIP\src\include\lwip -I..\Middlewares\Third_Party\LwIP\src\include\lwip\apps -I..\Middlewares\Third_Party\LwIP\src\include\lwip\priv -I..\Middlewares\Third_Party\LwIP\src\include\lwip\prot -I..\Middlewares\Third_Party\LwIP\src\include\netif -I..\Middlewares\Third_Party\LwIP\src\include\posix -I..\Middlewares\Third_Party\LwIP\src\include\posix\sys -I..\Middlewares\Third_Party\LwIP\system\arch -I..\App -I..\Middlewares\Third_Party\LwIP\system -I.\RTE\_f107vc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_CL -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F107xC --omf_browse=.\objects\stm32f1xx_hal_pwr.crf ..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pwr.c]
                          THUMB

                          AREA ||i.HAL_PWR_ConfigPVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_ConfigPVD PROC
;;;315      */
;;;316    void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
000000  b530              PUSH     {r4,r5,lr}
;;;317    {
;;;318      /* Check the parameters */
;;;319      assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
;;;320      assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
;;;321    
;;;322      /* Set PLS[7:5] bits according to PVDLevel value */
;;;323      MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
000002  491c              LDR      r1,|L1.116|
000004  680a              LDR      r2,[r1,#0]
000006  6803              LDR      r3,[r0,#0]
000008  f02202e0          BIC      r2,r2,#0xe0
00000c  431a              ORRS     r2,r2,r3
00000e  600a              STR      r2,[r1,#0]
;;;324      
;;;325      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;326      __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
000010  4c19              LDR      r4,|L1.120|
000012  6821              LDR      r1,[r4,#0]
000014  f4213180          BIC      r1,r1,#0x10000
000018  6021              STR      r1,[r4,#0]
;;;327      __HAL_PWR_PVD_EXTI_DISABLE_IT();
00001a  1f21              SUBS     r1,r4,#4
00001c  680a              LDR      r2,[r1,#0]
00001e  f4223280          BIC      r2,r2,#0x10000
000022  600a              STR      r2,[r1,#0]
;;;328      __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
000024  4b14              LDR      r3,|L1.120|
000026  3308              ADDS     r3,r3,#8
000028  681a              LDR      r2,[r3,#0]
00002a  f4223280          BIC      r2,r2,#0x10000
00002e  601a              STR      r2,[r3,#0]
;;;329      __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
000030  1f1a              SUBS     r2,r3,#4
000032  6815              LDR      r5,[r2,#0]
000034  f4253580          BIC      r5,r5,#0x10000
000038  6015              STR      r5,[r2,#0]
;;;330    
;;;331      /* Configure interrupt mode */
;;;332      if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
00003a  6845              LDR      r5,[r0,#4]
00003c  03ed              LSLS     r5,r5,#15
00003e  d503              BPL      |L1.72|
;;;333      {
;;;334        __HAL_PWR_PVD_EXTI_ENABLE_IT();
000040  680d              LDR      r5,[r1,#0]
000042  f4453580          ORR      r5,r5,#0x10000
000046  600d              STR      r5,[r1,#0]
                  |L1.72|
;;;335      }
;;;336      
;;;337      /* Configure event mode */
;;;338      if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
000048  6841              LDR      r1,[r0,#4]
00004a  0389              LSLS     r1,r1,#14
00004c  d503              BPL      |L1.86|
;;;339      {
;;;340        __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
00004e  6821              LDR      r1,[r4,#0]
000050  f4413180          ORR      r1,r1,#0x10000
000054  6021              STR      r1,[r4,#0]
                  |L1.86|
;;;341      }
;;;342      
;;;343      /* Configure the edge */
;;;344      if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
000056  7901              LDRB     r1,[r0,#4]
000058  07c9              LSLS     r1,r1,#31
00005a  d003              BEQ      |L1.100|
;;;345      {
;;;346        __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
00005c  6811              LDR      r1,[r2,#0]
00005e  f4413180          ORR      r1,r1,#0x10000
000062  6011              STR      r1,[r2,#0]
                  |L1.100|
;;;347      }
;;;348      
;;;349      if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
000064  7900              LDRB     r0,[r0,#4]
000066  0780              LSLS     r0,r0,#30
000068  d503              BPL      |L1.114|
;;;350      {
;;;351        __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
00006a  6818              LDR      r0,[r3,#0]
00006c  f4403080          ORR      r0,r0,#0x10000
000070  6018              STR      r0,[r3,#0]
                  |L1.114|
;;;352      }
;;;353    }
000072  bd30              POP      {r4,r5,pc}
;;;354    
                          ENDP

                  |L1.116|
                          DCD      0x40007000
                  |L1.120|
                          DCD      0x40010404

                          AREA ||i.HAL_PWR_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DeInit PROC
;;;155      */
;;;156    void HAL_PWR_DeInit(void)
000000  4804              LDR      r0,|L2.20|
;;;157    {
;;;158      __HAL_RCC_PWR_FORCE_RESET();
000002  6901              LDR      r1,[r0,#0x10]
000004  f0415180          ORR      r1,r1,#0x10000000
000008  6101              STR      r1,[r0,#0x10]
;;;159      __HAL_RCC_PWR_RELEASE_RESET();
00000a  6901              LDR      r1,[r0,#0x10]
00000c  f0215180          BIC      r1,r1,#0x10000000
000010  6101              STR      r1,[r0,#0x10]
;;;160    }
000012  4770              BX       lr
;;;161    
                          ENDP

                  |L2.20|
                          DCD      0x40021000

                          AREA ||i.HAL_PWR_DisableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableBkUpAccess PROC
;;;181      */
;;;182    void HAL_PWR_DisableBkUpAccess(void)
000000  4901              LDR      r1,|L3.8|
;;;183    {
;;;184      /* Disable access to RTC and backup registers */
;;;185      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6208              STR      r0,[r1,#0x20]
;;;186    }
000006  4770              BX       lr
;;;187    
                          ENDP

                  |L3.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisablePVD PROC
;;;368      */
;;;369    void HAL_PWR_DisablePVD(void)
000000  4901              LDR      r1,|L4.8|
;;;370    {
;;;371      /* Disable the power voltage detector */
;;;372      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6108              STR      r0,[r1,#0x10]
;;;373    }
000006  4770              BX       lr
;;;374    
                          ENDP

                  |L4.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSEVOnPend PROC
;;;566      */
;;;567    void HAL_PWR_DisableSEVOnPend(void)
000000  4802              LDR      r0,|L5.12|
;;;568    {
;;;569      /* Clear SEVONPEND bit of Cortex System Control Register */
;;;570      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;571    }
00000a  4770              BX       lr
;;;572    
                          ENDP

                  |L5.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSleepOnExit PROC
;;;540      */
;;;541    void HAL_PWR_DisableSleepOnExit(void)
000000  4802              LDR      r0,|L6.12|
;;;542    {
;;;543      /* Clear SLEEPONEXIT bit of Cortex System Control Register */
;;;544      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210102          BIC      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;545    }
00000a  4770              BX       lr
;;;546    
                          ENDP

                  |L6.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableWakeUpPin PROC
;;;396      */
;;;397    void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
000000  fa90f0a0          RBIT     r0,r0
;;;398    {
;;;399      /* Check the parameter */
;;;400      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;401      /* Disable the EWUPx pin */
;;;402      *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
000004  4a04              LDR      r2,|L7.24|
000006  fab0f080          CLZ      r0,r0
00000a  eb020080          ADD      r0,r2,r0,LSL #2
00000e  2100              MOVS     r1,#0
000010  f8c01080          STR      r1,[r0,#0x80]
;;;403    }
000014  4770              BX       lr
;;;404    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableBkUpAccess PROC
;;;168      */
;;;169    void HAL_PWR_EnableBkUpAccess(void)
000000  4901              LDR      r1,|L8.8|
;;;170    {
;;;171      /* Enable access to RTC and backup registers */
;;;172      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6208              STR      r0,[r1,#0x20]
;;;173    }
000006  4770              BX       lr
;;;174    
                          ENDP

                  |L8.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnablePVD PROC
;;;358      */
;;;359    void HAL_PWR_EnablePVD(void)
000000  4901              LDR      r1,|L9.8|
;;;360    {
;;;361      /* Enable the power voltage detector */
;;;362      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6108              STR      r0,[r1,#0x10]
;;;363    }
000006  4770              BX       lr
;;;364    
                          ENDP

                  |L9.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSEVOnPend PROC
;;;553      */
;;;554    void HAL_PWR_EnableSEVOnPend(void)
000000  4802              LDR      r0,|L10.12|
;;;555    {
;;;556      /* Set SEVONPEND bit of Cortex System Control Register */
;;;557      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410110          ORR      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;558    }
00000a  4770              BX       lr
;;;559    
                          ENDP

                  |L10.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSleepOnExit PROC
;;;527      */
;;;528    void HAL_PWR_EnableSleepOnExit(void)
000000  4802              LDR      r0,|L11.12|
;;;529    {
;;;530      /* Set SLEEPONEXIT bit of Cortex System Control Register */
;;;531      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;532    }
00000a  4770              BX       lr
;;;533    
                          ENDP

                  |L11.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableWakeUpPin PROC
;;;381      */
;;;382    void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
000000  fa90f0a0          RBIT     r0,r0
;;;383    {
;;;384      /* Check the parameter */
;;;385      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;386      /* Enable the EWUPx pin */
;;;387      *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
000004  4a04              LDR      r2,|L12.24|
000006  fab0f080          CLZ      r0,r0
00000a  eb020080          ADD      r0,r2,r0,LSL #2
00000e  2101              MOVS     r1,#1
000010  f8c01080          STR      r1,[r0,#0x80]
;;;388    }
000014  4770              BX       lr
;;;389    
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnterSLEEPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSLEEPMode PROC
;;;416      */
;;;417    void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
000000  4806              LDR      r0,|L13.28|
;;;418    {
;;;419      /* Check the parameters */
;;;420      /* No check on Regulator because parameter not used in SLEEP mode */
;;;421      /* Prevent unused argument(s) compilation warning */
;;;422      UNUSED(Regulator);
;;;423    
;;;424      assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
;;;425    
;;;426      /* Clear SLEEPDEEP bit of Cortex System Control Register */
;;;427      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000002  6802              LDR      r2,[r0,#0]
000004  f0220204          BIC      r2,r2,#4
000008  6002              STR      r2,[r0,#0]
;;;428    
;;;429      /* Select SLEEP mode entry -------------------------------------------------*/
;;;430      if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
00000a  2901              CMP      r1,#1
00000c  d003              BEQ      |L13.22|
;;;431      {
;;;432        /* Request Wait For Interrupt */
;;;433        __WFI();
;;;434      }
;;;435      else
;;;436      {
;;;437        /* Request Wait For Event */
;;;438        __SEV();
00000e  bf40              SEV      
;;;439        __WFE();
000010  bf20              WFE      
;;;440        __WFE();
000012  bf20              WFE      
;;;441      }
;;;442    }
000014  4770              BX       lr
                  |L13.22|
000016  bf30              WFI                            ;433
000018  4770              BX       lr
;;;443    
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTANDBYMode PROC
;;;502      */
;;;503    void HAL_PWR_EnterSTANDBYMode(void)
000000  4805              LDR      r0,|L14.24|
;;;504    {
;;;505      /* Select Standby mode */
;;;506      SET_BIT(PWR->CR, PWR_CR_PDDS);
000002  6801              LDR      r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;507    
;;;508      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;509      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000a  4804              LDR      r0,|L14.28|
00000c  6801              LDR      r1,[r0,#0]
00000e  f0410104          ORR      r1,r1,#4
000012  6001              STR      r1,[r0,#0]
;;;510    
;;;511      /* This option is used to ensure that store operations are completed */
;;;512    #if defined ( __CC_ARM)
;;;513      __force_stores();
;;;514    #endif
;;;515      /* Request Wait For Interrupt */
;;;516      __WFI();
000014  bf30              WFI      
;;;517    }
000016  4770              BX       lr
;;;518    
                          ENDP

                  |L14.24|
                          DCD      0x40007000
                  |L14.28|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTOPMode PROC
;;;462      */
;;;463    void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
000000  b510              PUSH     {r4,lr}
;;;464    {
;;;465      /* Check the parameters */
;;;466      assert_param(IS_PWR_REGULATOR(Regulator));
;;;467      assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;468    
;;;469      /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
;;;470      CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
000002  4a0e              LDR      r2,|L15.60|
000004  6813              LDR      r3,[r2,#0]
000006  f0230302          BIC      r3,r3,#2
00000a  6013              STR      r3,[r2,#0]
;;;471    
;;;472      /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
;;;473      MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
00000c  6813              LDR      r3,[r2,#0]
00000e  f0230301          BIC      r3,r3,#1
000012  4303              ORRS     r3,r3,r0
000014  6013              STR      r3,[r2,#0]
;;;474    
;;;475      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;476      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000016  4c0a              LDR      r4,|L15.64|
000018  6820              LDR      r0,[r4,#0]
00001a  f0400004          ORR      r0,r0,#4
00001e  6020              STR      r0,[r4,#0]
;;;477    
;;;478      /* Select Stop mode entry --------------------------------------------------*/
;;;479      if(STOPEntry == PWR_STOPENTRY_WFI)
000020  2901              CMP      r1,#1
000022  d009              BEQ      |L15.56|
;;;480      {
;;;481        /* Request Wait For Interrupt */
;;;482        __WFI();
;;;483      }
;;;484      else
;;;485      {
;;;486        /* Request Wait For Event */
;;;487        __SEV();
000024  bf40              SEV      
;;;488        PWR_OverloadWfe(); /* WFE redefine locally */
000026  f7fffffe          BL       PWR_OverloadWfe
;;;489        PWR_OverloadWfe(); /* WFE redefine locally */
00002a  f7fffffe          BL       PWR_OverloadWfe
                  |L15.46|
;;;490      }
;;;491      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;492      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00002e  6820              LDR      r0,[r4,#0]
000030  f0200004          BIC      r0,r0,#4
000034  6020              STR      r0,[r4,#0]
;;;493    }
000036  bd10              POP      {r4,pc}
                  |L15.56|
000038  bf30              WFI                            ;482
00003a  e7f8              B        |L15.46|
;;;494    
                          ENDP

                  |L15.60|
                          DCD      0x40007000
                  |L15.64|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_PVDCallback||, CODE, READONLY, ALIGN=1

                  HAL_PWR_PVDCallback PROC
;;;596      */
;;;597    __weak void HAL_PWR_PVDCallback(void)
000000  4770              BX       lr
;;;598    {
;;;599      /* NOTE : This function Should not be modified, when the callback is needed,
;;;600                the HAL_PWR_PVDCallback could be implemented in the user file
;;;601       */ 
;;;602    }
;;;603    
                          ENDP


                          AREA ||i.HAL_PWR_PVD_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_PWR_PVD_IRQHandler PROC
;;;579      */
;;;580    void HAL_PWR_PVD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;581    {
;;;582      /* Check PWR exti flag */
;;;583      if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
000002  4c05              LDR      r4,|L17.24|
000004  6820              LDR      r0,[r4,#0]
000006  03c0              LSLS     r0,r0,#15
000008  d504              BPL      |L17.20|
;;;584      {
;;;585        /* PWR PVD interrupt user callback */
;;;586        HAL_PWR_PVDCallback();
00000a  f7fffffe          BL       HAL_PWR_PVDCallback
;;;587    
;;;588        /* Clear PWR Exti pending bit */
;;;589        __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
00000e  f44f3080          MOV      r0,#0x10000
000012  6020              STR      r0,[r4,#0]
                  |L17.20|
;;;590      }
;;;591    }
000014  bd10              POP      {r4,pc}
;;;592    
                          ENDP

000016  0000              DCW      0x0000
                  |L17.24|
                          DCD      0x40010414

                          AREA ||i.PWR_OverloadWfe||, CODE, READONLY, ALIGN=1

                  PWR_OverloadWfe PROC
                  ||__tagsym$$noinline||
;;;116    __NOINLINE
;;;117    static void PWR_OverloadWfe(void)
000000  bf20              WFE      
;;;118    {
;;;119      __asm volatile( "wfe" );
;;;120      __asm volatile( "nop" );
000002  bf00              NOP      
;;;121    }
000004  4770              BX       lr
;;;122    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REV16|
#line 463 "..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REVSH|
#line 478
|__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____RRX|
#line 665
|__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
